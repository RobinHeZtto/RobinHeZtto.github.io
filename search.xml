<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android之Init]]></title>
      <url>http://hesstudio.cn/2016/08/22/android-init/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Init进程是内核启动后在用户空间创建的第一个用户级进程,它的pid为1.其他所有的进程都是由其直接或间接fork产生的.</p>
<div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/boot-flow.jpg?raw=true" alt="Android系统启动"><br></div><br>Init调用流程如下图示,通过kernel/arch/arm/kernel/head-common.S <code>b    start_kernel</code>进入到kernel/init/main.c <code>start_kernel</code>执行.并在run_init_process()中通过do_execve创建Init进程.<br><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/android_init_flow.jpg?raw=true" alt="Kernel init flow"><br></div>

<p>kernel_init()中的execute_command即/init，通过run_init_process执行execve()系统调用来启动init进程。如果没有定义execute_command，则在/sbin，/etc，/bin查找，否则Kernel Panic.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">static int __ref kernel_init(void *unused)</span><br><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  if (execute_command) &#123;</span><br><span class="line">    ret = run_init_process(execute_command);</span><br><span class="line">    if (!ret)</span><br><span class="line">      return 0;</span><br><span class="line">    pr_err(&quot;Failed to execute %s (error %d).  Attempting defaults...\n&quot;,</span><br><span class="line">      execute_command, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  if (!try_to_run_init_process(&quot;/sbin/init&quot;) ||</span><br><span class="line">	    !try_to_run_init_process(&quot;/etc/init&quot;) ||</span><br><span class="line">	    !try_to_run_init_process(&quot;/bin/init&quot;) ||</span><br><span class="line">	    !try_to_run_init_process(&quot;/bin/sh&quot;))</span><br><span class="line">		return 0;</span><br><span class="line"></span><br><span class="line">	panic(&quot;No working init found.  Try passing init= option to kernel. &quot;</span><br><span class="line">	      &quot;See Linux Documentation/init.txt for guidance.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Android中的Init进程与Linux不同,它除了启动ServiceManager,Zygote等关键deamon进程外,还实现了以下的四大功能.</p>
<ul>
<li>解析执行init.rc文件</li>
<li>创建设备节点</li>
<li>处理子进程的终止</li>
<li>属性服务</li>
</ul>
<h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><blockquote>
<p>Init的源码主要集中在system/core/init/</p>
</blockquote>
<p>下面从init.cpp的main()开始逐段来分析init进程的执行流程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">if (!strcmp(basename(argv[0]), &quot;ueventd&quot;)) &#123;</span><br><span class="line">    return ueventd_main(argc, argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!strcmp(basename(argv[0]), &quot;watchdogd&quot;)) &#123;</span><br><span class="line">    return watchdogd_main(argc, argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Clear the umask.</span><br><span class="line">umask(0);</span><br><span class="line"></span><br><span class="line">add_environment(&quot;PATH&quot;, _PATH_DEFPATH);</span><br><span class="line"></span><br><span class="line">bool is_first_stage = (argc == 1) || (strcmp(argv[1], &quot;--second-stage&quot;) != 0);</span><br><span class="line"></span><br><span class="line">// Get the basic filesystem setup we need put together in the initramdisk</span><br><span class="line">// on / and then we&apos;ll let the rc file figure out the rest.</span><br><span class="line">if (is_first_stage) &#123;</span><br><span class="line">    mount(&quot;tmpfs&quot;, &quot;/dev&quot;, &quot;tmpfs&quot;, MS_NOSUID, &quot;mode=0755&quot;);</span><br><span class="line">    mkdir(&quot;/dev/pts&quot;, 0755);</span><br><span class="line">    mkdir(&quot;/dev/socket&quot;, 0755);</span><br><span class="line">    mount(&quot;devpts&quot;, &quot;/dev/pts&quot;, &quot;devpts&quot;, 0, NULL);</span><br><span class="line">    #define MAKE_STR(x) __STRING(x)</span><br><span class="line">    mount(&quot;proc&quot;, &quot;/proc&quot;, &quot;proc&quot;, 0, &quot;hidepid=2,gid=&quot; MAKE_STR(AID_READPROC));</span><br><span class="line">    mount(&quot;sysfs&quot;, &quot;/sys&quot;, &quot;sysfs&quot;, 0, NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>首先根据init的执行参数argv[0]判断是否是执行ueventd或watchdogd(ueventd与watchdogd功能在init中实现),通过system/core/init/Android.mk可以知道,/sbin/ueventd与/sbin/watchdogd实际上都链接到init.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Create symlinks</span><br><span class="line">LOCAL_POST_INSTALL_CMD := $(hide) mkdir -p $(TARGET_ROOT_OUT)/sbin; \</span><br><span class="line">    ln -sf ../init $(TARGET_ROOT_OUT)/sbin/ueventd; \</span><br><span class="line">    ln -sf ../init $(TARGET_ROOT_OUT)/sbin/watchdogd</span><br></pre></td></tr></table></figure>
</li>
<li><p>umask(0) 即创建文件属性默认为0777.</p>
</li>
<li>is_first_stage是用来判断init是在内核空间还是在用户空间启动,is_first_stage为true意味着init是运行在kernel domain.因为selinux的相关设置需要在内核空间下.</li>
<li>如果是在内核启动,创建/dev，/proc，/sys目录并mount相应的虚拟内存文件系统</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// We must have some place other than / to create the device nodes for</span><br><span class="line">// kmsg and null, otherwise we won&apos;t be able to remount / read-only</span><br><span class="line">// later on. Now that tmpfs is mounted on /dev, we can actually talk</span><br><span class="line">// to the outside world.</span><br><span class="line">open_devnull_stdio();</span><br><span class="line">klog_init();</span><br><span class="line">klog_set_level(KLOG_NOTICE_LEVEL);</span><br><span class="line"></span><br><span class="line">NOTICE(&quot;init %s started!\n&quot;, is_first_stage ? &quot;first stage&quot; : &quot;second stage&quot;);</span><br></pre></td></tr></table></figure>
<ol>
<li><p>open_devnull_stdio();屏蔽标准输入/输出/错误,即标准输入输出都无法输出信息，如下代码所示,创建/dev/<strong>null</strong>并通过dup2()复制文件描述符，重定向stdin,stdout,stderr到/dev/__null__上.(一般daemon进程都会有类似的重定位操作)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void open_devnull_stdio(void)</span><br><span class="line">&#123;</span><br><span class="line">    // Try to avoid the mknod() call if we can. Since SELinux makes</span><br><span class="line">    // a /dev/null replacement available for free, let&apos;s use it.</span><br><span class="line">    int fd = open(&quot;/sys/fs/selinux/null&quot;, O_RDWR);</span><br><span class="line">    if (fd == -1) &#123;</span><br><span class="line">        // OOPS, /sys/fs/selinux/null isn&apos;t available, likely because</span><br><span class="line">        // /sys/fs/selinux isn&apos;t mounted. Fall back to mknod.</span><br><span class="line">        static const char *name = &quot;/dev/__null__&quot;;</span><br><span class="line">        if (mknod(name, S_IFCHR | 0600, (1 &lt;&lt; 8) | 3) == 0) &#123;</span><br><span class="line">            fd = open(name, O_RDWR);</span><br><span class="line">            unlink(name);</span><br><span class="line">        &#125;</span><br><span class="line">        if (fd == -1) &#123;</span><br><span class="line">            exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dup2(fd, 0);</span><br><span class="line">    dup2(fd, 1);</span><br><span class="line">    dup2(fd, 2);</span><br><span class="line">    if (fd &gt; 2) &#123;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>klog_init,创建kmsg设备节点,printk打印的log可以通过cat /proc/kmsg或者dmesg输出.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void klog_init(void) &#123;</span><br><span class="line">    if (klog_fd &gt;= 0) return; /* Already initialized */</span><br><span class="line"></span><br><span class="line">    klog_fd = open(&quot;/dev/kmsg&quot;, O_WRONLY | O_CLOEXEC);</span><br><span class="line">    if (klog_fd &gt;= 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static const char* name = &quot;/dev/__kmsg__&quot;;</span><br><span class="line">    if (mknod(name, S_IFCHR | 0600, (1 &lt;&lt; 8) | 11) == 0) &#123;</span><br><span class="line">        klog_fd = open(name, O_WRONLY | O_CLOEXEC);</span><br><span class="line">        unlink(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>klog_set_level设置log等级</p>
</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (!is_first_stage) &#123;</span><br><span class="line">    // Indicate that booting is in progress to background fw loaders, etc.</span><br><span class="line">    close(open(&quot;/dev/.booting&quot;, O_WRONLY | O_CREAT | O_CLOEXEC, 0000));</span><br><span class="line"></span><br><span class="line">    property_init();</span><br><span class="line"></span><br><span class="line">    // If arguments are passed both on the command line and in DT,</span><br><span class="line">    // properties set in DT always have priority over the command-line ones.</span><br><span class="line">    process_kernel_dt();</span><br><span class="line">    process_kernel_cmdline();</span><br><span class="line"></span><br><span class="line">    // Propagate the kernel variables to internal variables</span><br><span class="line">    // used by init as well as the current required properties.</span><br><span class="line">    export_kernel_boot_props();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>如果是在用户态启动，利用/dev/.booting来标志进程是否处于初始化状态.</li>
<li>调用property_init()初始化属性系统，后面详细描述.</li>
<li><p>调用process_kernel_dt()处理device tree.读取/proc/device-tree/firmware/android/compatible下的android,firmware二个文件,并根据其文件名与文件内容分别设置ro.boot.android,ro.boot.firmware二个属性.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">static void process_kernel_dt() &#123;</span><br><span class="line">    static const char android_dir[] = &quot;/proc/device-tree/firmware/android&quot;;</span><br><span class="line"></span><br><span class="line">    std::string file_name = android::base::StringPrintf(&quot;%s/compatible&quot;, android_dir);</span><br><span class="line"></span><br><span class="line">    std::string dt_file;</span><br><span class="line">    android::base::ReadFileToString(file_name, &amp;dt_file);</span><br><span class="line">    if (!dt_file.compare(&quot;android,firmware&quot;)) &#123;</span><br><span class="line">        ERROR(&quot;firmware/android is not compatible with &apos;android,firmware&apos;\n&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::unique_ptr&lt;DIR, int(*)(DIR*)&gt;dir(opendir(android_dir), closedir);</span><br><span class="line">    if (!dir) return;</span><br><span class="line"></span><br><span class="line">    struct dirent *dp;</span><br><span class="line">    while ((dp = readdir(dir.get())) != NULL) &#123;</span><br><span class="line">        if (dp-&gt;d_type != DT_REG || !strcmp(dp-&gt;d_name, &quot;compatible&quot;) || !strcmp(dp-&gt;d_name, &quot;name&quot;)) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        file_name = android::base::StringPrintf(&quot;%s/%s&quot;, android_dir, dp-&gt;d_name);</span><br><span class="line"></span><br><span class="line">        android::base::ReadFileToString(file_name, &amp;dt_file);</span><br><span class="line">        std::replace(dt_file.begin(), dt_file.end(), &apos;,&apos;, &apos;.&apos;);</span><br><span class="line"></span><br><span class="line">        std::string property_name = android::base::StringPrintf(&quot;ro.boot.%s&quot;, dp-&gt;d_name);</span><br><span class="line">        property_set(property_name.c_str(), dt_file.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用process_kernel_cmdline()读取/proc/cmdline文件,并设置cmdline文件中以androidboot.开头命令的对应ro.boot.开头的属性值.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">static void process_kernel_cmdline() &#123;</span><br><span class="line">    // Don&apos;t expose the raw commandline to unprivileged processes.</span><br><span class="line">    chmod(&quot;/proc/cmdline&quot;, 0440);</span><br><span class="line"></span><br><span class="line">    // The first pass does the common stuff, and finds if we are in qemu.</span><br><span class="line">    // The second pass is only necessary for qemu to export all kernel params</span><br><span class="line">    // as properties.</span><br><span class="line">    import_kernel_cmdline(false, import_kernel_nv);</span><br><span class="line">    if (qemu[0]) import_kernel_cmdline(true, import_kernel_nv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void import_kernel_nv(const std::string&amp; key, const std::string&amp; value, bool for_emulator) &#123;</span><br><span class="line">    if (key.empty()) return;</span><br><span class="line"></span><br><span class="line">    if (for_emulator) &#123;</span><br><span class="line">        // In the emulator, export any kernel option with the &quot;ro.kernel.&quot; prefix.</span><br><span class="line">        property_set(android::base::StringPrintf(&quot;ro.kernel.%s&quot;, key.c_str()).c_str(), value.c_str());</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (key == &quot;qemu&quot;) &#123;</span><br><span class="line">        strlcpy(qemu, value.c_str(), sizeof(qemu));</span><br><span class="line">    &#125; else if (android::base::StartsWith(key, &quot;androidboot.&quot;)) &#123;</span><br><span class="line">        property_set(android::base::StringPrintf(&quot;ro.boot.%s&quot;, key.c_str() + 12).c_str(),</span><br><span class="line">                     value.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用export_kernel_boot_props设置boot相关的属性.即根据设置prop_map中src_prop设置dst_prop的值.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static void export_kernel_boot_props() &#123;</span><br><span class="line">    struct &#123;</span><br><span class="line">        const char *src_prop;</span><br><span class="line">        const char *dst_prop;</span><br><span class="line">        const char *default_value;</span><br><span class="line">    &#125; prop_map[] = &#123;</span><br><span class="line">        &#123; &quot;ro.boot.serialno&quot;,   &quot;ro.serialno&quot;,   &quot;&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.mode&quot;,       &quot;ro.bootmode&quot;,   &quot;unknown&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.baseband&quot;,   &quot;ro.baseband&quot;,   &quot;unknown&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.bootloader&quot;, &quot;ro.bootloader&quot;, &quot;unknown&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.hardware&quot;,   &quot;ro.hardware&quot;,   &quot;unknown&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.revision&quot;,   &quot;ro.revision&quot;,   &quot;0&quot;, &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    for (size_t i = 0; i &lt; ARRAY_SIZE(prop_map); i++) &#123;</span><br><span class="line">        std::string value = property_get(prop_map[i].src_prop);</span><br><span class="line">        property_set(prop_map[i].dst_prop, (!value.empty()) ? value.c_str() : prop_map[i].default_value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">selinux_initialize(is_first_stage);</span><br><span class="line"></span><br><span class="line">// If we&apos;re in the kernel domain, re-exec init to transition to the init domain now</span><br><span class="line">// that the SELinux policy has been loaded.</span><br><span class="line">if (is_first_stage) &#123;</span><br><span class="line">    if (restorecon(&quot;/init&quot;) == -1) &#123;</span><br><span class="line">        ERROR(&quot;restorecon failed: %s\n&quot;, strerror(errno));</span><br><span class="line">        security_failure();</span><br><span class="line">    &#125;</span><br><span class="line">    char* path = argv[0];</span><br><span class="line">    char* args[] = &#123; path, const_cast&lt;char*&gt;(&quot;--second-stage&quot;), nullptr &#125;;</span><br><span class="line">    if (execv(path, args) == -1) &#123;</span><br><span class="line">        ERROR(&quot;execv(\&quot;%s\&quot;) failed: %s\n&quot;, path, strerror(errno));</span><br><span class="line">        security_failure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// These directories were necessarily created before initial policy load</span><br><span class="line">// and therefore need their security context restored to the proper value.</span><br><span class="line">// This must happen before /dev is populated by ueventd.</span><br><span class="line">NOTICE(&quot;Running restorecon...\n&quot;);</span><br><span class="line">restorecon(&quot;/dev&quot;);</span><br><span class="line">restorecon(&quot;/dev/socket&quot;);</span><br><span class="line">restorecon(&quot;/dev/__properties__&quot;);</span><br><span class="line">restorecon(&quot;/property_contexts&quot;);</span><br><span class="line">restorecon_recursive(&quot;/sys&quot;);</span><br></pre></td></tr></table></figure>
<p>运行在kernel domain时,通过selinux_initialize对selinux进行初始化.</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">epoll_fd = epoll_create1(EPOLL_CLOEXEC);</span><br><span class="line">if (epoll_fd == -1) &#123;</span><br><span class="line">    ERROR(&quot;epoll_create1 failed: %s\n&quot;, strerror(errno));</span><br><span class="line">    exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal_handler_init();</span><br><span class="line"></span><br><span class="line">property_load_boot_defaults();</span><br><span class="line">export_oem_lock_status();</span><br><span class="line">start_property_service();</span><br></pre></td></tr></table></figure>
<ol>
<li>epoll_create1创建epoll事件</li>
<li>signal_handler_init();子进程信号处理,后面单独分析</li>
<li>初始化default属性并启动服务系统,后面单独分析</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">const BuiltinFunctionMap function_map;</span><br><span class="line">Action::set_function_map(&amp;function_map);</span><br><span class="line"></span><br><span class="line">Parser&amp; parser = Parser::GetInstance();</span><br><span class="line">parser.AddSectionParser(&quot;service&quot;,std::make_unique&lt;ServiceParser&gt;());</span><br><span class="line">parser.AddSectionParser(&quot;on&quot;, std::make_unique&lt;ActionParser&gt;());</span><br><span class="line">parser.AddSectionParser(&quot;import&quot;, std::make_unique&lt;ImportParser&gt;());</span><br><span class="line">parser.ParseConfig(&quot;/init.rc&quot;);</span><br><span class="line"></span><br><span class="line">ActionManager&amp; am = ActionManager::GetInstance();</span><br><span class="line"></span><br><span class="line">am.QueueEventTrigger(&quot;early-init&quot;);</span><br><span class="line"></span><br><span class="line">// Queue an action that waits for coldboot done so we know ueventd has set up all of /dev...</span><br><span class="line">am.QueueBuiltinAction(wait_for_coldboot_done_action, &quot;wait_for_coldboot_done&quot;);</span><br><span class="line">// ... so that we can start queuing up actions that require stuff from /dev.</span><br><span class="line">am.QueueBuiltinAction(mix_hwrng_into_linux_rng_action, &quot;mix_hwrng_into_linux_rng&quot;);</span><br><span class="line">am.QueueBuiltinAction(set_mmap_rnd_bits_action, &quot;set_mmap_rnd_bits&quot;);</span><br><span class="line">am.QueueBuiltinAction(keychord_init_action, &quot;keychord_init&quot;);</span><br><span class="line">am.QueueBuiltinAction(console_init_action, &quot;console_init&quot;);</span><br><span class="line"></span><br><span class="line">// Trigger all the boot actions to get us started.</span><br><span class="line">am.QueueEventTrigger(&quot;init&quot;);</span><br><span class="line"></span><br><span class="line">// Repeat mix_hwrng_into_linux_rng in case /dev/hw_random or /dev/random</span><br><span class="line">// wasn&apos;t ready immediately after wait_for_coldboot_done</span><br><span class="line">am.QueueBuiltinAction(mix_hwrng_into_linux_rng_action, &quot;mix_hwrng_into_linux_rng&quot;);</span><br><span class="line"></span><br><span class="line">// Don&apos;t mount filesystems or start core system services in charger mode.</span><br><span class="line">std::string bootmode = property_get(&quot;ro.bootmode&quot;);</span><br><span class="line">if (bootmode == &quot;charger&quot;) &#123;</span><br><span class="line">    am.QueueEventTrigger(&quot;charger&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    am.QueueEventTrigger(&quot;late-init&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Run all property triggers based on current state of the properties.</span><br><span class="line">am.QueueBuiltinAction(queue_property_triggers_action, &quot;queue_property_triggers&quot;);</span><br></pre></td></tr></table></figure>
<h1 id="init-rc脚本分析"><a href="#init-rc脚本分析" class="headerlink" title="init.rc脚本分析"></a>init.rc脚本分析</h1><h1 id="子进程信号处理"><a href="#子进程信号处理" class="headerlink" title="子进程信号处理"></a>子进程信号处理</h1><p>由于Init进程是系统的1号进程,其他用户进程都是由其直接或间接生成,所以init进程的作用之一就是子进程退出信号的处理.子进程exit退出时会向父进程发出SIGCHLD信号,父进程收到该信号就可以处理子进程的退出从而防止子进程变成僵尸进程.下面从signal_handler_init()分析Init对子进程退出的处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void signal_handler_init() &#123;</span><br><span class="line">    // Create a signalling mechanism for SIGCHLD.</span><br><span class="line">    int s[2];</span><br><span class="line">    if (socketpair(AF_UNIX, SOCK_STREAM | SOCK_NONBLOCK | SOCK_CLOEXEC, 0, s) == -1) &#123;</span><br><span class="line">        ERROR(&quot;socketpair failed: %s\n&quot;, strerror(errno));</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signal_write_fd = s[0];</span><br><span class="line">    signal_read_fd = s[1];</span><br><span class="line"></span><br><span class="line">    // Write to signal_write_fd if we catch SIGCHLD.</span><br><span class="line">    struct sigaction act;</span><br><span class="line">    memset(&amp;act, 0, sizeof(act));</span><br><span class="line">    act.sa_handler = SIGCHLD_handler;</span><br><span class="line">    act.sa_flags = SA_NOCLDSTOP;</span><br><span class="line">    sigaction(SIGCHLD, &amp;act, 0);</span><br><span class="line"></span><br><span class="line">    ServiceManager::GetInstance().ReapAnyOutstandingChildren();</span><br><span class="line"></span><br><span class="line">    register_epoll_handler(signal_read_fd, handle_signal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>为了同时能同时处理多个信号,通过socket来通信,socketpair创建一对已连接的本地socket</li>
<li><p>利用sigaction注册SIGCHLD信号的处理函数SIGCHLD_handler(SA_NOCLDSTOP标志只有当子进程结束才接收SIGCHLD信号),即收到SIGCHLD信号后往signal_write_fd中写入”1”,触发signal_read_fd上的epoll事件处理handle_signal</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static void SIGCHLD_handler(int) &#123;</span><br><span class="line">    if (TEMP_FAILURE_RETRY(write(signal_write_fd, &quot;1&quot;, 1)) == -1) &#123;</span><br><span class="line">        ERROR(&quot;write(signal_write_fd) failed: %s\n&quot;, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ReapAnyOutstandingChildren()处理子进程的退出,下面具体分析</p>
</li>
<li>register_epoll_handler注册signal_read_fd的epoll事件处理函数handle_signal<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static void handle_signal() &#123;</span><br><span class="line">    // Clear outstanding requests.</span><br><span class="line">    char buf[32];</span><br><span class="line">    read(signal_read_fd, buf, sizeof(buf));</span><br><span class="line"></span><br><span class="line">    ServiceManager::GetInstance().ReapAnyOutstandingChildren();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>handle_signal最后也通过ServiceManager的ReapAnyOutstandingChildren()来处理子进程的退出.下面具体分析ReapAnyOutstandingChildren中的处理</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">void ServiceManager::ReapAnyOutstandingChildren() &#123;</span><br><span class="line">    while (ReapOneProcess()) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bool ServiceManager::ReapOneProcess() &#123;</span><br><span class="line">    int status;</span><br><span class="line">    pid_t pid = TEMP_FAILURE_RETRY(waitpid(-1, &amp;status, WNOHANG));</span><br><span class="line">    if (pid == 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; else if (pid == -1) &#123;</span><br><span class="line">        ERROR(&quot;waitpid failed: %s\n&quot;, strerror(errno));</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Service* svc = FindServiceByPid(pid);</span><br><span class="line"></span><br><span class="line">    std::string name;</span><br><span class="line">    if (svc) &#123;</span><br><span class="line">        name = android::base::StringPrintf(&quot;Service &apos;%s&apos; (pid %d)&quot;,</span><br><span class="line">                                           svc-&gt;name().c_str(), pid);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        name = android::base::StringPrintf(&quot;Untracked pid %d&quot;, pid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (WIFEXITED(status)) &#123;</span><br><span class="line">        NOTICE(&quot;%s exited with status %d\n&quot;, name.c_str(), WEXITSTATUS(status));</span><br><span class="line">    &#125; else if (WIFSIGNALED(status)) &#123;</span><br><span class="line">        NOTICE(&quot;%s killed by signal %d\n&quot;, name.c_str(), WTERMSIG(status));</span><br><span class="line">    &#125; else if (WIFSTOPPED(status)) &#123;</span><br><span class="line">        NOTICE(&quot;%s stopped by signal %d\n&quot;, name.c_str(), WSTOPSIG(status));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        NOTICE(&quot;%s state changed&quot;, name.c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!svc) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (svc-&gt;Reap()) &#123;</span><br><span class="line">        waiting_for_exec = false;</span><br><span class="line">        RemoveService(*svc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>while循环中调用ReapOneProcess处理</li>
<li>调用waitpid()等待死亡子进程退出结束(WNOHANG标志没有子进程死亡立即返回)</li>
<li>对于一般子进程,waitpid后init的处理结束.如果死亡的子进程是服务进程的话,那么会通过svc-&gt;Reap()对其进一步处理</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">bool Service::Reap() &#123;</span><br><span class="line">   if (!(flags_ &amp; SVC_ONESHOT) || (flags_ &amp; SVC_RESTART)) &#123;</span><br><span class="line">       NOTICE(&quot;Service &apos;%s&apos; (pid %d) killing any children in process group\n&quot;,</span><br><span class="line">              name_.c_str(), pid_);</span><br><span class="line">        kill(-pid_, SIGKILL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Remove any sockets we may have created.</span><br><span class="line">    for (const auto&amp; si : sockets_) &#123;</span><br><span class="line">        std::string tmp = StringPrintf(ANDROID_SOCKET_DIR &quot;/%s&quot;, si.name.c_str());</span><br><span class="line">        unlink(tmp.c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (flags_ &amp; SVC_EXEC) &#123;</span><br><span class="line">        INFO(&quot;SVC_EXEC pid %d finished...\n&quot;, pid_);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pid_ = 0;</span><br><span class="line">    flags_ &amp;= (~SVC_RUNNING);</span><br><span class="line"></span><br><span class="line">    // Oneshot processes go into the disabled state on exit,</span><br><span class="line">    // except when manually restarted.</span><br><span class="line">    if ((flags_ &amp; SVC_ONESHOT) &amp;&amp; !(flags_ &amp; SVC_RESTART)) &#123;</span><br><span class="line">        flags_ |= SVC_DISABLED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Disabled and reset processes do not get restarted automatically.</span><br><span class="line">    if (flags_ &amp; (SVC_DISABLED | SVC_RESET))  &#123;</span><br><span class="line">        NotifyStateChange(&quot;stopped&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time_t now = gettime();</span><br><span class="line">    if ((flags_ &amp; SVC_CRITICAL) &amp;&amp; !(flags_ &amp; SVC_RESTART)) &#123;</span><br><span class="line">        if (time_crashed_ + CRITICAL_CRASH_WINDOW &gt;= now) &#123;</span><br><span class="line">            if (++nr_crashed_ &gt; CRITICAL_CRASH_THRESHOLD) &#123;</span><br><span class="line">                ERROR(&quot;critical process &apos;%s&apos; exited %d times in %d minutes; &quot;</span><br><span class="line">                      &quot;rebooting into recovery mode\n&quot;, name_.c_str(),</span><br><span class="line">                      CRITICAL_CRASH_THRESHOLD, CRITICAL_CRASH_WINDOW / 60);</span><br><span class="line">                android_reboot(ANDROID_RB_RESTART2, 0, &quot;recovery&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            time_crashed_ = now;</span><br><span class="line">            nr_crashed_ = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flags_ &amp;= (~SVC_RESTART);</span><br><span class="line">    flags_ |= SVC_RESTARTING;</span><br><span class="line"></span><br><span class="line">    // Execute all onrestart commands for this service.</span><br><span class="line">    onrestart_.ExecuteAllCommands();</span><br><span class="line"></span><br><span class="line">    NotifyStateChange(&quot;restarting&quot;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reap()中主要是对service进程flag进行分析,来判断是否需要重启该service进程,定义了SVC_ONESHOT或SVC_RESET的服务进程不需要重启,状态被改变成stopped.定义了SVC_CRITICAL与SVC_RESTART的关键服务如果重启超过4次,系统将reboot到recovery.服务进程在重启前将移除其创建的socket(/dev/socket/),杀死其所有子进程,并通过NotifyStateChange改变其状态为restarting(即设置init.svc.属性状态),并执行initrc中该服务定义的onrestart命令.</p>
<h1 id="属性服务"><a href="#属性服务" class="headerlink" title="属性服务"></a>属性服务</h1><p>Android的属性值以字符串形式保存的系统的关键值(可通过adb shell getprop打印所有的prop),Android系统模块/应用很多功能都是通过属性来控制,非常关键,属性服务都是放在Init进程处理的.<br>下面从void property_init开始分析属性服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void property_init() &#123;</span><br><span class="line">    if (__system_property_area_init()) &#123;</span><br><span class="line">        ERROR(&quot;Failed to initialize property area\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>property_init主要是分配一块共享的内存区域(/dev/<strong>properties</strong>)存储属性值 //TODO</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bionic/libc/include/sys/_system_properties.h:90:#define PROP_PATH_RAMDISK_DEFAULT  &quot;/default.prop&quot;</span><br><span class="line"></span><br><span class="line">property_load_boot_defaults();</span><br></pre></td></tr></table></figure>
<p>读取/default.prop文件,初始化属性系统值,接下来start_property_service()启动属性服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void start_property_service() &#123;</span><br><span class="line">    property_set_fd = create_socket(PROP_SERVICE_NAME, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK,</span><br><span class="line">                                    0666, 0, 0, NULL);</span><br><span class="line">    if (property_set_fd == -1) &#123;</span><br><span class="line">        ERROR(&quot;start_property_service socket creation failed: %s\n&quot;, strerror(errno));</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen(property_set_fd, 8);</span><br><span class="line"></span><br><span class="line">    register_epoll_handler(property_set_fd, handle_property_set_fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>start_property_service中创建并监听等待服务的socket.并加入到epoll中,最终属性设置请求将在handle_property_set_fd中来处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">static void handle_property_set_fd()</span><br><span class="line">&#123;</span><br><span class="line">    prop_msg msg;</span><br><span class="line">    int s;</span><br><span class="line">    int r;</span><br><span class="line">    struct ucred cr;</span><br><span class="line">    struct sockaddr_un addr;</span><br><span class="line">    socklen_t addr_size = sizeof(addr);</span><br><span class="line">    socklen_t cr_size = sizeof(cr);</span><br><span class="line">    char * source_ctx = NULL;</span><br><span class="line">    struct pollfd ufds[1];</span><br><span class="line">    const int timeout_ms = 2 * 1000;  /* Default 2 sec timeout for caller to send property. */</span><br><span class="line">    int nr;</span><br><span class="line"></span><br><span class="line">    if ((s = accept(property_set_fd, (struct sockaddr *) &amp;addr, &amp;addr_size)) &lt; 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Check socket options here */</span><br><span class="line">    if (getsockopt(s, SOL_SOCKET, SO_PEERCRED, &amp;cr, &amp;cr_size) &lt; 0) &#123;</span><br><span class="line">        close(s);</span><br><span class="line">        ERROR(&quot;Unable to receive socket options\n&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ufds[0].fd = s;</span><br><span class="line">    ufds[0].events = POLLIN;</span><br><span class="line">    ufds[0].revents = 0;</span><br><span class="line">    nr = TEMP_FAILURE_RETRY(poll(ufds, 1, timeout_ms));</span><br><span class="line">    if (nr == 0) &#123;</span><br><span class="line">        ERROR(&quot;sys_prop: timeout waiting for uid=%d to send property message.\n&quot;, cr.uid);</span><br><span class="line">        close(s);</span><br><span class="line">        return;</span><br><span class="line">    &#125; else if (nr &lt; 0) &#123;</span><br><span class="line">        ERROR(&quot;sys_prop: error waiting for uid=%d to send property message: %s\n&quot;, cr.uid, strerror(errno));</span><br><span class="line">        close(s);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = TEMP_FAILURE_RETRY(recv(s, &amp;msg, sizeof(msg), MSG_DONTWAIT));</span><br><span class="line">    if(r != sizeof(prop_msg)) &#123;</span><br><span class="line">        ERROR(&quot;sys_prop: mis-match msg size received: %d expected: %zu: %s\n&quot;,</span><br><span class="line">              r, sizeof(prop_msg), strerror(errno));</span><br><span class="line">        close(s);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch(msg.cmd) &#123;</span><br><span class="line">    case PROP_MSG_SETPROP:</span><br><span class="line">        msg.name[PROP_NAME_MAX-1] = 0;</span><br><span class="line">        msg.value[PROP_VALUE_MAX-1] = 0;</span><br><span class="line"></span><br><span class="line">        if (!is_legal_property_name(msg.name, strlen(msg.name))) &#123;</span><br><span class="line">            ERROR(&quot;sys_prop: illegal property name. Got: \&quot;%s\&quot;\n&quot;, msg.name);</span><br><span class="line">            close(s);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        getpeercon(s, &amp;source_ctx);</span><br><span class="line"></span><br><span class="line">        if(memcmp(msg.name,&quot;ctl.&quot;,4) == 0) &#123;</span><br><span class="line">            // Keep the old close-socket-early behavior when handling</span><br><span class="line">            // ctl.* properties.</span><br><span class="line">            close(s);</span><br><span class="line">            if (check_control_mac_perms(msg.value, source_ctx, &amp;cr)) &#123;</span><br><span class="line">                handle_control_message((char*) msg.name + 4, (char*) msg.value);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ERROR(&quot;sys_prop: Unable to %s service ctl [%s] uid:%d gid:%d pid:%d\n&quot;,</span><br><span class="line">                        msg.name + 4, msg.value, cr.uid, cr.gid, cr.pid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (check_mac_perms(msg.name, source_ctx, &amp;cr)) &#123;</span><br><span class="line">                property_set((char*) msg.name, (char*) msg.value);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ERROR(&quot;sys_prop: permission denied uid:%d  name:%s\n&quot;,</span><br><span class="line">                      cr.uid, msg.name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Note: bionic&apos;s property client code assumes that the</span><br><span class="line">            // property server will not close the socket until *AFTER*</span><br><span class="line">            // the property is written to memory.</span><br><span class="line">            close(s);</span><br><span class="line">        &#125;</span><br><span class="line">        freecon(source_ctx);</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        close(s);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Init.rc语法]]></title>
      <url>http://hesstudio.cn/2016/08/20/android-init-language/</url>
      <content type="html"><![CDATA[<blockquote>
<p>译自system/core/init/readme.txt</p>
</blockquote>
<h1 id="Android-init-rc语法"><a href="#Android-init-rc语法" class="headerlink" title="Android init.rc语法"></a>Android init.rc语法</h1><p>Android init.rc包含四种类型的声明，分别是<strong>Actions</strong>，<strong>Commands</strong>，<strong>Services</strong>，和<strong>Options</strong>。<br>其语法规则如下：</p>
<ul>
<li><p>init.rc所有的语句都是以行为单位，行间使用空格分隔符号，类似C语言，使用”\”续行，并且以”#”开头进行行注释。</p>
</li>
<li><p>Actions和Services默认声明了一个新的section，所有该section下的command与options都属于它，在section前申明的command和options将会被其忽略。</p>
</li>
<li><p>Actions与Services的命名是唯一的,后面的重复定义被视为无效。</p>
</li>
</ul>
<h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>Action由一系列命令组成,通过trigger来决定什么时候执行,”on”后面跟的字符串即为ation的trigger.当trigger事件发生时，如果action不在to-be-executed中，将被加入到to-be-executed的队尾等待执行。</p>
<p>在to-be-executed队列中的每个action按FIFO顺序执行，同样action中的command也是按定义的先后顺序依次执行。init除了执行action的command，还负责设备节点的创建及销毁，属性设置，进程重启等工作。</p>
<p>Actions的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on &lt;trigger&gt;</span><br><span class="line">   &lt;command&gt;</span><br><span class="line">   &lt;command&gt;</span><br><span class="line">   &lt;command&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><p>Services由init启动并且可以在退出时重启(可选)，Services的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*</span><br><span class="line">   &lt;option&gt;</span><br><span class="line">   &lt;option&gt;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>Options用来描述Services，它决定service的执行行为.</p>
<ul>
<li>critical<br>表示关键的service，如果service4分钟内异常退出4次将会重启进入recovery模式。</li>
<li>disabled<br>指定disable的service，不会随class service启动，只有通过<code>start service_name</code>启动时才能启动</li>
<li>setenv &lt;&lt;name&gt; &lt;value&gt;<br>service启动时设置环境变量值</li>
<li>socket &lt;name&gt; &lt;type&gt; &lt;perm&gt; [ &lt;user&gt; [ &lt;group&gt; [ &lt;seclabel&gt; ] ] ]<br>为要启动的进程创建名为/dev/socket/&lt;name&gt;的socket,&lt;type&gt;可选”dgram”或”stream”,&lt;user&gt; [ &lt;group&gt;默认为0.</li>
<li>user &lt;username&gt;<br>在service启动时为其设置user，默认为root</li>
<li>group &lt;groupname&gt; [ &lt;groupname&gt; ]*<br>在service启动时为其设置group，默认为root</li>
<li>seclabel &lt;seclabel&gt;<br>SELinux security context</li>
<li>oneshot<br>定义oneshot的service，退出后不再重启</li>
<li>class &lt;name&gt;<br>为服务指定所属class，属于同一class的服务可以同时启动或停止.默认为default</li>
<li>onrestart<br>服务重启时,执行一条命令</li>
</ul>
<h2 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h2><p>Triggers是on后面的字符串，匹配某类事件的发生来执行action。</p>
<ul>
<li><p>boot<br>init执行后触发的第一个trigger.</p>
</li>
<li><p>&lt;name&gt;=&lt;value&gt;<br>设置属性值时触发Trigger</p>
</li>
</ul>
<h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><p>Commands即Action或services onrestart中所执行的命令,</p>
<ul>
<li><p>bootchart_init<br> 启动bootcharting</p>
</li>
<li><p>chmod &lt;octal-mode&gt; &lt;path&gt;<br>chmod权限</p>
</li>
<li><p>chown &lt;owner&gt; &lt;group&gt; &lt;path&gt;<br> chown用户/组</p>
</li>
<li><p>class_start &lt;serviceclass&gt;<br>启动serviceclass下所有未启动的服务服务,disable的除外</p>
</li>
<li><p>class_stop &lt;serviceclass&gt;<br>停止serviceclass下所有已启动的服务服务,disable的除外</p>
</li>
<li><p>class_reset &lt;serviceclass&gt;<br> Stop all services of the specified class if they are<br> currently running, without disabling them. They can be restarted<br> later using class_start.</p>
</li>
<li><p>copy &lt;src&gt; &lt;dst&gt;<br> copy操作</p>
</li>
<li><p>domainname &lt;name&gt;<br> 设置domain name.</p>
</li>
<li><p>enable &lt;servicename&gt;<br>enable服务，该服务可以随class service启动或停止</p>
</li>
<li><p>exec [ &lt;seclabel&gt; [&lt;user&gt; [ &lt;group&gt; ]<em> ] ] – &lt;command&gt; [ &lt;argument&gt; ]</em><br>fork并执行command，将阻塞init直到执行完毕</p>
</li>
<li><p>export &lt;name&gt; &lt;value&gt;<br>export环境变量值</p>
</li>
<li><p>hostname &lt;name&gt;<br> 设置hostname.</p>
</li>
<li><p>ifup &lt;interface&gt;<br>启用网络接口</p>
</li>
<li><p>import &lt;filename&gt;<br>import其他initrc文件</p>
</li>
<li><p>insmod &lt;path&gt;<br>加载指定驱动模块</p>
</li>
<li><p>load_all_props<br> Loads properties from /system, /vendor, et cetera.<br> This is included in the default init.rc.</p>
</li>
<li><p>load_persist_props<br> Loads persistent properties when /data has been decrypted.<br> This is included in the default init.rc.</p>
</li>
<li><p>loglevel &lt;level&gt;<br>设置log级别</p>
</li>
<li><p>mkdir &lt;path&gt; [mode] [owner] [group]<br>创建dir</p>
</li>
<li><p>mount_all &lt;fstab&gt;<br>mount所有fstab.</p>
</li>
<li><p>mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [ &lt;flag&gt; ]* [&lt;options&gt;]<br>mount文件系统到执行目录</p>
</li>
<li><p>powerctl<br> Internal implementation detail used to respond to changes to the<br> “sys.powerctl” system property, used to implement rebooting.</p>
</li>
<li><p>restart &lt;service&gt;<br>restart服务</p>
</li>
<li><p>restorecon &lt;path&gt; [ &lt;path&gt; ]*<br>重新存储&lt;path&gt;到由file_contexts配置的安全上下文.</p>
</li>
<li><p>restorecon_recursive &lt;path&gt; [ &lt;path&gt; ]*<br> Recursively restore the directory tree named by &lt;path&gt; to the<br> security contexts specified in the file_contexts configuration.</p>
</li>
<li><p>rm &lt;path&gt;<br>rm文件</p>
</li>
<li><p>rmdir &lt;path&gt;<br>rmdir</p>
</li>
<li><p>setprop &lt;name&gt; &lt;value&gt;<br>设置属性</p>
</li>
<li><p>setrlimit &lt;resource&gt; &lt;cur&gt; &lt;max&gt;<br>设置进程占用的资源大小，包括可打开文件数目，大小</p>
</li>
<li><p>start &lt;service&gt;<br> 启动服务</p>
</li>
<li><p>stop &lt;service&gt;<br>停止服务</p>
</li>
<li><p>swapon_all &lt;fstab&gt;<br> Calls fs_mgr_swapon_all on the given fstab file.</p>
</li>
<li><p>symlink &lt;target&gt; &lt;path&gt;<br>创建连接到target的path符号链接</p>
</li>
<li><p>sysclktz &lt;mins_west_of_gmt&gt;<br> Set the system clock base (0 if system clock ticks in GMT)</p>
</li>
<li><p>trigger &lt;event&gt;<br>trigger的事件</p>
</li>
<li><p>verity_load_state<br> Internal implementation detail used to load dm-verity state.</p>
</li>
<li><p>verity_update_state &lt;mount_point&gt;<br> Internal implementation detail used to update dm-verity state and<br> set the partition.&lt;mount_point&gt;.verified properties used by adb remount<br> because fs_mgr can’t set them directly itself.</p>
</li>
<li><p>wait &lt;path&gt; [ &lt;timeout&gt; ]<br> Poll文件，默认timeout为5s</p>
</li>
<li><p>write &lt;path&gt; &lt;content&gt;<br>打开指定文件并写入字符串</p>
</li>
</ul>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>Init进程运行过程中,以下的属性值会随时更新(可通过adb shell getprop查看)：</p>
<ul>
<li><p>init.action<br>当前执行的action</p>
</li>
<li><p>init.command<br>将被执行的命令</p>
</li>
<li><p>init.svc.&lt;name&gt;<br>服务的运行状态(“stopped”, “running”, “restarting”)</p>
</li>
</ul>
<hr>
<h1 id="Android-Init-Language"><a href="#Android-Init-Language" class="headerlink" title="Android Init Language"></a>Android Init Language</h1><p>The Android Init Language consists of four broad classes of statements,<br>which are Actions, Commands, Services, and Options.</p>
<p>All of these are line-oriented, consisting of tokens separated by<br>whitespace.  The c-style backslash escapes may be used to insert<br>whitespace into a token.  Double quotes may also be used to prevent<br>whitespace from breaking text into multiple tokens.  The backslash,<br>when it is the last character on a line, may be used for line-folding.</p>
<p>Lines which start with a # (leading whitespace allowed) are comments.</p>
<p>Actions and Services implicitly declare a new section.  All commands<br>or options belong to the section most recently declared.  Commands<br>or options before the first section are ignored.</p>
<p>Actions and Services have unique names.  If a second Action or Service<br>is declared with the same name as an existing one, it is ignored as<br>an error.  (??? should we override instead)</p>
<h2 id="Actions-1"><a href="#Actions-1" class="headerlink" title="Actions"></a>Actions</h2><p>Actions are named sequences of commands.  Actions have a trigger which<br>is used to determine when the action should occur.  When an event<br>occurs which matches an action’s trigger, that action is added to<br>the tail of a to-be-executed queue (unless it is already on the<br>queue).</p>
<p>Each action in the queue is dequeued in sequence and each command in<br>that action is executed in sequence.  Init handles other activities<br>(device creation/destruction, property setting, process restarting)<br>“between” the execution of the commands in activities.</p>
<p>Actions take the form of:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on &lt;trigger&gt;</span><br><span class="line">   &lt;command&gt;</span><br><span class="line">   &lt;command&gt;</span><br><span class="line">   &lt;command&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Services-1"><a href="#Services-1" class="headerlink" title="Services"></a>Services</h2><p>Services are programs which init launches and (optionally) restarts<br>when they exit.  Services take the form of:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*</span><br><span class="line">   &lt;option&gt;</span><br><span class="line">   &lt;option&gt;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p>
<h2 id="Options-1"><a href="#Options-1" class="headerlink" title="Options"></a>Options</h2><p>Options are modifiers to services.  They affect how and when init<br>runs the service.</p>
<p>critical<br>  This is a device-critical service. If it exits more than four times in<br>  four minutes, the device will reboot into recovery mode.</p>
<p>disabled<br>  This service will not automatically start with its class.<br>  It must be explicitly started by name.</p>
<p>setenv &lt;name&gt; &lt;value&gt;<br>  Set the environment variable &lt;name&gt; to &lt;value&gt; in the launched process.</p>
<p>socket &lt;name&gt; &lt;type&gt; &lt;perm&gt; [ &lt;user&gt; [ &lt;group&gt; [ &lt;seclabel&gt; ] ] ]<br>  Create a unix domain socket named /dev/socket/&lt;name&gt; and pass<br>  its fd to the launched process.  &lt;type&gt; must be “dgram”, “stream” or “seqpacket”.<br>  User and group default to 0.<br>  ‘seclabel’ is the SELinux security context for the socket.<br>  It defaults to the service security context, as specified by seclabel or<br>  computed based on the service executable file security context.</p>
<p>user &lt;username&gt;<br>  Change to username before exec’ing this service.<br>  Currently defaults to root.  (??? probably should default to nobody)<br>  Currently, if your process requires linux capabilities then you cannot use<br>  this command. You must instead request the capabilities in-process while<br>  still root, and then drop to your desired uid.</p>
<p>group &lt;groupname&gt; [ &lt;groupname&gt; ]*<br>  Change to groupname before exec’ing this service.  Additional<br>  groupnames beyond the (required) first one are used to set the<br>  supplemental groups of the process (via setgroups()).<br>  Currently defaults to root.  (??? probably should default to nobody)</p>
<p>seclabel &lt;seclabel&gt;<br>  Change to ‘seclabel’ before exec’ing this service.<br>  Primarily for use by services run from the rootfs, e.g. ueventd, adbd.<br>  Services on the system partition can instead use policy-defined transitions<br>  based on their file security context.<br>  If not specified and no transition is defined in policy, defaults to the init context.</p>
<p>oneshot<br>  Do not restart the service when it exits.</p>
<p>class &lt;name&gt;<br>  Specify a class name for the service.  All services in a<br>  named class may be started or stopped together.  A service<br>  is in the class “default” if one is not specified via the<br>  class option.</p>
<p>onrestart<br>  Execute a Command (see below) when service restarts.</p>
<p>writepid &lt;file…&gt;<br>  Write the child’s pid to the given files when it forks. Meant for<br>  cgroup/cpuset usage.</p>
<h2 id="Triggers-1"><a href="#Triggers-1" class="headerlink" title="Triggers"></a>Triggers</h2><p>Triggers are strings which can be used to match certain kinds<br>of events and used to cause an action to occur.</p>
<p>boot<br>   This is the first trigger that will occur when init starts<br>   (after /init.conf is loaded)</p>
<p>&lt;name&gt;=&lt;value&gt;<br>   Triggers of this form occur when the property &lt;name&gt; is set<br>   to the specific value &lt;value&gt;.</p>
<p>   One can also test multiple properties to execute a group<br>   of commands. For example:</p>
<p>   on property:test.a=1 &amp;&amp; property:test.b=1<br>       setprop test.c 1</p>
<p>   The above stub sets test.c to 1 only when<br>   both test.a=1 and test.b=1</p>
<h2 id="Commands-1"><a href="#Commands-1" class="headerlink" title="Commands"></a>Commands</h2><p>bootchart_init<br>   Start bootcharting if configured (see below).<br>   This is included in the default init.rc.</p>
<p>chmod &lt;octal-mode&gt; &lt;path&gt;<br>   Change file access permissions.</p>
<p>chown &lt;owner&gt; &lt;group&gt; &lt;path&gt;<br>   Change file owner and group.</p>
<p>class_start &lt;serviceclass&gt;<br>   Start all services of the specified class if they are<br>   not already running.</p>
<p>class_stop &lt;serviceclass&gt;<br>   Stop and disable all services of the specified class if they are<br>   currently running.</p>
<p>class_reset &lt;serviceclass&gt;<br>   Stop all services of the specified class if they are<br>   currently running, without disabling them. They can be restarted<br>   later using class_start.</p>
<p>copy &lt;src&gt; &lt;dst&gt;<br>   Copies a file. Similar to write, but useful for binary/large<br>   amounts of data.</p>
<p>domainname &lt;name&gt;<br>   Set the domain name.</p>
<p>enable &lt;servicename&gt;<br>   Turns a disabled service into an enabled one as if the service did not<br>   specify disabled.<br>   If the service is supposed to be running, it will be started now.<br>   Typically used when the bootloader sets a variable that indicates a specific<br>   service should be started when needed. E.g.<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on property:ro.boot.myfancyhardware=1</span><br><span class="line">  enable my_fancy_service_for_my_fancy_hardware</span><br></pre></td></tr></table></figure></p>
<p>exec [ &lt;seclabel&gt; [ &lt;user&gt; [ &lt;group&gt; ]<em> ] ] – &lt;command&gt; [ &lt;argument&gt; ]</em><br>   Fork and execute command with the given arguments. The command starts<br>   after “–” so that an optional security context, user, and supplementary<br>   groups can be provided. No other commands will be run until this one<br>   finishes. &lt;seclabel&gt; can be a - to denote default.</p>
<p>export &lt;name&gt; &lt;value&gt;<br>   Set the environment variable &lt;name&gt; equal to &lt;value&gt; in the<br>   global environment (which will be inherited by all processes<br>   started after this command is executed)</p>
<p>hostname &lt;name&gt;<br>   Set the host name.</p>
<p>ifup &lt;interface&gt;<br>   Bring the network interface &lt;interface&gt; online.</p>
<p>import &lt;filename&gt;<br>   Parse an init config file, extending the current configuration.</p>
<p>insmod &lt;path&gt;<br>   Install the module at &lt;path&gt;</p>
<p>load_all_props<br>   Loads properties from /system, /vendor, et cetera.<br>   This is included in the default init.rc.</p>
<p>load_persist_props<br>   Loads persistent properties when /data has been decrypted.<br>   This is included in the default init.rc.</p>
<p>loglevel &lt;level&gt;<br>   Sets the kernel log level to level. Properties are expanded within &lt;level&gt;.</p>
<p>mkdir &lt;path&gt; [mode] [owner] [group]<br>   Create a directory at &lt;path&gt;, optionally with the given mode, owner, and<br>   group. If not provided, the directory is created with permissions 755 and<br>   owned by the root user and root group. If provided, the mode, owner and group<br>   will be updated if the directory exists already.</p>
<p>mount_all &lt;fstab&gt;<br>   Calls fs_mgr_mount_all on the given fs_mgr-format fstab.</p>
<p>mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [ &lt;flag&gt; ]* [&lt;options&gt;]<br>   Attempt to mount the named device at the directory &lt;dir&gt;<br>   &lt;device&gt; may be of the form mtd@name to specify a mtd block<br>   device by name.<br>   &lt;flag&gt;s include “ro”, “rw”, “remount”, “noatime”, …<br>   &lt;options&gt; include “barrier=1”, “noauto_da_alloc”, “discard”, … as<br>   a comma separated string, eg: barrier=1,noauto_da_alloc</p>
<p>powerctl<br>   Internal implementation detail used to respond to changes to the<br>   “sys.powerctl” system property, used to implement rebooting.</p>
<p>restart &lt;service&gt;<br>   Like stop, but doesn’t disable the service.</p>
<p>restorecon &lt;path&gt; [ &lt;path&gt; ]*<br>   Restore the file named by &lt;path&gt; to the security context specified<br>   in the file_contexts configuration.<br>   Not required for directories created by the init.rc as these are<br>   automatically labeled correctly by init.</p>
<p>restorecon_recursive &lt;path&gt; [ &lt;path&gt; ]*<br>   Recursively restore the directory tree named by &lt;path&gt; to the<br>   security contexts specified in the file_contexts configuration.</p>
<p>rm &lt;path&gt;<br>   Calls unlink(2) on the given path. You might want to<br>   use “exec – rm …” instead (provided the system partition is<br>   already mounted).</p>
<p>rmdir &lt;path&gt;<br>   Calls rmdir(2) on the given path.</p>
<p>setprop &lt;name&gt; &lt;value&gt;<br>   Set system property &lt;name&gt; to &lt;value&gt;. Properties are expanded<br>   within &lt;value&gt;.</p>
<p>setrlimit &lt;resource&gt; &lt;cur&gt; &lt;max&gt;<br>   Set the rlimit for a resource.</p>
<p>start &lt;service&gt;<br>   Start a service running if it is not already running.</p>
<p>stop &lt;service&gt;<br>   Stop a service from running if it is currently running.</p>
<p>swapon_all &lt;fstab&gt;<br>   Calls fs_mgr_swapon_all on the given fstab file.</p>
<p>symlink &lt;target&gt; &lt;path&gt;<br>   Create a symbolic link at &lt;path&gt; with the value &lt;target&gt;</p>
<p>sysclktz &lt;mins_west_of_gmt&gt;<br>   Set the system clock base (0 if system clock ticks in GMT)</p>
<p>trigger &lt;event&gt;<br>   Trigger an event.  Used to queue an action from another<br>   action.</p>
<p>verity_load_state<br>   Internal implementation detail used to load dm-verity state.</p>
<p>verity_update_state &lt;mount_point&gt;<br>   Internal implementation detail used to update dm-verity state and<br>   set the partition.&lt;mount_point&gt;.verified properties used by adb remount<br>   because fs_mgr can’t set them directly itself.</p>
<p>wait &lt;path&gt; [ &lt;timeout&gt; ]<br>   Poll for the existence of the given file and return when found,<br>   or the timeout has been reached. If timeout is not specified it<br>   currently defaults to five seconds.</p>
<p>write &lt;path&gt; &lt;content&gt;<br>   Open the file at &lt;path&gt; and write a string to it with write(2).<br>   If the file does not exist, it will be created. If it does exist,<br>   it will be truncated. Properties are expanded within &lt;content&gt;.</p>
<h2 id="Properties-1"><a href="#Properties-1" class="headerlink" title="Properties"></a>Properties</h2><p>Init updates some system properties to provide some insight into<br>what it’s doing:</p>
<p>init.action<br>   Equal to the name of the action currently being executed or “” if none</p>
<p>init.command<br>   Equal to the command being executed or “” if none.</p>
<p>init.svc.&lt;name&gt;<br>   State of a named service (“stopped”, “running”, “restarting”)</p>
<h2 id="Bootcharting"><a href="#Bootcharting" class="headerlink" title="Bootcharting"></a>Bootcharting</h2><p>This version of init contains code to perform “bootcharting”: generating log<br>files that can be later processed by the tools provided by www.bootchart.org.</p>
<p>On the emulator, use the -bootchart &lt;timeout&gt; option to boot with bootcharting<br>activated for &lt;timeout&gt; seconds.</p>
<p>On a device, create /data/bootchart/start with a command like the following:</p>
<p>  adb shell ‘echo $TIMEOUT &gt; /data/bootchart/start’</p>
<p>Where the value of $TIMEOUT corresponds to the desired bootcharted period in<br>seconds. Bootcharting will stop after that many seconds have elapsed.<br>You can also stop the bootcharting at any moment by doing the following:</p>
<p>  adb shell ‘echo 1 &gt; /data/bootchart/stop’</p>
<p>Note that /data/bootchart/stop is deleted automatically by init at the end of<br>the bootcharting. This is not the case with /data/bootchart/start, so don’t<br>forget to delete it when you’re done collecting data.</p>
<p>The log files are written to /data/bootchart/. A script is provided to<br>retrieve them and create a bootchart.tgz file that can be used with the<br>bootchart command-line utility:</p>
<p>  sudo apt-get install pybootchartgui<br>  <code># grab-bootchart.sh uses $ANDROID_SERIAL.</code><br>  $ANDROID_BUILD_TOP/system/core/init/grab-bootchart.sh</p>
<p>One thing to watch for is that the bootchart will show init as if it started<br>running at 0s. You’ll have to look at dmesg to work out when the kernel<br>actually started init.</p>
<h2 id="Debugging-init"><a href="#Debugging-init" class="headerlink" title="Debugging init"></a>Debugging init</h2><p>By default, programs executed by init will drop stdout and stderr into<br>/dev/null. To help with debugging, you can execute your program via the<br>Android program logwrapper. This will redirect stdout/stderr into the<br>Android logging system (accessed via logcat).</p>
<p>For example<br>service akmd /system/bin/logwrapper /sbin/akmd</p>
<p>For quicker turnaround when working on init itself, use:</p>
<p>  mm -j<br>  m ramdisk-nodeps<br>  m bootimage-nodeps<br>  adb reboot bootloader<br>  fastboot boot $ANDROID_PRODUCT_OUT/boot.img</p>
<p>Alternatively, use the emulator:</p>
<p>  emulator -partition-size 1024 -verbose -show-kernel -no-window</p>
<p>You might want to call klog_set_level(6) after the klog_init() call<br>so you see the kernel logging in dmesg (or the emulator output).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下使用rsync进行数据同步备份]]></title>
      <url>http://hesstudio.cn/2016/08/19/ubuntu-rsync/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>rsync是remote sync的简称,它是一款类unix系统下数据同步备份,增量文件快速传输的工具.rsync采用”rsync算法”,不仅能为client和server的提供文件快速同步,并且能够对整个目录树/文件系统进行同步备份.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>默认情况Ubuntu已经安装了rsync服务,如果没有安装也可通过<code>apt-get</code>安装.<br><code>$ sudo apt-get install rsync</code></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>安装完毕后,rsync并没有默认创建rsync的配置文件,但有提供示例配置文件<code>/usr/share/doc/rsync/examples/rsyncd.conf</code>,可以参考示例文件进行配置．<br>rsync需配置以下二个文件：</p>
<ul>
<li>rsyncd.conf　rsync配置</li>
<li>rsyncd.secrets　rsync用户密码</li>
</ul>
<p>设置rsync账号密码<br><code>$ sudo vi /etc/rsyncd.secrets</code><br>按下面格式编辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user1:password1</span><br><span class="line">user2:password2</span><br></pre></td></tr></table></figure></p>
<p>然后修改权限<code>$ sudo chmod 600 /etc/rsyncd.secrets</code></p>
<p>拷贝示例配置文件rsyncd.conf到/etc/下,然后再进行相关配置.<br><code>$ sudo cp /usr/share/doc/rsync/examples/rsyncd.conf /etc/</code><br>下面是server端rsyncd.conf的相关配置,分为GLOBAL OPTIONS与MODULE OPTIONS.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># GLOBAL OPTIONS</span><br><span class="line"></span><br><span class="line">pid file=/var/run/rsyncd.pid</span><br><span class="line"></span><br><span class="line">#port = 873</span><br><span class="line">address = 10.129.33.241</span><br><span class="line"></span><br><span class="line">#uid = nobody</span><br><span class="line">#gid = nobody    </span><br><span class="line">uid = root   </span><br><span class="line">gid = root  </span><br><span class="line">use chroot = yes</span><br><span class="line">read only = yes  </span><br><span class="line"></span><br><span class="line">motd file=/etc/motd</span><br><span class="line">log file=/var/log/rsyncd</span><br><span class="line"></span><br><span class="line">max connections=10</span><br><span class="line">timeout = 600</span><br><span class="line"></span><br><span class="line">log format = %t %a %m %f %b</span><br><span class="line"></span><br><span class="line"># MODULE OPTIONS</span><br><span class="line">[backup]</span><br><span class="line">	comment = release backup</span><br><span class="line">	path = /home/ftp/Monster-Release/</span><br><span class="line">	lock file = /var/lock/rsyncd</span><br><span class="line">	list = yes</span><br><span class="line">#	exclude =</span><br><span class="line">#	exclude from =</span><br><span class="line">#	include =</span><br><span class="line">#	include from =</span><br><span class="line">	auth users = rsyncmonster</span><br><span class="line">	secrets file = /etc/rsyncd.secrets</span><br><span class="line">#	strict modes = yes</span><br><span class="line">#	hosts allow =</span><br><span class="line">#	hosts deny =</span><br><span class="line">	ignore errors</span><br><span class="line">	ignore nonreadable = yes</span><br><span class="line">	transfer logging = no</span><br><span class="line">#	log format = %t: host %h (%a) %o %f (%l bytes). Total %b bytes.</span><br><span class="line">	refuse options = checksum dry-run</span><br><span class="line">	dont compress = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz</span><br></pre></td></tr></table></figure></p>
<p>全局配置说明:</p>
<ul>
<li>pid file=/var/run/rsyncd.pid 进程pid写入到文件/var/run/rsyncd.pid</li>
<li>address = 10.129.33.241 本机IP地址</li>
<li>port = 873  指定运行端口，默认873</li>
<li>uid = root 执行的用户</li>
<li>gid = root 执行的用户组</li>
<li>motd file=/etc/motd 服务器登陆信息,login时显示</li>
<li>log file=/var/log/rsyncd log文件</li>
<li>max connections=10 最大连接数</li>
<li>timeout = 600 连接超时</li>
<li>log format = %t %a %m %f %b log格式</li>
<li>ignore errors 忽略IO错误</li>
</ul>
<p>模块配置说明:</p>
<ul>
<li>comment = release backup 描述</li>
<li>path = /home/ftp/Monster-Release/ 同步备份目标的路径</li>
<li>list = yes 把rsync服务器上配置显示出来</li>
<li>auth users = user1 取rsyncd.secrets中定义的user</li>
<li>secrets file = /etc/rsyncd.secrets</li>
</ul>
<p>由于是以uid = root运行,使用<code>$ sudo rsync --daemon</code>启动rsync服务</p>
<p>修改conf文件重启rsync步骤:<br><code>$ ps -ef | grep rsync</code>查看rsync进程<br><code>$ sudo kill ${rsyncpid}</code><br><code>$ sudo rsync --daemon</code></p>
<p>server端配置完成后,可在client端进行同步备份操作,同样client也需安装rsync.<br>列出服务端配置的module: <code>rsync --list-only  user@10.129.33.241::</code><br>同步备份: <code>rsync -vzrtopg --progress user@10.129.33.241::backup backupdir</code><br>-v: -verbose，即详细模式输出<br>-z: –compress 即对备份的文件在传输时进行压缩处理<br>-r: –recursive 以递归模式处理<br>-t: –times 保持文件时间信息<br>-o: –owner 保持文件owner信息<br>-p: –perms用来保持文件权限<br>-g: –group用来保持文件group信息</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://rsync.samba.org/" target="_blank" rel="external">http://rsync.samba.org/</a></li>
<li><a href="https://help.ubuntu.com/community/rsync" target="_blank" rel="external">https://help.ubuntu.com/community/rsync</a></li>
<li><a href="http://blog.chinaunix.net/uid-25266990-id-114684.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-25266990-id-114684.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之LK]]></title>
      <url>http://hesstudio.cn/2016/08/15/android-bootloader/</url>
      <content type="html"><![CDATA[<blockquote>
<p>LK是Little Kernel的简称，它是一款bootloader程序，类似的bootloader还有以前的U-Boot，vivi。现在Android平台上，Qualcomm、MTK都使用LK来作为系统引导程序.</p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Bootloader是移动平台/嵌入式系统在开机上电后执行的一段或几段程序。通常开机上电后，在芯片内部的SRAM控制器作用下将跳转到某一固定地址执行，该位置所在即BootROM，BootROM在完成CPU Core初始化后将加载bootloader程序执行。一般bootloader都分成几个文件，分阶段引导。BootROM加载bootloader第一阶段BL1到On-chip SRAM执行，BL1在完成SOC初步的初始化后将引导BL2到SDRAM执行。以MTK平台为例,加载顺序依次为BootROM-&gt;preloader-&gt;LK。</p>
<p>LK的代码一般在Android源码bootable/bootloader/lk目录下，目录结构如下：<br>├── app 　　　　LK上的应用，aboot，shell等<br>├── arch　　　　体系/架构相关，arm，x86<br>├── dev 　　　　设备相关，key，usb，pmic等<br>├── include　　　头文件<br>├── kernel　　　LK核心，thread，timer等<br>├── lib　　　　　C库<br>├── LICENSE<br>├── make　　　　编译mk文件<br>├── makefile<br>├── platform　　驱动相关<br>├── project　　　makefile文件<br>├── scripts　　　Jtag脚本<br>└── target　　　具体板子相关</p>
<p>LK的主要目的是引导系统启动，它完成了以下工作：</p>
<ul>
<li>硬件初始化，中断向量表，MMU，cache，peripherals，storage，USB，crypto初始化</li>
<li>加载Linux Kernel与ramdisk(boot.img/recovery.img),引导系统启动</li>
<li>fastboot模式</li>
</ul>
<h1 id="初始化流程分析"><a href="#初始化流程分析" class="headerlink" title="初始化流程分析"></a>初始化流程分析</h1><p>链接脚本arch/arm/system-onesegment.ld中定义了入口地址<code>ENTRY(_start)</code><br>LK将从_start开始执行，_start在/arch/arm/crt0.S中定义。<br>1.crt0.S CPU相关初始化<br>首先初始化异常向量表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.globl _start</span><br><span class="line">_start:</span><br><span class="line">	b	reset</span><br><span class="line">	b	arm_undefined</span><br><span class="line">	b	arm_syscall</span><br><span class="line">	b	arm_prefetch_abort</span><br><span class="line">	b	arm_data_abort</span><br><span class="line">	b	arm_reserved</span><br><span class="line">	b	arm_irq</span><br><span class="line">	b	arm_fiq</span><br></pre></td></tr></table></figure></p>
<p>接下来执行Set Up CPU操作，调用__cpu_early_init()进行CPU相关初始化。<br>初始化各模式stack<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.Lstack_setup:</span><br><span class="line">	/* set up the stack for irq, fiq, abort, undefined, system/user, and lastly supervisor mode */</span><br><span class="line">	mrs     r0, cpsr</span><br><span class="line">	bic     r0, r0, #0x1f</span><br><span class="line"></span><br><span class="line">	ldr		r2, =abort_stack_top</span><br><span class="line">	orr     r1, r0, #0x12 // irq</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	ldr		r13, =irq_save_spot		/* save a pointer to a temporary dumping spot used during irq delivery */</span><br><span class="line"></span><br><span class="line">	orr     r1, r0, #0x11 // fiq</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br><span class="line"></span><br><span class="line">	orr     r1, r0, #0x17 // abort</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br><span class="line"></span><br><span class="line">	orr     r1, r0, #0x1b // undefined</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br><span class="line"></span><br><span class="line">	orr     r1, r0, #0x1f // system</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br><span class="line"></span><br><span class="line">	orr		r1, r0, #0x13 // supervisor</span><br><span class="line">	msr		cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br></pre></td></tr></table></figure></p>
<p>最后跳入C函数kmain()中执行<br><code>bl        kmain</code></p>
<p>2.kmain()初始化流程<br>kmain()在kernel/main.c的中定义，执行流程如下：<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/lk_call_flow.png?raw=true" alt="kmain flow"></p>
<ul>
<li>thread_init_early();初始化线程相关结构</li>
<li>arch_early_init();cache,mmu等初始化</li>
<li>platform_early_init();interrupt contr，timer block初始化</li>
<li>target_early_init();Uart等初始化</li>
</ul>
<p>完成上述初始化操作后，新建线程并在新线程中执行bootstrap2<br><code>thread_resume(thread_create(&quot;bootstrap2&quot;, &amp;bootstrap2, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));</code><br>bootstrap2()分别调用arch_init();platform_init();target_init();进一步对硬件平台初始化。最后将调用apps_init()启动LK上的app。</p>
<p>3.apps_init()<br>apps_init的实现如下，首先遍历<strong>__apps_start</strong>到<strong>__apps_end</strong>位置的app_descriptor，并调用其init函数，然后在新线程中start app。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor __apps_start;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor __apps_end;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start_app</span><span class="params">(<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *app)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* one time setup */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">apps_init</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *app;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* call all the init routines */</span></span><br><span class="line">	<span class="keyword">for</span> (app = &amp;__apps_start; app != &amp;__apps_end; app++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (app-&gt;init)</span><br><span class="line">			app-&gt;init(app);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* start any that want to start on boot */</span></span><br><span class="line">	<span class="keyword">for</span> (app = &amp;__apps_start; app != &amp;__apps_end; app++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (app-&gt;entry &amp;&amp; (app-&gt;flags &amp; APP_FLAG_DONT_START_ON_BOOT) == <span class="number">0</span>) &#123;</span><br><span class="line">			start_app(app);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">app_thread_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *app = (<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *)arg;</span><br><span class="line"></span><br><span class="line">	app-&gt;entry(app, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start_app</span><span class="params">(<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *app)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">thread_t</span> *thr;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"starting app %s\n"</span>, app-&gt;name);</span><br><span class="line"></span><br><span class="line">	thr = thread_create(app-&gt;name, &amp;app_thread_entry, (<span class="keyword">void</span> *)app, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);</span><br><span class="line">	<span class="keyword">if</span>(!thr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	thread_resume(thr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中<strong>__apps_start</strong>与<strong>__apps_end</strong>在链接脚本arch/arm/system-onesegment.ld中定义，<strong>__apps_start</strong>与<strong>__apps_end</strong>与中间存放的是apps section。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.rodata : &#123;</span><br><span class="line">	*(.rodata .rodata.* .gnu.linkonce.r.*)</span><br><span class="line">	. = ALIGN(4);</span><br><span class="line">	__commands_start = .;</span><br><span class="line">	KEEP (*(.commands))</span><br><span class="line">	__commands_end = .;</span><br><span class="line">	. = ALIGN(4);</span><br><span class="line">	__apps_start = .;</span><br><span class="line">	KEEP (*(.apps))</span><br><span class="line">	__apps_end = .;</span><br><span class="line">	. = ALIGN(4);</span><br><span class="line">	__rodata_end = . ;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有的LK app都需定义app_descriptor结构体存放到apps段，app_descriptor在include/app.h中定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* each app needs to define one of these to define its startup conditions */</span><br><span class="line">struct app_descriptor &#123;</span><br><span class="line">	const char *name;</span><br><span class="line">	app_init  init;</span><br><span class="line">	app_entry entry;</span><br><span class="line">	unsigned int flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#define APP_START(appname) struct app_descriptor _app_##appname __SECTION(&quot;.apps&quot;) = &#123; .name = #appname,</span><br><span class="line">#define APP_END &#125;;</span><br></pre></td></tr></table></figure></p>
<p>通过宏<strong>APP_START</strong>与<strong>APP_END</strong>定义app_descriptor结构体并放到apps sections中，例如在aboot.c的定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">APP_START(aboot)</span><br><span class="line">	.init = aboot_init,</span><br><span class="line">APP_END</span><br></pre></td></tr></table></figure></p>
<p>即定义了aboot的app_descriptor结构体并存放在apps section中，在apps_init中将调用到aboot_init()<br>至此，初始化流程结束。</p>
<h1 id="系统引导流程分析"><a href="#系统引导流程分析" class="headerlink" title="系统引导流程分析"></a>系统引导流程分析</h1><p>aboot的主要目的是进行系统引导，它会根据开机模式来决定进入Main System或Recovery或fastboot。<br>下面从aboot_init()来分析整个流程：<br>1.首先设置EMMC/NAND读取page大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (target_is_emmc_boot())</span><br><span class="line">&#123;</span><br><span class="line">	page_size = mmc_page_size();</span><br><span class="line">	page_mask = page_size - 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">	page_size = flash_page_size();</span><br><span class="line">	page_mask = page_size - 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.选择开机模式<br>通过keys_get_state()与check_reboot_mode()确定开机模式。<br>keys_get_state()会检测按键，并根据按键的定义确定进入对应的模式。<br>check_reboot_mode()会读取指定memory位置信息，该位置信息由kernel shutdown时写入，例如执行<code>adb reboot recovery</code>，<code>adb reboot bootloader</code>，check_reboot_mode()获取的分别是<code>RECOVERY_MODE</code>，<code>FASTBOOT_MODE</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">reboot_mode = check_reboot_mode();</span><br><span class="line"><span class="keyword">if</span> (reboot_mode == RECOVERY_MODE)</span><br><span class="line">&#123;</span><br><span class="line">	boot_into_recovery = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(reboot_mode == FASTBOOT_MODE)</span><br><span class="line">&#123;</span><br><span class="line">	boot_into_fastboot = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(reboot_mode == ALARM_BOOT)</span><br><span class="line">&#123;</span><br><span class="line">	boot_reason_alarm = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果reboot_mode不是<code>FASTBOOT_MODE</code>，将调用boot_linux_from_mmc()进入系统引导流程<br>如果reboot_mode等于<code>FASTBOOT_MODE</code>，将执行fastboot_init()进入fastboot模式<br>3.boot_linux_from_mmc()<br>boot_linux_from_mmc()解析boot.img/recovery.img的头部boot_img_hdr结构来获取启动加载信息(如果是recovery模式,将从recovery分区加载recovery.img),其中cmdline对应传递给内核的参数,tags_addr对应device tree table,boot_img_hdr结构体在app/aboot/bootimg.h中定义,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#define BOOT_MAGIC &quot;ANDROID!&quot;</span><br><span class="line">#define BOOT_MAGIC_SIZE 8</span><br><span class="line">#define BOOT_NAME_SIZE  16</span><br><span class="line">#define BOOT_ARGS_SIZE  512</span><br><span class="line">#define BOOT_IMG_MAX_PAGE_SIZE 4096</span><br><span class="line"></span><br><span class="line">struct boot_img_hdr</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char magic[BOOT_MAGIC_SIZE];</span><br><span class="line"></span><br><span class="line">    unsigned kernel_size;  /* size in bytes */</span><br><span class="line">    unsigned kernel_addr;  /* physical load addr */</span><br><span class="line"></span><br><span class="line">    unsigned ramdisk_size; /* size in bytes */</span><br><span class="line">    unsigned ramdisk_addr; /* physical load addr */</span><br><span class="line"></span><br><span class="line">    unsigned second_size;  /* size in bytes */</span><br><span class="line">    unsigned second_addr;  /* physical load addr */</span><br><span class="line"></span><br><span class="line">    unsigned tags_addr;    /* physical addr for kernel tags */</span><br><span class="line">    unsigned page_size;    /* flash page size we assume */</span><br><span class="line">    unsigned dt_size;      /* device_tree in bytes */</span><br><span class="line">    unsigned unused;    /* future expansion: should be 0 */</span><br><span class="line"></span><br><span class="line">    unsigned char name[BOOT_NAME_SIZE]; /* asciiz product name */</span><br><span class="line"></span><br><span class="line">    unsigned char cmdline[BOOT_ARGS_SIZE];</span><br><span class="line"></span><br><span class="line">    unsigned id[8]; /* timestamp / checksum / sha1 / etc */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>生成的boot.img/recovery.img头部如下图示：<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/bootimg.png?raw=true" alt="boot_img_hdr"><br>根据boot_img_hdr结构的定义可以从上图获取到一下信息：<br><strong>kernel_size:</strong> 0x009fc707<br><strong>kernel_addr:</strong> 0x80008000<br><strong>ramdisk_size:</strong> 0x001ddfb9<br><strong>ramdisk_addr:</strong> 0x81000000<br><strong>second_size:</strong> 0x00000000<br><strong>second_addr:</strong> 0x80f00000<br><strong>tags_addr:</strong> 0x80000100<br><strong>page_size:</strong> 0x00000100<br><strong>cmdline:</strong><br>console=ttyHSL0,115200,n8 androidboot.console=ttyHSL0 androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x237 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 cma=32M@0-0xffffffff androidboot.selinux=permissive</p>
<p>在解析完boot_img_hdr后，boot_img_hdr的信息被传递给boot_linux执行具体的加载启动工作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">boot_linux((void *)hdr-&gt;kernel_addr, (void *)hdr-&gt;tags_addr,</span><br><span class="line">		 (const char *)hdr-&gt;cmdline, board_machtype(),</span><br><span class="line">		 (void *)hdr-&gt;ramdisk_addr, hdr-&gt;ramdisk_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> typedef void entry_func_ptr(unsigned, unsigned, unsigned*);</span><br><span class="line"> void boot_linux(void *kernel, unsigned *tags,</span><br><span class="line"> 		const char *cmdline, unsigned machtype,</span><br><span class="line"> 		void *ramdisk, unsigned ramdisk_size)</span><br><span class="line"> &#123;</span><br><span class="line"> 	unsigned char *final_cmdline;</span><br><span class="line"> #if DEVICE_TREE</span><br><span class="line"> 	int ret = 0;</span><br><span class="line"> #endif</span><br><span class="line"></span><br><span class="line"> 	void (*entry)(unsigned, unsigned, unsigned*) = (entry_func_ptr*)(PA((addr_t)kernel));</span><br><span class="line"> 	uint32_t tags_phys = PA((addr_t)tags);</span><br><span class="line"> 	struct kernel64_hdr *kptr = (struct kernel64_hdr*)kernel;</span><br><span class="line"></span><br><span class="line"> 	ramdisk = (void *)PA((addr_t)ramdisk);</span><br><span class="line"></span><br><span class="line"> 	final_cmdline = update_cmdline((const char*)cmdline);</span><br><span class="line"></span><br><span class="line"> #if DEVICE_TREE</span><br><span class="line"> 	dprintf(INFO, &quot;Updating device tree: start\n&quot;);</span><br><span class="line"></span><br><span class="line"> 	/* Update the Device Tree */</span><br><span class="line"> 	ret = update_device_tree((void *)tags,(const char *)final_cmdline, ramdisk, ramdisk_size);</span><br><span class="line"> 	if(ret)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		dprintf(CRITICAL, &quot;ERROR: Updating Device Tree Failed \n&quot;);</span><br><span class="line"> 		ASSERT(0);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	dprintf(INFO, &quot;Updating device tree: done\n&quot;);</span><br><span class="line"> #else</span><br><span class="line"> 	/* Generating the Atags */</span><br><span class="line"> 	generate_atags(tags, final_cmdline, ramdisk, ramdisk_size);</span><br><span class="line"> #endif</span><br><span class="line"></span><br><span class="line"> 	free(final_cmdline);</span><br><span class="line"></span><br><span class="line"> #if VERIFIED_BOOT</span><br><span class="line"> 	/* Write protect the device info */</span><br><span class="line"> 	if (!boot_into_recovery &amp;&amp; target_build_variant_user() &amp;&amp; devinfo_present &amp;&amp; mmc_write_protect(&quot;devinfo&quot;, 1))</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		dprintf(INFO, &quot;Failed to write protect dev info\n&quot;);</span><br><span class="line"> 		ASSERT(0);</span><br><span class="line"> 	&#125;</span><br><span class="line"> #endif</span><br><span class="line"></span><br><span class="line"> 	/* Turn off splash screen if enabled */</span><br><span class="line"> #if DISPLAY_SPLASH_SCREEN</span><br><span class="line"> 	target_display_shutdown();</span><br><span class="line"> #endif</span><br><span class="line"></span><br><span class="line"> 	/* Perform target specific cleanup */</span><br><span class="line"> 	target_uninit();</span><br><span class="line"></span><br><span class="line"> 	dprintf(INFO, &quot;booting linux @ %p, ramdisk @ %p (%d), tags/device tree @ %p\n&quot;,</span><br><span class="line"> 		entry, ramdisk, ramdisk_size, (void *)tags_phys);</span><br><span class="line"></span><br><span class="line"> 	enter_critical_section();</span><br><span class="line"></span><br><span class="line"> 	/* Initialise wdog to catch early kernel crashes */</span><br><span class="line"> #if WDOG_SUPPORT</span><br><span class="line"> 	msm_wdog_init();</span><br><span class="line"> #endif</span><br><span class="line"> 	/* do any platform specific cleanup before kernel entry */</span><br><span class="line"> 	platform_uninit();</span><br><span class="line"></span><br><span class="line"> 	arch_disable_cache(UCACHE);</span><br><span class="line"></span><br><span class="line"> #if ARM_WITH_MMU</span><br><span class="line"> 	arch_disable_mmu();</span><br><span class="line"> #endif</span><br><span class="line"> 	bs_set_timestamp(BS_KERNEL_ENTRY);</span><br><span class="line"></span><br><span class="line"> 	if (IS_ARM64(kptr))</span><br><span class="line"> 		/* Jump to a 64bit kernel */</span><br><span class="line"> 		scm_elexec_call((paddr_t)kernel, tags_phys);</span><br><span class="line"> 	else</span><br><span class="line"> 		/* Jump to a 32bit kernel */</span><br><span class="line"> 		entry(0, machtype, (unsigned*)tags_phys);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>至此，LK引导过程完成，将进入系统启动过程。</p>
<h1 id="LK-fastboot模式"><a href="#LK-fastboot模式" class="headerlink" title="LK fastboot模式"></a>LK fastboot模式</h1><p>当LK通过检测按键或reboot_mode是<code>FASTBOOT_MODE</code>时，将进入到fastboot模式。<br>1.注册fastboot Command<br>通过aboot_fastboot_register_commands()注册fastboot支持的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">void aboot_fastboot_register_commands(void)</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	char hw_platform_buf[MAX_RSP_SIZE];</span><br><span class="line"></span><br><span class="line">	struct fastboot_cmd_desc cmd_list[] = &#123;</span><br><span class="line">						/* By default the enabled list is empty. */</span><br><span class="line">						&#123;&quot;&quot;, NULL&#125;,</span><br><span class="line">						/* move commands enclosed within the below ifndef to here</span><br><span class="line">						 * if they need to be enabled in user build.</span><br><span class="line">						 */</span><br><span class="line">#ifndef DISABLE_FASTBOOT_CMDS</span><br><span class="line">						/* Register the following commands only for non-user builds */</span><br><span class="line">						&#123;&quot;flash:&quot;, cmd_flash&#125;,</span><br><span class="line">						&#123;&quot;erase:&quot;, cmd_erase&#125;,</span><br><span class="line">						&#123;&quot;boot&quot;, cmd_boot&#125;,</span><br><span class="line">						&#123;&quot;continue&quot;, cmd_continue&#125;,</span><br><span class="line">						&#123;&quot;reboot&quot;, cmd_reboot&#125;,</span><br><span class="line">						&#123;&quot;reboot-bootloader&quot;, cmd_reboot_bootloader&#125;,</span><br><span class="line">						&#123;&quot;oem unlock&quot;, cmd_oem_unlock&#125;,</span><br><span class="line">						&#123;&quot;oem unlock-go&quot;, cmd_oem_unlock_go&#125;,</span><br><span class="line">						&#123;&quot;oem lock&quot;, cmd_oem_lock&#125;,</span><br><span class="line">						&#123;&quot;flashing unlock&quot;, cmd_oem_unlock&#125;,</span><br><span class="line">						&#123;&quot;flashing lock&quot;, cmd_oem_lock&#125;,</span><br><span class="line">						&#123;&quot;flashing lock_critical&quot;, cmd_flashing_lock_critical&#125;,</span><br><span class="line">						&#123;&quot;flashing unlock_critical&quot;, cmd_flashing_unlock_critical&#125;,</span><br><span class="line">						&#123;&quot;flashing get_unlock_ability&quot;, cmd_flashing_get_unlock_ability&#125;,</span><br><span class="line">						&#123;&quot;oem device-info&quot;, cmd_oem_devinfo&#125;,</span><br><span class="line">						&#123;&quot;preflash&quot;, cmd_preflash&#125;,</span><br><span class="line">						&#123;&quot;oem enable-charger-screen&quot;, cmd_oem_enable_charger_screen&#125;,</span><br><span class="line">						&#123;&quot;oem disable-charger-screen&quot;, cmd_oem_disable_charger_screen&#125;,</span><br><span class="line">						&#123;&quot;oem off-mode-charge&quot;, cmd_oem_off_mode_charger&#125;,</span><br><span class="line">						&#123;&quot;oem select-display-panel&quot;, cmd_oem_select_display_panel&#125;,</span><br><span class="line">#if UNITTEST_FW_SUPPORT</span><br><span class="line">						&#123;&quot;oem run-tests&quot;, cmd_oem_runtests&#125;,</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br><span class="line">						&#125;;</span><br><span class="line"></span><br><span class="line">	int fastboot_cmds_count = sizeof(cmd_list)/sizeof(cmd_list[0]);</span><br><span class="line">	for (i = 1; i &lt; fastboot_cmds_count; i++)</span><br><span class="line">		fastboot_register(cmd_list[i].name,cmd_list[i].cb);</span><br><span class="line"></span><br><span class="line">	/* publish variables and their values */</span><br><span class="line">	fastboot_publish(&quot;product&quot;,  TARGET(BOARD));</span><br><span class="line">	fastboot_publish(&quot;kernel&quot;,   &quot;lk&quot;);</span><br><span class="line">	fastboot_publish(&quot;serialno&quot;, sn_buf);</span><br><span class="line"></span><br><span class="line">	/*</span><br><span class="line">	 * partition info is supported only for emmc partitions</span><br><span class="line">	 * Calling this for NAND prints some error messages which</span><br><span class="line">	 * is harmless but misleading. Avoid calling this for NAND</span><br><span class="line">	 * devices.</span><br><span class="line">	 */</span><br><span class="line">	if (target_is_emmc_boot())</span><br><span class="line">		publish_getvar_partition_info(part_info, ARRAY_SIZE(part_info));</span><br><span class="line"></span><br><span class="line">	/* Max download size supported */</span><br><span class="line">	snprintf(max_download_size, MAX_RSP_SIZE, &quot;\t0x%x&quot;,</span><br><span class="line">			target_get_max_flash_size());</span><br><span class="line">	fastboot_publish(&quot;max-download-size&quot;, (const char *) max_download_size);</span><br><span class="line">	/* Is the charger screen check enabled */</span><br><span class="line">	snprintf(charger_screen_enabled, MAX_RSP_SIZE, &quot;%d&quot;,</span><br><span class="line">			device.charger_screen_enabled);</span><br><span class="line">	fastboot_publish(&quot;charger-screen-enabled&quot;,</span><br><span class="line">			(const char *) charger_screen_enabled);</span><br><span class="line">	fastboot_publish(&quot;off-mode-charge&quot;, (const char *) charger_screen_enabled);</span><br><span class="line">	snprintf(panel_display_mode, MAX_RSP_SIZE, &quot;%s&quot;,</span><br><span class="line">			device.display_panel);</span><br><span class="line">	fastboot_publish(&quot;display-panel&quot;,</span><br><span class="line">			(const char *) panel_display_mode);</span><br><span class="line">	fastboot_publish(&quot;version-bootloader&quot;, (const char *) device.bootloader_version);</span><br><span class="line">	fastboot_publish(&quot;version-baseband&quot;, (const char *) device.radio_version);</span><br><span class="line">	fastboot_publish(&quot;secure&quot;, is_secure_boot_enable()? &quot;yes&quot;:&quot;no&quot;);</span><br><span class="line">	smem_get_hw_platform_name((unsigned char *) hw_platform_buf, sizeof(hw_platform_buf));</span><br><span class="line">	snprintf(get_variant, MAX_RSP_SIZE, &quot;%s %s&quot;, hw_platform_buf,</span><br><span class="line">		target_is_emmc_boot()? &quot;eMMC&quot;:&quot;UFS&quot;);</span><br><span class="line">	fastboot_publish(&quot;variant&quot;, (const char *) get_variant);</span><br><span class="line">#if CHECK_BAT_VOLTAGE</span><br><span class="line">	update_battery_status();</span><br><span class="line">	fastboot_publish(&quot;battery-voltage&quot;, (const char *) battery_voltage);</span><br><span class="line">	fastboot_publish(&quot;battery-soc-ok&quot;, (const char *) battery_soc_ok);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中主要是通过fastboot_register注册Command到cmdlist，通过fastboot_publish注册variables到varlist。<br>它们的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static struct fastboot_cmd *cmdlist;</span><br><span class="line"></span><br><span class="line">void fastboot_register(const char *prefix,</span><br><span class="line">		       void (*handle)(const char *arg, void *data, unsigned sz))</span><br><span class="line">&#123;</span><br><span class="line">	struct fastboot_cmd *cmd;</span><br><span class="line">	cmd = malloc(sizeof(*cmd));</span><br><span class="line">	if (cmd) &#123;</span><br><span class="line">		cmd-&gt;prefix = prefix;</span><br><span class="line">		cmd-&gt;prefix_len = strlen(prefix);</span><br><span class="line">		cmd-&gt;handle = handle;</span><br><span class="line">		cmd-&gt;next = cmdlist;</span><br><span class="line">		cmdlist = cmd;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static struct fastboot_var *varlist;</span><br><span class="line"></span><br><span class="line">void fastboot_publish(const char *name, const char *value)</span><br><span class="line">&#123;</span><br><span class="line">	struct fastboot_var *var;</span><br><span class="line">	var = malloc(sizeof(*var));</span><br><span class="line">	if (var) &#123;</span><br><span class="line">		var-&gt;name = name;</span><br><span class="line">		var-&gt;value = value;</span><br><span class="line">		var-&gt;next = varlist;</span><br><span class="line">		varlist = var;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行adb reboot bootloader进入fastboot模式后，可以在PC端的fastboot可执行文件(Fastboot客户端源码在system/core/fastboot下，通过系统源码编译后的科执行文件位于./out/host/linux-x86/bin/fastboot目录下)与目标按fastboot协议交互。<br>通过fastboot_register注册到cmdlist的命令，都可以在pc端通过fastboot执行，常用的命令有：<br><strong><code>fastboot  devices</code></strong> 查看连接设备<br><strong><code>fastboot  update &lt;filename&gt;</code></strong> 更新update.zip包<br><strong><code>fastboot  flashall</code></strong> flash boot, system, vendor, and recovery<br><strong><code>fastboot  flash &lt;partition&gt; [ &lt;filename&gt; ]</code></strong> flash指定分区<br><strong><code>fastboot  erase &lt;partition&gt;</code></strong> erase执行分区<br><strong><code>fastboot  continue</code></strong> 继续启动<br><strong><code>fastboot  reboot bootloader</code></strong> reboot到bootloader<br><strong><code>fastboot  oem unlock</code></strong> oem解锁</p>
<p>通过fastboot_publish publish到varlist的value可以通过<code>fastboot getvar &lt;variable&gt;</code>获取，例如<br><strong><code>fastboot getvar version</code></strong><br><strong><code>fastboot getvar product</code></strong></p>
<p>2.启动fastboot<br>通过<code>fastboot_init(target_get_scratch_address(), target_get_max_flash_size());</code>初始化并启动fastboot。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">int fastboot_init(void *base, unsigned size)</span><br><span class="line">&#123;</span><br><span class="line">	char sn_buf[13];</span><br><span class="line">	thread_t *thr;</span><br><span class="line">	dprintf(INFO, &quot;fastboot_init()\n&quot;);</span><br><span class="line"></span><br><span class="line">	download_base = base;</span><br><span class="line">	download_max = size;</span><br><span class="line"></span><br><span class="line">	/* target specific initialization before going into fastboot. */</span><br><span class="line">	target_fastboot_init();</span><br><span class="line"></span><br><span class="line">	/* setup serialno */</span><br><span class="line">	target_serialno((unsigned char *) sn_buf);</span><br><span class="line">	dprintf(SPEW,&quot;serial number: %s\n&quot;,sn_buf);</span><br><span class="line">	surf_udc_device.serialno = sn_buf;</span><br><span class="line"></span><br><span class="line">	if(!strcmp(target_usb_controller(), &quot;dwc&quot;))</span><br><span class="line">	&#123;</span><br><span class="line">#ifdef USB30_SUPPORT</span><br><span class="line">		surf_udc_device.t_usb_if = target_usb30_init();</span><br><span class="line"></span><br><span class="line">		/* initialize udc functions to use dwc controller */</span><br><span class="line">		usb_if.udc_init            = usb30_udc_init;</span><br><span class="line">		usb_if.udc_register_gadget = usb30_udc_register_gadget;</span><br><span class="line">		usb_if.udc_start           = usb30_udc_start;</span><br><span class="line">		usb_if.udc_stop            = usb30_udc_stop;</span><br><span class="line"></span><br><span class="line">		usb_if.udc_endpoint_alloc  = usb30_udc_endpoint_alloc;</span><br><span class="line">		usb_if.udc_request_alloc   = usb30_udc_request_alloc;</span><br><span class="line">		usb_if.udc_request_free    = usb30_udc_request_free;</span><br><span class="line"></span><br><span class="line">		usb_if.usb_read            = usb30_usb_read;</span><br><span class="line">		usb_if.usb_write           = usb30_usb_write;</span><br><span class="line">#else</span><br><span class="line">		dprintf(CRITICAL, &quot;USB30 needs to be enabled for this target.\n&quot;);</span><br><span class="line">		ASSERT(0);</span><br><span class="line">#endif</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		/* initialize udc functions to use the default chipidea controller */</span><br><span class="line">		usb_if.udc_init            = udc_init;</span><br><span class="line">		usb_if.udc_register_gadget = udc_register_gadget;</span><br><span class="line">		usb_if.udc_start           = udc_start;</span><br><span class="line">		usb_if.udc_stop            = udc_stop;</span><br><span class="line"></span><br><span class="line">		usb_if.udc_endpoint_alloc  = udc_endpoint_alloc;</span><br><span class="line">		usb_if.udc_request_alloc   = udc_request_alloc;</span><br><span class="line">		usb_if.udc_request_free    = udc_request_free;</span><br><span class="line"></span><br><span class="line">		usb_if.usb_read            = hsusb_usb_read;</span><br><span class="line">		usb_if.usb_write           = hsusb_usb_write;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/* register udc device */</span><br><span class="line">	usb_if.udc_init(&amp;surf_udc_device);</span><br><span class="line"></span><br><span class="line">	event_init(&amp;usb_online, 0, EVENT_FLAG_AUTOUNSIGNAL);</span><br><span class="line">	event_init(&amp;txn_done, 0, EVENT_FLAG_AUTOUNSIGNAL);</span><br><span class="line"></span><br><span class="line">	in = usb_if.udc_endpoint_alloc(UDC_TYPE_BULK_IN, 512);</span><br><span class="line">	if (!in)</span><br><span class="line">		goto fail_alloc_in;</span><br><span class="line">	out = usb_if.udc_endpoint_alloc(UDC_TYPE_BULK_OUT, 512);</span><br><span class="line">	if (!out)</span><br><span class="line">		goto fail_alloc_out;</span><br><span class="line"></span><br><span class="line">	fastboot_endpoints[0] = in;</span><br><span class="line">	fastboot_endpoints[1] = out;</span><br><span class="line"></span><br><span class="line">	req = usb_if.udc_request_alloc();</span><br><span class="line">	if (!req)</span><br><span class="line">		goto fail_alloc_req;</span><br><span class="line"></span><br><span class="line">	/* register gadget */</span><br><span class="line">	if (usb_if.udc_register_gadget(&amp;fastboot_gadget))</span><br><span class="line">		goto fail_udc_register;</span><br><span class="line"></span><br><span class="line">	fastboot_register(&quot;getvar:&quot;, cmd_getvar);</span><br><span class="line">	fastboot_register(&quot;download:&quot;, cmd_download);</span><br><span class="line">	fastboot_publish(&quot;version&quot;, &quot;0.5&quot;);</span><br><span class="line"></span><br><span class="line">	thr = thread_create(&quot;fastboot&quot;, fastboot_handler, 0, DEFAULT_PRIORITY, 4096);</span><br><span class="line">	if (!thr)</span><br><span class="line">	&#123;</span><br><span class="line">		goto fail_alloc_in;</span><br><span class="line">	&#125;</span><br><span class="line">	thread_resume(thr);</span><br><span class="line"></span><br><span class="line">	usb_if.udc_start();</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line"></span><br><span class="line">fail_udc_register:</span><br><span class="line">	usb_if.udc_request_free(req);</span><br><span class="line">fail_alloc_req:</span><br><span class="line">	usb_if.udc_endpoint_free(out);</span><br><span class="line">fail_alloc_out:</span><br><span class="line">	usb_if.udc_endpoint_free(in);</span><br><span class="line">fail_alloc_in:</span><br><span class="line">	return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fastboot_init()主要工作是初始化usb_controller_interface,然后调用usb_if.udc_start()监听usb event,在新建线程等待usb event并调用fastboot_handler处理。fastboot_init后display_fastboot_menu_thread()将会在新线程中被调用,即用来在LCD上显示fastboot菜单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static int fastboot_handler(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">	for (;;) &#123;</span><br><span class="line">		event_wait(&amp;usb_online);</span><br><span class="line">		fastboot_command_loop();</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fastboot_handler中等待usb事件，通过usb_if.usb_read()读取usb数据，并检索出对应cmdlist里的命令调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">static void fastboot_command_loop(void)</span><br><span class="line">&#123;</span><br><span class="line">	struct fastboot_cmd *cmd;</span><br><span class="line">	int r;</span><br><span class="line">#if CHECK_BAT_VOLTAGE</span><br><span class="line">	boolean is_first_erase_flash = false;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">	dprintf(INFO,&quot;fastboot: processing commands\n&quot;);</span><br><span class="line"></span><br><span class="line">	uint8_t *buffer = (uint8_t *)memalign(CACHE_LINE, ROUNDUP(4096, CACHE_LINE));</span><br><span class="line">	if (!buffer)</span><br><span class="line">	&#123;</span><br><span class="line">		dprintf(CRITICAL, &quot;Could not allocate memory for fastboot buffer\n.&quot;);</span><br><span class="line">		ASSERT(0);</span><br><span class="line">	&#125;</span><br><span class="line">again:</span><br><span class="line">	while (fastboot_state != STATE_ERROR) &#123;</span><br><span class="line"></span><br><span class="line">		/* Read buffer must be cleared first. If buffer is not cleared,</span><br><span class="line">		 * the original data in buf trailing the received command is</span><br><span class="line">		 * interpreted as part of the command.</span><br><span class="line">		 */</span><br><span class="line">		memset(buffer, 0, MAX_RSP_SIZE);</span><br><span class="line">		arch_clean_invalidate_cache_range((addr_t) buffer, MAX_RSP_SIZE);</span><br><span class="line"></span><br><span class="line">		r = usb_if.usb_read(buffer, MAX_RSP_SIZE);</span><br><span class="line">		if (r &lt; 0) break;</span><br><span class="line">		buffer[r] = 0;</span><br><span class="line">		dprintf(INFO,&quot;fastboot: %s\n&quot;, buffer);</span><br><span class="line"></span><br><span class="line">#if CHECK_BAT_VOLTAGE</span><br><span class="line">		/* check battery voltage before erase or flash image */</span><br><span class="line">		if (!strncmp((const char*) buffer, &quot;getvar:partition-type&quot;, 21))</span><br><span class="line">			is_first_erase_flash = true;</span><br><span class="line"></span><br><span class="line">		if (is_first_erase_flash) &#123;</span><br><span class="line">			if (!strncmp((const char*) buffer, &quot;erase&quot;, 5) ||</span><br><span class="line">				!strncmp((const char*) buffer, &quot;flash&quot;, 5)) &#123;</span><br><span class="line">				if (!target_battery_soc_ok()) &#123;</span><br><span class="line">					dprintf(INFO,&quot;fastboot: battery voltage: %d\n&quot;,</span><br><span class="line">						target_get_battery_voltage());</span><br><span class="line">					fastboot_fail(&quot;Warning: battery&apos;s capacity is very low\n&quot;);</span><br><span class="line">					return;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">		fastboot_state = STATE_COMMAND;</span><br><span class="line"></span><br><span class="line">		for (cmd = cmdlist; cmd; cmd = cmd-&gt;next) &#123;</span><br><span class="line">			if (memcmp(buffer, cmd-&gt;prefix, cmd-&gt;prefix_len))</span><br><span class="line">				continue;</span><br><span class="line">			cmd-&gt;handle((const char*) buffer + cmd-&gt;prefix_len,</span><br><span class="line">				    (void*) download_base, download_size);</span><br><span class="line">			if (fastboot_state == STATE_COMMAND)</span><br><span class="line">				fastboot_fail(&quot;unknown reason&quot;);</span><br><span class="line"></span><br><span class="line">#if CHECK_BAT_VOLTAGE</span><br><span class="line">			if (!strncmp((const char*) buffer, &quot;erase&quot;, 5) ||</span><br><span class="line">				!strncmp((const char*) buffer, &quot;flash&quot;, 5)) &#123;</span><br><span class="line">				if (is_first_erase_flash) &#123;</span><br><span class="line">					is_first_erase_flash = false;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">#endif</span><br><span class="line">			goto again;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		fastboot_fail(&quot;unknown command&quot;);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	fastboot_state = STATE_OFFLINE;</span><br><span class="line">	dprintf(INFO,&quot;fastboot: oops!\n&quot;);</span><br><span class="line">	free(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Device-tree"><a href="#Device-tree" class="headerlink" title="Device tree"></a>Device tree</h1><p>Device tree是描述设备硬件信息的数据结构，通过.dts源文件定义，一般位于kernel/arch/arm/boot/dts目录下, .dts编译生成.dtb文件后将LK传递给kernel执行设备初始化工作。<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/device_tree.png?raw=true" alt="Device Tree"><br>关于Device Tree的详细说明，可参考宋宝华老师的博文 <a href="http://blog.csdn.net/21cnbao/article/details/8457546" target="_blank" rel="external">ARM Linux 3.x的设备树（Device Tree）</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Gradle]]></title>
      <url>http://hesstudio.cn/2016/08/06/android-tools-build-gradle/</url>
      <content type="html"><![CDATA[<h1 id="Building-the-Android-Gradle-Plugin"><a href="#Building-the-Android-Gradle-Plugin" class="headerlink" title="Building the Android Gradle Plugin"></a>Building the Android Gradle Plugin</h1><p><a href="http://tools.android.com/build" target="_blank" rel="external">http://tools.android.com/build</a></p>
<p>$ mkdir studio-master-dev<br>$ cd studio-master-dev<br>$ repo init -u <a href="https://android.googlesource.com/platform/manifest" target="_blank" rel="external">https://android.googlesource.com/platform/manifest</a> -b studio-master-dev<br>$ repo sync</p>
<p>sudo add-apt-repository ppa:openjdk-r/ppa<br>sudo apt-get update<br>sudo apt-get install openjdk-8-jdk<br>sudo update-alternatives –config java<br>sudo update-alternatives –config javac</p>
<p>$ cd tools<br>$ ./gradlew init<br>$ ./gradlew assemble<br>$ ./gradlew publishLocal</p>
<p>关于String 定义msgid后字符串重名的问题，由于不是标准Application做法，gradle不支持<br>代码见sdk-common/src/main/java/com/android/ide/common/res2/ValueResourceParser2.java<br>checkDuplicate() -&gt;<br>else if (set.contains(name) &amp;&amp; resource.getType() != ResourceType.PUBLIC) {<br>                System.out.println(“checkDuplicate ——&gt; “ + resource.getType());<br>                throw MergingException.withMessage(<br>                        “Found item %s/%s more than one time”,<br>                        resource.getType().getDisplayName(), name).withFile(from).build();<br>            }</p>
<p>关于Gradle vs. Make for AOSP build，参考<a href="https://groups.google.com/forum/#!topic/android-building/dxP0tp0e1MI" target="_blank" rel="external">https://groups.google.com/forum/#!topic/android-building/dxP0tp0e1MI</a>　<br>关于Gradle参考<a href="http://tools.android.com/tech-docs" target="_blank" rel="external">http://tools.android.com/tech-docs</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 14.04 Nexus Maven私服搭建]]></title>
      <url>http://hesstudio.cn/2016/08/03/ubuntu-nexus-maven/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Maven是Apache基于POM(project object model)一个项目管理工具.Maven能够管理项目的构建build,reporting和documentation.</p>
<p>Nexus是一个强大的Maven仓库管理器，它极大地简化了内部仓库的维护和外部仓库的访问，可以在局域网搭建一个maven私服,用来部署第三方公共构件或者作为远程仓库在该局域网的一个代理.</p>
</blockquote>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><ol>
<li><p>下载<br>我们使用Nexus OSS开源版开源版进行环境搭建，<a href="http://www.sonatype.com/download-oss-sonatype" target="_blank" rel="external">官网下载</a> All platform的版本<a href="https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.13.0-01-bundle.tar.gz" target="_blank" rel="external">nexus-2.13.0-01-bundle.tar.gz</a></p>
</li>
<li><p>安装<br><code>$ sudo cp nexus-2.13.0-01-bundle.tar.gz /usr/local</code><br><code>$ cd /usr/local</code><br><code>$ sudo tar -zxvf nexus-2.13.0-01-bundle.tar.gz</code><br><code>$ sudo ln -s nexus-2.13.0-01 nexus</code><br><code>$ sudo nexus/bin/nexus</code><br>输出：<code>Usage: nexus/bin/nexus { console | start | stop | restart | status | dump }</code>　即表示安装成功<br><code>$ sudo vim bin/nexus</code> 修改<code>#RUN_AS_USER=</code>为<code>RUN_AS_USER=root</code><br><code>$ sudo bin/nexus start</code>启动nexus<br>浏览器登陆<a href="http://localhost:8081/nexus，默认用户名:admin，密码:admin123" target="_blank" rel="external">http://localhost:8081/nexus，默认用户名:admin，密码:admin123</a><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/ubuntu/nexus-welcome.png?raw=true" alt="nexus welcome"></p>
</li>
<li>设置开机启动：<br><code>$ sudo cp /usr/local/nexus/bin/nexus /etc/init.d/</code><br><code>$ sudo vim /etc/init.d/nexus</code><br>设置<br><code>NEXUS_HOME=&quot;/usr/local/nexus&quot;</code><br><code>RUN_AS_USER=root</code><br><code>PIDDIR=&quot;/var/run&quot;</code></li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li>Repositories配置</li>
</ol>
<p><a href="http://blog.csdn.net/l2show/article/details/48653949" target="_blank" rel="external">http://blog.csdn.net/l2show/article/details/48653949</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之抓包]]></title>
      <url>http://hesstudio.cn/2016/07/14/android-tcpdump/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>在实际开发中，如果需要在Android平台上进行网络数据包的抓取，那么使用tcpdump是非常方便的.通过tcpdump抓取数据包，pull到本地后可以利用Wireshark非常直观地分析数据包</p>
</blockquote>
<hr>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>Root Android设备</li>
<li>下载安装<a href="https://www.wireshark.org/#download" target="_blank" rel="external">Wireshark</a></li>
<li>下载<a href="http://www.androidtcpdump.com/android-tcpdump/downloads" target="_blank" rel="external">Android tcpdump binary文件</a></li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li><code>adb root</code></li>
<li><code>adb remount</code></li>
<li><code>adb push tcpdump /system/bin</code></li>
<li><code>chmod 6755 /system/bin/tcpdump</code></li>
<li><code>tcpdump -i any -p -s 0 -w /sdcard/capture.pcap</code></li>
<li><code>adb pull /sdcard/capture.pcap</code></li>
<li>Wireshark分析capture.pcap数据包</li>
</ol>
<h1 id="tcpdump参数"><a href="#tcpdump参数" class="headerlink" title="tcpdump参数"></a>tcpdump参数</h1><ol>
<li>-i<br>监视指定网络接口的数据包，可通过tcpdump -D查看可抓包的网卡</li>
<li>-p<br>一般情况下,把网络接口设置为非’混杂’模式.但必须注意,在特殊情况下此网络接口还是会以’混杂’模式来工作；从而,’-p’的设与不设,不能当做以下选现的代名词:’ether host {local-hw-add}’或’ether broadcast’(nt: 前者表示只匹配以太网地址为host 的包, 后者表示匹配以太网地址为广播地址的数据包).</li>
<li>-s<br>抓取数据包时默认抓取长度为68字节,-S 0指定可以抓到完整的数据包</li>
<li>-w<br>保存成pacp/cap文件，供Wireshark分析</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.androidtcpdump.com/" target="_blank" rel="external">Android tcpdump</a></li>
<li><a href="http://www.tcpdump.org/" target="_blank" rel="external">tcpdump.org</a></li>
<li><a href="https://www.wireshark.org/" target="_blank" rel="external">Wireshark</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android编译之模块编译]]></title>
      <url>http://hesstudio.cn/2016/07/08/android-build-4/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>Android中的各种模块，无论apk，可执行文件，或jar包等都可通过Build系统编译生成。这些模块的编译规则通过各个模块下的Android.mk来定义.</p>
</blockquote>
<h1 id="Android-mk分析"><a href="#Android-mk分析" class="headerlink" title="Android.mk分析"></a>Android.mk分析</h1><p>下面是Settings的Android.mk：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH:= <span class="variable">$(call my-dir)</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_JAVA_LIBRARIES := bouncycastle conscrypt telephony-common ims-common</span><br><span class="line">LOCAL_STATIC_JAVA_LIBRARIES := android-support-v4 android-support-v13 jsr305</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line">        $(call all-java-files-under, src) \</span><br><span class="line">        src/com/android/settings/EventLogTags.logtags</span><br><span class="line"></span><br><span class="line">LOCAL_RESOURCE_DIR := <span class="variable">$(LOCAL_PATH)</span>/res</span><br><span class="line"></span><br><span class="line">LOCAL_PACKAGE_NAME := Settings</span><br><span class="line">LOCAL_CERTIFICATE := platform</span><br><span class="line">LOCAL_PRIVILEGED_MODULE := true</span><br><span class="line"></span><br><span class="line">LOCAL_PROGUARD_FLAG_FILES := proguard.flags</span><br><span class="line"></span><br><span class="line">ifneq ($(INCREMENTAL_BUILDS),)</span><br><span class="line">    LOCAL_PROGUARD_ENABLED := disabled</span><br><span class="line">    LOCAL_JACK_ENABLED := incremental</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">include frameworks/opt/setupwizard/navigationbar/common.mk</span><br><span class="line">include frameworks/opt/setupwizard/library/common.mk</span><br><span class="line">include frameworks/base/packages/SettingsLib/common.mk</span><br><span class="line"></span><br><span class="line">include $(BUILD_PACKAGE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the following include to make our test apk.</span></span><br><span class="line">ifeq (,$(ONE_SHOT_MAKEFILE))</span><br><span class="line">include $(call all-makefiles-under,$(LOCAL_PATH))</span><br><span class="line">endif</span><br></pre></td></tr></table></figure></p>
<p>对于一个模块定义的Android.mk文件而言，开头几乎固定是：</p>
<blockquote>
<p>LOCAL_PATH:= $(call my-dir)<br>include $(CLEAR_VARS)</p>
</blockquote>
<p>第一行调用my-dir函数来获取当前的路径LOCAL_PATH，my-dir在build/core/definitions.mk中定义<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"><span class="comment">## Retrieve the directory of the current makefile</span></span><br><span class="line"><span class="comment">## Must be called before including any other makefile!!</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure out where we are.</span></span><br><span class="line">define my-dir</span><br><span class="line">$(strip \</span><br><span class="line">  $(eval LOCAL_MODULE_MAKEFILE := $$(lastword $$(MAKEFILE_LIST))) \</span><br><span class="line">  $(if $(filter $(BUILD_SYSTEM)/% $(OUT_DIR)/%,$(LOCAL_MODULE_MAKEFILE)), \</span><br><span class="line">    $(error my-dir must be called before including any other makefile.) \</span><br><span class="line">   , \</span><br><span class="line">    $(patsubst %/,%,$(dir $(LOCAL_MODULE_MAKEFILE))) \</span><br><span class="line">   ) \</span><br><span class="line"> )</span><br><span class="line">endef</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android-recovery]]></title>
      <url>http://hesstudio.cn/2016/06/30/android-recovery/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之签名]]></title>
      <url>http://hesstudio.cn/2016/06/29/android-sign/</url>
      <content type="html"><![CDATA[<p><a href="http://www.mobibrw.com/2015/2657" target="_blank" rel="external">http://www.mobibrw.com/2015/2657</a><br><a href="http://www.mobibrw.com/2015/2826" target="_blank" rel="external">http://www.mobibrw.com/2015/2826</a></p>
<p>$ jarsigner -verbose -keystore debug.keystore -signedjar Test.apk Monster_TmsService.apk  androiddebugkey<br>$ keytool -list  -v -keystore debug.keystore -storepass android</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04 FTP服务器搭建]]></title>
      <url>http://hesstudio.cn/2016/06/06/ftp/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>vsftpd 是“very secure FTP daemon”的缩写，它是一款在Linux发行版中最受推崇的FTP服务器程序，安全性是它的一个最大的特点.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>安装： <code>sudo apt-get install vsftpd</code>    </li>
<li>创建FTP账户： <code>sudo useradd -g ftp -s /sbin/nologin -d /home/ftp_directory ftpuser</code></li>
<li>设置账户密码： <code>sudo passwd ftpuser</code>   </li>
<li>重启服务： <code>sudo service vsftpd restart</code></li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li><p>备份<br>vsftpd的配置文件位于/etc/vsftpd.conf，修改之前先备份配置文件<br><code>sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.bak</code>    </p>
</li>
<li><p>目录限制<br>默认情况下，用户登陆FTP后，是可以切换到根目录以外的主机其他目录，为了加以限制，可做如下配置：<br><code>chroot_list_enable=YES</code><br><code>chroot_list_file=/etc/vsftpd.chroot_list</code><br>然后设置chroot_local_user，有以下二种设置<br>设置<code>chroot_local_user＝YES</code>表示/etc/vsftpd.chroot_list文件中用户不能chroot，其他用户可以<br>设置<code>chroot_local_user=NO</code>表示/etc/vsftpd.chroot_list中用户可以chroot，其他用户不行<br>创建vsftpd.chroot_list，写入需控制chroot的用户<br><code>sudo touch /etc/vsftpd.chroot_list</code>  </p>
</li>
<li><p>写权限<br><code>write_enable=YES</code><br>如果开启了chroot来控制用户路径，则用户不再具有该用户根目录的写的权限<br>需设置<code>allow_writeable_chroot=YES</code>  </p>
</li>
<li><p>530 Login incorrect<br>如果在登陆时返回530 Login incorrect.<br>修改<br><code>pam_service_name=vsftpd</code><br>为<br><code>pam_service_name=ftp</code>  </p>
</li>
<li><p>相关配置参数<br>（1）ftpd_banner=welcome to ftp service ：设置连接服务器后的欢迎信息<br>（2）idle_session_timeout=60 ：限制远程的客户机连接后，所建立的控制连接，在多长时间没有做任何的操作就会中断(秒)<br>（3）data_connection_timeout=120 ：设置客户机在进行数据传输时,设置空闲的数据中断时间<br>（4）accept_timeout=60 设置在多长时间后自动建立连接<br>（5）connect_timeout=60 设置数据连接的最大激活时间，多长时间断开，为别人所使用<br>（6）max_clients=200 指明服务器总的客户并发连接数为200<br>（7）max_per_ip=3 指明每个客户机的最大连接数为3<br>（8）local_max_rate=50000(50kbytes/sec) 本地用户最大传输速率限制<br>（9）anon_max_rate=30000匿名用户的最大传输速率限制<br>（10）pasv_min_port=端口<br>（11）pasv-max-prot=端口号 定义最大与最小端口，为0表示任意端口;为客户端连接指明端口<br>（12）listen_address=IP地址 设置ftp服务来监听的地址，客户端可以用哪个地址来连接<br>（13）listen_port=端口号 设置FTP工作的端口号，默认的为21<br>（14）chroot_local_user=YES 设置所有的本地用户可以chroot<br>（15）chroot_local_user=NO 设置指定用户能够chroot<br>（16）chroot_list_enable=YES<br>（17）chroot_list_file=/etc/vsftpd/chroot_list(只有/etc/vsftpd/chroot_list中的指定的用户才能执行 )<br>（18）local_root=path 无论哪个用户都能登录的用户，定义登录帐号的主目录, 若没有指定，则每一个用户则进入到个人用户主目录<br>（19）chroot_local_user=yes/no 是否锁定本地系统帐号用户主目录(所有);锁定后，用户只能访问用户的主目录/home/user,不能利用cd命令向上转;只能向下<br>（20）chroot_list_enable=yes/no 锁定指定文件中用户的主目录(部分),文件：/chroot_list_file=path 中指定;<br>（21）userlist_enable=YES/NO 是否加载用户列表文件<br>（22）userlist_deny=YES 表示上面所加载的用户是否允许拒绝登录<br>（23）userlist_file=/etc/vsftpd/user_list 列表文件   </p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jenkins环境搭建]]></title>
      <url>http://hesstudio.cn/2016/06/01/jenkins/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><code>wget -q -O - http://pkg.jenkins-ci.org/debian-stable/jenkins-ci.org.key | sudo apt-key add -</code></li>
<li><code>sudo sh -c &#39;echo deb http://pkg.jenkins-ci.org/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</code></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install jenkins</code></li>
</ol>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol>
<li>jenkins账户<br>jenkins安装后,会创建一个名为jenkins的服务账号(可通过<code>cat /etc/passwd</code>查看),该账号是没有home目录的,可通过<code>sudo su -s /bin/bash jenkins</code>切换到该账户</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://jenkins.io/index.html" target="_blank" rel="external">jenkins官网</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android_build-3]]></title>
      <url>http://hesstudio.cn/2016/05/31/android-build-3/</url>
      <content type="html"><![CDATA[<h1 id="image"><a href="#image" class="headerlink" title="image"></a>image</h1><ol>
<li>boot.img </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-sed]]></title>
      <url>http://hesstudio.cn/2016/05/30/linux-sed/</url>
      <content type="html"><![CDATA[<blockquote>
<p>^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。<br>$ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。<br>. 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。<br>* 匹配0个或多个字符，如：/<em>sed/匹配所有模板是一个或多个空格后紧跟sed的行。<br>[] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。<br>[^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。<br>(..) 匹配子串，保存匹配的字符，如s/(love)able/\1rs，loveable被替换成lovers。<br>&amp; 保存搜索字符用来替换其他字符，如s/love/<strong>&amp;</strong>/，love这成<em>*love</em></em>。<br>\&lt; 匹配单词的开始，如:/\ 匹配单词的结束，如/love>/匹配包含以love结尾的单词的行。<br> x{m} 重复字符x，m次，如：/0{5}/匹配包含5个0的行。<br> x{m,} 重复字符x，至少m次，如：/0{5,}/匹配至少有5个0的行。<br>  x{m,n} 重复字符x，至少m次，不多于n次，如：/0{5,10}/匹配5~10个0的行。    </p>
</blockquote>
<p>来自: <a href="http://man.linuxde.net/sed" target="_blank" rel="external">http://man.linuxde.net/sed</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Build系统之envsetup.sh]]></title>
      <url>http://hesstudio.cn/2016/05/24/android-build-2/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>Android Build系统是比较大的模块,为了能快速了解整个模块的组织架构,后面采用从入口开始分析的方式,一步步深入分析Android的Build系统.在编译AOSP前,首先运行的是envsetup.sh脚本,所以下面就从envsetup.sh脚本开始分析.</p>
</blockquote>
<h1 id="envsetup-sh的作用"><a href="#envsetup-sh的作用" class="headerlink" title="envsetup.sh的作用"></a>envsetup.sh的作用</h1><p>打开envsetup.sh脚本,可以看到该脚本定义了很多的shell命令,这些命令在envsetup.sh脚本执行后可以直接在shell环境中使用.忽略掉定义部分,envsetup.sh脚本实际执行的代码只有数行,如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 中间部分代码</span><br><span class="line"># add the default one here</span><br><span class="line">add_lunch_combo aosp_arm-eng</span><br><span class="line">add_lunch_combo aosp_arm64-eng</span><br><span class="line">add_lunch_combo aosp_mips-eng</span><br><span class="line">add_lunch_combo aosp_mips64-eng</span><br><span class="line">add_lunch_combo aosp_x86-eng</span><br><span class="line">add_lunch_combo aosp_x86_64-eng</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"># 结尾部分代码</span><br><span class="line">if [ &quot;x$SHELL&quot; != &quot;x/bin/bash&quot; ]; then</span><br><span class="line">    case `ps -o command -p $$` in</span><br><span class="line">        *bash*)</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            echo &quot;WARNING: Only bash is supported, use of other shell would lead to erroneous results&quot;</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Execute the contents of any erroneous files we can find.</span><br><span class="line">for f in `test -d device &amp;&amp; find -L device -maxdepth 4 -name &apos;vendorsetup.sh&apos; 2&gt; /dev/null | sort` \</span><br><span class="line">         `test -d vendor &amp;&amp; find -L vendor -maxdepth 4 -name &apos;vendorsetup.sh&apos; 2&gt; /dev/null | sort`</span><br><span class="line">do</span><br><span class="line">    echo &quot;including $f&quot;</span><br><span class="line">    . $f</span><br><span class="line">done</span><br><span class="line">unset f</span><br><span class="line"></span><br><span class="line">addcompletions</span><br></pre></td></tr></table></figure>
<p>中间部分有6条add_lunch_combo的调用,结尾部分首先会判断是否是bash环境,如果不是提示警告.接着查找device与vendor目录下的vendorsetup.sh脚本并执行.<br>先看add_lunch_combo的定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function add_lunch_combo()</span><br><span class="line">&#123;</span><br><span class="line">    local new_combo=$1</span><br><span class="line">    local c</span><br><span class="line">    for c in $&#123;LUNCH_MENU_CHOICES[@]&#125; ; do</span><br><span class="line">        if [ &quot;$new_combo&quot; = &quot;$c&quot; ] ; then</span><br><span class="line">            return</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    LUNCH_MENU_CHOICES=($&#123;LUNCH_MENU_CHOICES[@]&#125; $new_combo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到add_lunch_combo的作用就是将传递的$1参数加入到LUNCH_MENU_CHOICES数组中.<br>再看一下vendorsetup.sh的定义,以bullhead为例,device/lge/bullhead/vendorsetup.sh的内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_lunch_combo aosp_bullhead-userdebug</span><br></pre></td></tr></table></figure></p>
<p>可以发现整个envsetup.sh执行过后,除了定义了一些shell函数,剩下的工作就是利用add_lunch_combo将传递给其的参数加入到全局数组LUNCH_MENU_CHOICES中,到底LUNCH_MENU_CHOICES有什么作用呢?我们可以在终端执行一下lunch命令,输出如下:</p>
<blockquote>
<p>You’re building on Linux</p>
<p>Lunch menu… pick a combo:</p>
<pre><code>1. aosp_arm-eng
2. aosp_arm64-eng
3. aosp_mips-eng
4. aosp_mips64-eng
5. aosp_x86-eng
6. aosp_x86_64-eng
7. aosp_deb-userdebug
8. aosp_flo-userdebug
9. full_fugu-userdebug
10. aosp_fugu-userdebug
11. mini_emulator_arm64-userdebug
12. m_e_arm-userdebug
13. mini_emulator_mips-userdebug
14. mini_emulator_x86_64-userdebug
15. mini_emulator_x86-userdebug
16. aosp_flounder-userdebug
17. aosp_angler-userdebug
18. aosp_bullhead-userdebug
19. aosp_hammerhead-userdebug
20. aosp_hammerhead_fp-userdebug
21. aosp_shamu-userdebug
</code></pre><p>Which would you like? [aosp_arm-eng]</p>
</blockquote>
<p>实际上上面的这些选项就是通过add_lunch_combo加进去的.</p>
<p>envsetup.sh脚本中定义的很多shell命令,一些常用的如下.</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>lunch</td>
<td>lunch <product_name><build_variant> 指定当前编译产品</build_variant></product_name></td>
</tr>
</tbody>
</table>
<p>下面分析以下lunch命令的功能:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">function lunch()</span><br><span class="line">&#123;</span><br><span class="line">    local answer</span><br><span class="line"></span><br><span class="line">    if [ &quot;$1&quot; ] ; then</span><br><span class="line">        answer=$1</span><br><span class="line">    else</span><br><span class="line">        print_lunch_menu</span><br><span class="line">        echo -n &quot;Which would you like? [aosp_arm-eng] &quot;</span><br><span class="line">        read answer</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    local selection=</span><br><span class="line"></span><br><span class="line">    # 如果lunch后没跟参数,默认aosp_arm-eng</span><br><span class="line">    if [ -z &quot;$answer&quot; ]</span><br><span class="line">    then</span><br><span class="line">        selection=aosp_arm-eng</span><br><span class="line">    elif (echo -n $answer | grep -q -e &quot;^[0-9][0-9]*$&quot;)</span><br><span class="line">    then</span><br><span class="line">        if [ $answer -le $&#123;#LUNCH_MENU_CHOICES[@]&#125; ]</span><br><span class="line">        then</span><br><span class="line">            selection=$&#123;LUNCH_MENU_CHOICES[$(($answer-1))]&#125;</span><br><span class="line">        fi</span><br><span class="line">    elif (echo -n $answer | grep -q -e &quot;^[^\-][^\-]*-[^\-][^\-]*$&quot;)</span><br><span class="line">    then</span><br><span class="line">        selection=$answer</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if [ -z &quot;$selection&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;Invalid lunch combo: $answer&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    export TARGET_BUILD_APPS=</span><br><span class="line"></span><br><span class="line">    # 变量selection &quot;-&quot;分割的前部分赋值product</span><br><span class="line">    local product=$(echo -n $selection | sed -e &quot;s/-.*$//&quot;)</span><br><span class="line">    check_product $product</span><br><span class="line">    if [ $? -ne 0 ]</span><br><span class="line">    then</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;** Don&apos;t have a product spec for: &apos;$product&apos;&quot;</span><br><span class="line">        echo &quot;** Do you have the right repo manifest?&quot;</span><br><span class="line">        product=</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 变量selection &quot;-&quot;分割的后部分赋值variant</span><br><span class="line">    local variant=$(echo -n $selection | sed -e &quot;s/^[^\-]*-//&quot;)</span><br><span class="line">    check_variant $variant</span><br><span class="line">    if [ $? -ne 0 ]</span><br><span class="line">    then</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;** Invalid variant: &apos;$variant&apos;&quot;</span><br><span class="line">        echo &quot;** Must be one of $&#123;VARIANT_CHOICES[@]&#125;&quot;</span><br><span class="line">        variant=</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if [ -z &quot;$product&quot; -o -z &quot;$variant&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    export TARGET_PRODUCT=$product</span><br><span class="line">    export TARGET_BUILD_VARIANT=$variant</span><br><span class="line">    export TARGET_BUILD_TYPE=release</span><br><span class="line"></span><br><span class="line">    echo</span><br><span class="line"></span><br><span class="line">    # 设置更多环境变量</span><br><span class="line">    set_stuff_for_environment</span><br><span class="line">    # 打印设置的环境变量</span><br><span class="line">    printconfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>lunch aosp_bullhead-userdebug执行完毕后输出如下:   </p>
<blockquote>
<p>PLATFORM_VERSION_CODENAME=REL<br>PLATFORM_VERSION=6.0.1<br>TARGET_PRODUCT=aosp_bullhead<br>TARGET_BUILD_VARIANT=userdebug<br>TARGET_BUILD_TYPE=release<br>TARGET_BUILD_APPS=<br>TARGET_ARCH=arm64<br>TARGET_ARCH_VARIANT=armv8-a<br>TARGET_CPU_VARIANT=cortex-a53<br>TARGET_2ND_ARCH=arm<br>TARGET_2ND_ARCH_VARIANT=armv7-a-neon<br>TARGET_2ND_CPU_VARIANT=cortex-a7<br>HOST_ARCH=x86_64<br>HOST_OS=linux<br>HOST_OS_EXTRA=Linux-4.2.0-27-generic-x86_64-with-Ubuntu-14.04-trusty<br>HOST_BUILD_TYPE=release<br>BUILD_ID=MHC19J<br>OUT_DIR=out   </p>
</blockquote>
<table>
<thead>
<tr>
<th>环境变量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PLATFORM_VERSION_CODENAME</td>
<td>代表平台版本名称</td>
</tr>
<tr>
<td>PLATFORM_VERSION</td>
<td>表示平台版本号</td>
</tr>
<tr>
<td>TARGET_PRODUCT</td>
<td>表示产品名称</td>
</tr>
<tr>
<td>TARGET_BUILD_VARIANT</td>
<td>表示产品编译类型,可以是eng,userdebug,debug</td>
</tr>
<tr>
<td>TARGET_BUILD_TYPE</td>
<td>编译类型,可以是release或者debug,当为debug时,编译时会加入调试信息</td>
</tr>
<tr>
<td>TARGET_BUILD_APPS</td>
<td>编译android时为空,编译模块是为模块的路径</td>
</tr>
<tr>
<td>TARGET_ARCH</td>
<td>目标cpu架构</td>
</tr>
<tr>
<td>TARGET_ARCH_VARIANT</td>
<td>目标cpu架构版本</td>
</tr>
<tr>
<td>TARGET_CPU_VARIANT</td>
<td>目标cpu代号</td>
</tr>
<tr>
<td>TARGET_2ND_ARCH</td>
<td>目标第二cpu架构</td>
</tr>
<tr>
<td>TARGET_2ND_ARCH_VARIANT</td>
<td>目标第二cpu架构版本</td>
</tr>
<tr>
<td>TARGET_2ND_CPU_VARIANT</td>
<td>目标第二代cpu代号</td>
</tr>
<tr>
<td>HOST_ARCH</td>
<td>编译平台架构</td>
</tr>
<tr>
<td>HOST_OS</td>
<td>编译平台操作系统</td>
</tr>
<tr>
<td>HOST_OS_EXTRA</td>
<td>编译平台额外信息</td>
</tr>
<tr>
<td>HOST_BUILD_TYPE</td>
<td>编译平台编译类型</td>
</tr>
<tr>
<td>BUILD_ID</td>
<td>编译ID,会出现编译版本信息中</td>
</tr>
<tr>
<td>OUT_DIR</td>
<td>编译输出目录</td>
</tr>
</tbody>
</table>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git操作总结]]></title>
      <url>http://hesstudio.cn/2016/05/23/git-operate/</url>
      <content type="html"><![CDATA[<hr>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ol>
<li><p>配置<br>Usage: git config –global|–system|–local|–list<br><code>$ git config --global user.name [username]</code><br><code>$ git config --global user.email [email]</code><br><code>$ git config --global color.ui true</code></p>
</li>
<li><p>初始化版本库<br><code>$ git init</code></p>
</li>
<li><p>暂存<br><code>$ git add .</code><br><code>$ git add -u</code>   暂存已跟踪文件<br><code>$ git add -A</code>   跟踪文件并暂存<br><code>$ git add -p</code>   选择性暂存文件</p>
</li>
<li><p>状态查看<br><code>$ git status</code><br><code>$ git status -s</code> 精简显示   </p>
</li>
<li><p>比较<br>工作区与暂存区比较:<br><code>$ git diff</code><br>暂存区与HEAD(版本库当前分支)比较:<br><code>$ git diff --staged</code><br>工作,暂存区(未提交修改)与HEAD(版本库当前分支)比较:<br><code>$ git diff HEAD</code></p>
</li>
<li><p>撤销<br>撤销工作区修改:<br><code>$ git checkout .</code><br>该命令会将暂存区全部文件或指定文件替换工作区对应文件<br><code>$ git checkout -- &lt;file&gt;</code>   </p>
<p>撤销工作区,暂存区修改:<br><code>$ git checkout HEAD .</code><br><code>$ git checkout HEAD &lt;file&gt;</code><br>该命令会将HEAD所指向的master分支全部或指定文件替换到工作区,暂存区,</p>
<p>暂存区域撤销:<br><code>$ git reset HEAD</code></p>
</li>
<li><p>移除<br>暂存区移除:<br><code>$ git rm --cached &lt;file&gt;</code>  </p>
</li>
<li><p>日志查看<br><code>git log</code>   </p>
</li>
<li><p>其他</p>
</li>
<li>修改远程仓库url:<br><code>git remote set-url origin new-url</code></li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Build系统概述]]></title>
      <url>http://hesstudio.cn/2016/05/23/android-build-1/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>Android的Build系统是基于GNU make,shell,python构建的一套编译环境.通过该编译环境,不仅可以完成对目标系统的二进制文件,APK应用程序编译,链接,打包等工作,还可以生成目标文件系统镜像,各种配置文件等.Build系统维护着各模块间的依赖关系,以确保某个模块修改能引起所依赖的模块重新编译.另外Build系统还支持多架构(arm,mips,x86),多语言(asm,c/C++,java)和多目标(同时支持多个产品).</p>
</blockquote>
<h1 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h1><p>在完整获取AOSP源码后,可按以下流程来进行源码的编译.<br>1.初始化编译环境:<br><code>$ source build/envsetup.sh</code><br>2.选择编译目标:<br><code>$ lunch aosp_arm-eng</code><br>目标有三种编译类型可选,分别是user,userdebug,eng  </p>
<table>
<thead>
<tr>
<th>Buildtype</th>
<th>Use</th>
</tr>
</thead>
<tbody>
<tr>
<td>user</td>
<td>limited access; suited for production</td>
</tr>
<tr>
<td>userdebug</td>
<td>like “user” but with root access and debuggability; preferred for debugging</td>
</tr>
<tr>
<td>eng</td>
<td>development configuration with additional debugging tools</td>
</tr>
</tbody>
</table>
<p>3.编译代码:<br><code>$ make -j8</code><br>所有的编译目标都在out目录下生成.</p>
<h1 id="Build系统框架"><a href="#Build系统框架" class="headerlink" title="Build系统框架"></a>Build系统框架</h1><p>Build系统的主要逻辑都集中在make文件中,同时依靠脚本辅助.从大的方面讲,Android Build系统可以分为一下3大块.<br>1.Build核心文件:<br>位于build/core下的文件是Android Build系统的框架与核心,其他device,module的make都依赖<br>2.产品配置文件:<br>产品相关文件主要位于源码的device,vendor目录下,device下主要存放产品配置文件,verdor下主要存放一些硬件的HAL库.<br>3.模块make文件:<br>整个系统中，包含了大量的模块，每个模块都有一个Android.mk文件.Build系统会在整个源码树中扫描名称为“Android.mk”的文件并根据其中的内容来执行模块的编译</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.gnu.org/software/make/manual/html_node/index.html?cm_mc_uid=03725177062214639675956&amp;cm_mc_sid_50200000=1463985980" target="_blank" rel="external">GNU make</a><br>2.</li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[remastersys 备份/制作ubuntu副本]]></title>
      <url>http://hesstudio.cn/2016/05/18/remastersys-md/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Remastersys是由Tony Brijeski 发起的免费软件项目,可以把已安装的Ubuntu、Debian及其衍生版打包成一个可以用来安装的Live CD/DVD的iso文件.</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>环境: ubuntu14.04</li>
<li>步骤:<br><code>$ wget &quot;https://www.freesoftwareservers.com/wp-content/uploads/2015/12/remastersys-gui.zip&quot; &amp;&amp; unzip remastersys-gui.zip &amp;&amp; cd remastersys-gui</code><br><code>$ sudo dpkg -i *.deb</code><br>如果报错,强制执行安装<br><code>$ echo y | sudo apt-get install -f</code></li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>语法:<br>sudo remastersys backup|clean|dist [cdfs|iso] [filename.iso]<br>Backup：备份整个系统，包括你的个人数据和配置信息<br>Dist：打包整个系统，不包括你的个人数据和配置信息</p>
</li>
<li><p>用例:<br>sudo remastersys backup   (to make a livecd/dvd backup of your system)<br>sudo remastersys backup custom.iso (to make a livecd/dvd backup and call the iso custom.iso)<br>sudo remastersys clean    (to clean up temporary files of remastersys)<br>sudo remastersys dist     (to make a distributable livecd/dvd of your system)<br>sudo remastersys dist cdfs(to make a distributable livecd/dvd filesystem only)<br>sudo remastersys dist iso custom.iso(to make a distributable iso named custom.iso but onlyif the cdfs is already present)   </p>
</li>
<li><p>制作过程<br><code>$ sudo remastersys dist</code><br><img src="http://7xrz32.com1.z0.glb.clouddn.com/remastersys.png" alt="remastersys dist"><br>根据系统打包大小,执行时间在十几分钟到数小时,目标ISO文件生成在home/remastersys/remastersys/下<br>使用ubuntu系统自带工具制作U盘启动盘<br><img src="http://7xrz32.com1.z0.glb.clouddn.com/make.png" alt="make"><br>制作完成,清除生成文件可使用sudo remastersys clean</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://help.ubuntu.com/community/InstallCDCustomization?action=show&amp;redirect=InstallCDCustomizationHowTo" target="_blank" rel="external">https://help.ubuntu.com/community/InstallCDCustomization?action=show&amp;redirect=InstallCDCustomizationHowTo</a>  </li>
<li><a href="https://help.ubuntu.com/community/InstallCDCustomization/Scripts" target="_blank" rel="external">https://help.ubuntu.com/community/InstallCDCustomization/Scripts</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GIT+Gerrit+Jenkins环境搭建]]></title>
      <url>http://hesstudio.cn/2016/05/18/gerrit-md/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li><p>创建gerrit管理用户<br>$ sudo adduser gerrit<br>$ sudo passwd gerrit</p>
</li>
<li><p>配置java环境  </p>
</li>
<li>下载gerrit<br><a href="https://www.gerritcodereview.com/" target="_blank" rel="external">https://www.gerritcodereview.com/</a></li>
</ul>
<h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><ul>
<li>安装<br>$ su gerrit<br>$ cd ~<br>$ java -jar gerrit-2.12.2.war init -d review_site  </li>
<li>配置<br>$ vi review_site/etc/gerrit.config</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android OTA升级]]></title>
      <url>http://hesstudio.cn/2016/04/30/android-ota/</url>
      <content type="html"><![CDATA[<h1 id="OTA技术"><a href="#OTA技术" class="headerlink" title="OTA技术"></a>OTA技术</h1><h1 id="Android-设备分区"><a href="#Android-设备分区" class="headerlink" title="Android 设备分区"></a>Android 设备分区</h1><h1 id="OTA-升级流程"><a href="#OTA-升级流程" class="headerlink" title="OTA 升级流程"></a>OTA 升级流程</h1><p># </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之消息机制]]></title>
      <url>http://hesstudio.cn/2016/04/15/android-handler/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>消息驱动是一种进程/线程的运行模式,内部或者外部的消息事件被放到进程/线程的消息队列中按序处理是现在的操作系统普遍采用的机制.Android也是采用了消息驱动的机制来处理各种外部按键,触屏,系统Intent,广播事件等消息.</p>
<p>Android的消息队列是线程相关的,每启动一个线程,都可以在内部创建一个消息队列,然后在消息队列中不断循环检查是否有新的消息需要处理,如果有,则对该消息进行处理,如果没有,线程就进入休眠状态直到有新的消息需要处理为止.</p>
<hr>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>Android中与消息机制相关的类主要有Looper,MessageQueue,Handler,Message,相关的代码主要在以下文件中:  </p>
<blockquote>
<ul>
<li>frameworks/base/core/java/android/os/Looper.java</li>
<li>frameworks/base/core/java/android/os/Message.java</li>
<li>frameworks/base/core/java/android/os/MessageQueue.java</li>
<li>frameworks/base/core/java/android/os/Handler.java</li>
<li>frameworks/base/core/jni/android_os_MessageQueue.cpp</li>
<li>system/core/libutils/Looper.cpp</li>
</ul>
</blockquote>
<ul>
<li>Looper<br>Looper对象是用来创建消息队列并进入消息循环处理的.每个线程只能有一个Looper对象，同时对应着一个MessageQueue，发送到该线程的消息都将存放在该队列中，并由Looper循环处理。Android默认只为主线程)(UI线程)创建了Looper，所以当我们新建线程需要使用消息队列时必须手动创建Looper.</li>
<li>MessageQueue<br>MessageQueue即消息队列，由Looper创建管理,一个Looper对象对应一个MessageQueue对象.</li>
<li>Handler<br>Handler是消息的接收与处理者，Handler将Message添加到消息队列，同时也通过Handler的回调方法handleMessage()处理对应的消息.一个Handler对象只能关联一个Looper对象，但多个Handler对象可以关联到同一个Looper.默认情况下Handler会关联到实例化Handler线程的Lopper，也可以通过Handler的构造函数的Looper参数指定Handler关联到某个线程的Looper，即发送消息到某个指定线程并在该线程中回调Handler处理该消息.</li>
<li>Message<br>Message是消息的载体，Parcelable的派生类，通过其成员变量target关联到Handler对象.  </li>
</ul>
<p>它们之间关系如下图示：<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/handler-looper-messagequeue.jpg?raw=true" alt="Handler,Looper,MessageQueue之间的关系"></p>
<p>在代码中我们一般如下使用线程的消息机制:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Looper.prepare();</span><br><span class="line"></span><br><span class="line">          mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// process incoming messages here</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          Looper.loop();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="线程消息队列的创建"><a href="#线程消息队列的创建" class="headerlink" title="线程消息队列的创建"></a>线程消息队列的创建</h3><p>线程的消息队列通过Looper创建并维护的，主线程中调用Looper.prepareMainLooper(),其他子线程中调用Looper.prepare()来创建消息队列.一个线程多次调用prepareMainLooper()或prepare()将会抛出异常.</p>
<p>在介绍消息队列创建之前,首先了解一下Looper与MessageQueue,再看消息队列创建的流程.</p>
<ol>
<li><p>Looper类的主要成员变量与方法如下:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  </span><br><span class="line">      <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">      <span class="keyword">final</span> Thread mThread;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>sThreadLocal是静态成员变量,用于保存线程私有的Looper对象</li>
<li>sMainLooper是主线程的Looper对象.在prepareMainLooper()中赋值,可通过调用getMainLooper获取</li>
<li>mQueue即消息队列,在Looper构造函数中初始化</li>
<li>mThread即Looper所在的线程</li>
</ul>
</li>
<li><p>MessageQueue类的主要成员变量与方法如下:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mQuitAllowed;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">long</span> mPtr;</span><br><span class="line">      Message mMessages;</span><br><span class="line"></span><br><span class="line">      MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>mQuitAllowed代表是否允许退出消息循环,主线程中默认为false,子线程默认false</li>
<li>mPtr保存的是NativeMessageQueue的地址,通过该地址就可以找到java层MessageQueue所对应native的MessageQueue.</li>
<li>mMessages即消息队列,通过mMessages可以遍历整个消息队列</li>
</ul>
</li>
<li>消息队列的创建:<br>消息队列的创建从Looper.prepare()/Looper.prepareMainLooper()开始</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      prepare(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">          <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          sMainLooper = myLooper();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">      mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">      mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过调用prepare()或prepareMainLooper()创建Looper对象,然后保存到sThreadLocal中,sThreadLocal是模板类ThreadLocal<t>,它通过线程ID与对象关联的方式实现线程本地存储功能.这样放入sThreadLocal对象中的Looper对象就与创建它的线程关联起来了.所以可以从sThreadLocal中获取到保存的Looper对象:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p>
<p>主线程的Loopper对象保存在sMainLooper,可以通过getMainLooper获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">          <span class="keyword">return</span> sMainLooper;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建Looper同时会创建Looper关联的MessageQueue并赋值给成员变量mQueue,接下来再看new MessageQueue(quitAllowed)的过程:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;</span><br><span class="line">      mQuitAllowed = quitAllowed;</span><br><span class="line">      mPtr = nativeInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到,直接调用了nativeInit().这个JNI方法定义在android_os_MessageQueue.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">android_os_MessageQueue_nativeInit</span><span class="params">(JNIEnv* env, jclass clazz)</span> </span>&#123;</span><br><span class="line">      NativeMessageQueue* nativeMessageQueue = <span class="keyword">new</span> NativeMessageQueue();</span><br><span class="line">      <span class="keyword">if</span> (!nativeMessageQueue) &#123;</span><br><span class="line">          jniThrowRuntimeException(env, <span class="string">"Unable to allocate native queue"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      nativeMessageQueue-&gt;incStrong(env);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(nativeMessageQueue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>nativeInit()中首先创建了nativeMessageQueue,然后又将nativeMessageQueue的地址赋值给java层的mPtr,所以java层的MessageQueue就可以通过mPtr找到nativeMessageQueue了.<br>再看new NativeMessageQueue()过程,NativeMessageQueue的构造如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NativeMessageQueue::NativeMessageQueue() : mInCallback(<span class="literal">false</span>), mExceptionObj(<span class="literal">NULL</span>) &#123;</span><br><span class="line">      mLooper = Looper::getForThread();</span><br><span class="line">      <span class="keyword">if</span> (mLooper == <span class="literal">NULL</span>) &#123;</span><br><span class="line">          mLooper = <span class="keyword">new</span> Looper(<span class="literal">false</span>);</span><br><span class="line">          Looper::setForThread(mLooper);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它首先通过Looper::getForThread()判断当前线程是否已创建过Looper对象,如果没有则创建.注意,这个Looper对象是实现在JNI层的,与上面Java层的Looper是不一样的,不过也是对应的关系.JNI层的Looper对象的创建过程是在Looper.cpp中实现的.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Looper::Looper(<span class="keyword">bool</span> allowNonCallbacks) :</span><br><span class="line">        mAllowNonCallbacks(allowNonCallbacks), mSendingMessage(<span class="literal">false</span>),</span><br><span class="line">        mPolling(<span class="literal">false</span>), mEpollFd(<span class="number">-1</span>), mEpollRebuildRequired(<span class="literal">false</span>),</span><br><span class="line">        mNextRequestSeq(<span class="number">0</span>), mResponseIndex(<span class="number">0</span>), mNextMessageUptime(LLONG_MAX) &#123;</span><br><span class="line">    mWakeEventFd = eventfd(<span class="number">0</span>, EFD_NONBLOCK);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(mWakeEventFd &lt; <span class="number">0</span>, <span class="string">"Could not make wake event fd.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line">    rebuildEpollLocked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建eventfd并赋值给mWakeEventFd,在以前的Android版本上,这里创建的是pipe管道.eventfd是较新的API,被用作一个事件等待/响应,实现了线程之间事件通知.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::rebuildEpollLocked() &#123;</span><br><span class="line">    <span class="comment">// Close old epoll instance if we have one.</span></span><br><span class="line">    <span class="keyword">if</span> (mEpollFd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_CALLBACKS</span></span><br><span class="line">        ALOGD(<span class="string">"%p ~ rebuildEpollLocked - rebuilding epoll set"</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        close(mEpollFd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate the new epoll instance and register the wake pipe.</span></span><br><span class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(mEpollFd &lt; <span class="number">0</span>, <span class="string">"Could not create epoll instance.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> epoll_event eventItem;</span><br><span class="line">    <span class="built_in">memset</span>(&amp; eventItem, <span class="number">0</span>, <span class="keyword">sizeof</span>(epoll_event)); <span class="comment">// zero out unused members of data field union</span></span><br><span class="line">    eventItem.events = EPOLLIN;</span><br><span class="line">    eventItem.data.fd = mWakeEventFd;</span><br><span class="line">    <span class="keyword">int</span> result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeEventFd, &amp; eventItem);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result != <span class="number">0</span>, <span class="string">"Could not add wake event fd to epoll instance.  errno=%d"</span>,</span><br><span class="line">            errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mRequests.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> Request&amp; request = mRequests.valueAt(i);</span><br><span class="line">        <span class="keyword">struct</span> epoll_event eventItem;</span><br><span class="line">        request.initEventItem(&amp;eventItem);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> epollResult = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, request.fd, &amp; eventItem);</span><br><span class="line">        <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"Error adding epoll events for fd %d while rebuilding epoll set, errno=%d"</span>,</span><br><span class="line">                    request.fd, errno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>rebuildEpollLocked中通过epoll_create创建了一个epoll专用的文件描述符,EPOLL_SIZE_HINT表示mEpollFd上能监控的最大文件描述符数.最后调用epoll_ctl监控mWakeEventFd文件描述符的EPOLLIN事件，即当eventfd中有内容可读时，就唤醒当前正在等待的线程.  </p>
<p>C++层的这个Looper对象创建好了之后，就返回到JNI层的NativeMessageQueue的构造函数，再返回到Java层的消息队列MessageQueue的创建过程,最后从Looper的构造函数中返回.线程消息队列的创建过程也就此完成.</p>
<p>总结一下:  </p>
<ul>
<li>首先在Java层创建了一个Looper对象，然后创建MessageQueue对象mQueue,进入MessageQueue的创建过程</li>
<li>MessageQueue在JNI层创建了一个NativeMessageQueue对象,并将这个对象保存在MessageQueue的成员变量mPtr中</li>
<li>在JNI层，创建了NativeMessageQueue对象时,会创建了一个Looper对象，保存在JNI层的NativeMessageQueue对象的成员变量mLooper中，这个对象的作用是，当Java层的消息队列中没有消息时，就使Android应用程序线程进入等待状态，而当Java层的消息队列中来了新的消息后，就唤醒Android应用程序的线程来处理这个消息</li>
<li>关于java层与JNI层的Looper,MessageQueue对象可以这样理解,java层的Looper,MessageQueue主要实现了消息队列发送处理逻辑,而JNI层的主要实现是线程的等待/唤醒.在逻辑上他们还是一一对应的关系,只不过侧重点不同.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/Looper_MessageQueue.png?raw=true" alt="java与jni层Looper,MessageQueue关系"></li>
</ul>
<hr>
<h3 id="线程消息队列的循环"><a href="#线程消息队列的循环" class="headerlink" title="线程消息队列的循环"></a>线程消息队列的循环</h3><p>当线程消息队列创建完成后,即进入消息队列循环处理过程中,Android消息队列的循环通过Loop.Loop()来实现,整个流程如下图示.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/loop_message.jpg?raw=true" alt="消息队列循环流程"></p>
<p>下面具体来看具体分析<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">      <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">          <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          ...</span><br><span class="line">          msg.target.dispatchMessage(msg);</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>进入loop前,首先通过myLooper()拿到前面创建的Looper对象,如果为null将会抛出异常,这也就是为什么必须在Looper.loop()之前调用Looper.prepare()或者Looper.prepareMainLooper()的原因.接下来通过me.mQueue拿到MessageQueue对象,而后进入到无尽循环处理中.在循环中通过queue.next()从队列中取消息,再调用msg.target.dispatchMessage(msg)处理.下面看一下queue.next()流程.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">      <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">              Binder.flushPendingCommands();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">              Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">              Message msg = mMessages;</span><br><span class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  do &#123;</span><br><span class="line">                      prevMsg = msg;</span><br><span class="line">                      msg = msg.next;</span><br><span class="line">                  &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                      nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                      <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                          prevMsg.next = msg.next;</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          mMessages = msg.next;</span><br><span class="line">                      &#125;</span><br><span class="line">                      msg.next = <span class="keyword">null</span>;</span><br><span class="line">                      <span class="keyword">if</span> (<span class="keyword">false</span>) Log.v(<span class="string">"MessageQueue"</span>, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                      <span class="keyword">return</span> msg;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                  dispose();</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                      &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                  pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">              &#125;</span><br><span class="line">              mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">              <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">              mPendingIdleHandlers[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  keep = idler.queueIdle();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                  Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                      mIdleHandlers.remove(idler);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">          nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>先看一下开始定义的2个变量的含义,pendingIdleHandlerCount表示消息队列空闲消息处理器(IdleHandler)的个数,nextPollTimeoutMillis表示没有消息处理时,线程需睡眠等待的时间.nativePollOnce将会睡眠等待nextPollTimeoutMillis时间.从nativePollOnce返回后,再从消息队列中取消息,如果没有任何消息,那么nextPollTimeoutMillis赋值为-1,表示下一次nativePollOnce无限制等待直到其他线程把它唤醒.如果取到消息,比较消息处理的时间与当前时间,如果消息处理的时间未到(now &lt; msg.when),那么计算nextPollTimeoutMillis,等下一次时间到时再处理.如果消息处理时间已到,那么取出消息返回到Looperde的loop中处理.另外如果当前没有消息处理时,会回调注册的IdleHandler.<br>下面继续分析nativePollOnce.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativePollOnce</span><span class="params">(JNIEnv* env, jobject obj,</span><br><span class="line">        jlong ptr, jint timeoutMillis)</span> </span>&#123;</span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">    nativeMessageQueue-&gt;pollOnce(env, obj, timeoutMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NativeMessageQueue::pollOnce(JNIEnv* env, jobject pollObj, <span class="keyword">int</span> timeoutMillis) &#123;</span><br><span class="line">    mPollEnv = env;</span><br><span class="line">    mPollObj = pollObj;</span><br><span class="line">    mLooper-&gt;pollOnce(timeoutMillis);</span><br><span class="line">    mPollObj = <span class="literal">NULL</span>;</span><br><span class="line">    mPollEnv = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mExceptionObj) &#123;</span><br><span class="line">        env-&gt;Throw(mExceptionObj);</span><br><span class="line">        env-&gt;DeleteLocalRef(mExceptionObj);</span><br><span class="line">        mExceptionObj = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终nativePollOnce调用的JNI层Looper的pollOnce<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Looper::pollOnce(<span class="keyword">int</span> timeoutMillis, <span class="keyword">int</span>* outFd, <span class="keyword">int</span>* outEvents, <span class="keyword">void</span>** outData) &#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = pollInner(timeoutMillis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在pollOnce中不断的循环调用pollInner来检查线程是否有新消息需要处理.如果有新消息处理或者timeoutMillis时间到,则返回到java层MessageQueue的next()继续执行.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Looper::pollInner(<span class="keyword">int</span> timeoutMillis) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> result = POLL_WAKE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> epoll_event eventItems[EPOLL_MAX_EVENTS];</span><br><span class="line">    <span class="keyword">int</span> eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fd = eventItems[i].data.fd;</span><br><span class="line">        <span class="keyword">uint32_t</span> epollEvents = eventItems[i].events;</span><br><span class="line">        <span class="keyword">if</span> (fd == mWakeEventFd) &#123;</span><br><span class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</span><br><span class="line">                awoken();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ALOGW(<span class="string">"Ignoring unexpected epoll events 0x%x on wake event fd."</span>, epollEvents);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>epoll_wait会监听前面创建的epoll实例的文件描述符上的IO读写事件,如果文件描述上没有IO事件出现,那么则等待timeoutMillis延时,检测到EPOLLIN事件即文件描述符上发生了写事件,随后调用awoken读出数据,以便接收新的数据.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::awoken() &#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> counter;</span><br><span class="line">    TEMP_FAILURE_RETRY(read(mWakeEventFd, &amp;counter, <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在awoken中读出数据.然后一步步返回到java层的MessageQueue继续消息处理.</p>
<hr>
<h3 id="线程消息的发送"><a href="#线程消息的发送" class="headerlink" title="线程消息的发送"></a>线程消息的发送</h3><p>消息的发送是通过Handler来执行的,下面我们从new Handler()开始,一步步分析消息的发送过程<br>首先看一下Handler类的主要数据成员与方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">      <span class="keyword">final</span> Looper mLooper;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      ...</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtFrontOfQueue</span><span class="params">(Runnable r)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, <span class="keyword">long</span> uptimeMillis)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>mQueue handler对应的MessageQueue对象,通过handler发送的消息都将插入到mQueue队列中</li>
<li>mLooper handler对应的Looper对象,如果创建Handler前没有实例化Looper对象将抛出异常.</li>
</ul>
<p>Handler是与Looper对象相关联的,我们创建的Handler对象都会关联到某一Looper,默认情况下,Handler会关联到创建Handler对象所在线程的Looper对象,也可通过Handler的构造函数来指定关联到的Looper.Handler发送消息有二类接口,post类与send类,一般send类用来发送传统带消息ID的消息，post类用来发送带消息处理方法的消息.</p>
<p>下面来看消息发送的具体流程<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/send_message.jpg?raw=true" alt="消息发送流程"><br>Handler或Post类方法最终都会调用enqueueMessage将消息发送到消息队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">      msg.target = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">          msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Message的成员变量target赋值为this，即关联到handler.然后继续调用MessageQueue的enqueueMessage方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/// M: Add message protect mechanism @&#123;</span></span><br><span class="line">      <span class="keyword">if</span> (msg.hasRecycle) &#123;</span><br><span class="line">          Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"Warning: message has been recycled. msg="</span> + msg);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/// Add message protect mechanism @&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">              IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                      msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">              Log.w(<span class="string">"MessageQueue"</span>, e.getMessage(), e);</span><br><span class="line">              msg.recycle();</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          msg.markInUse();</span><br><span class="line">          msg.when = when;</span><br><span class="line">          Message p = mMessages;</span><br><span class="line">          <span class="keyword">boolean</span> needWake;</span><br><span class="line">          <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">              <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">              msg.next = p;</span><br><span class="line">              mMessages = msg;</span><br><span class="line">              needWake = mBlocked;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">              <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">              <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">              needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">              Message prev;</span><br><span class="line">              <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                  prev = p;</span><br><span class="line">                  p = p.next;</span><br><span class="line">                  <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                      needWake = <span class="keyword">false</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">              prev.next = msg;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">          <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">              nativeWake(mPtr);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MessageQueue中的enqueueMessage主要工作是将message插入到队列，然后根据情况判断是否应该调用nativeWake唤醒目标线程.当前队列为空或者插入消息处理时间延时为0或者处理时间小于队头处理时间时，消息被插入到头部，否则按时间遍历插入到对应位置，并设置needWake标志，needWake是根据mBlocked来判断的，mBlocked记录了当前线程是否处于睡眠状态，如果消息插入队头且线程在睡眠中，neeWake为true，调用nativeWake唤醒目标线程.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativeWake</span><span class="params">(JNIEnv* env, jclass clazz, jlong ptr)</span> </span>&#123;</span><br><span class="line">      NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">      <span class="keyword">return</span> nativeMessageQueue-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NativeMessageQueue::wake() &#123;</span><br><span class="line">      mLooper-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::wake() &#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> inc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> nWrite = TEMP_FAILURE_RETRY(write(mWakeEventFd, &amp;inc, <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)));</span><br><span class="line">    <span class="keyword">if</span> (nWrite != <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EAGAIN) &#123;</span><br><span class="line">            ALOGW(<span class="string">"Could not write wake signal, errno=%d"</span>, errno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nativeWake最终会调用到jni层的Looper对象的wake方法中,Looper wake方法的实现非常简单,即向mWakeEventFd写入一个uint64_t,这样目标线程就会因为mWakeEventFd发生的IO事件而唤醒.消息的发送流程就此结束.</p>
<hr>
<h3 id="线程消息的处理"><a href="#线程消息的处理" class="headerlink" title="线程消息的处理"></a>线程消息的处理</h3><p>从前面的分析可以知道,当线程没有消息需要处理时,会在c++层Looper对象的pollInner中进入睡眠等待,当有新消息唤醒该目标线程时或这延时时间到,执行流程将沿着pollInner调用路径一直返回,直到java层Looper类的loop.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/hand_message.jpg?raw=true" alt="消息处理流程"><br>loop中将调用msg.target.dispatchMessage(msg)处理消息,这里的msg.target就是上面enqueueMessage中所赋值的handler,即进入handler的dispatchMessage处理消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">          handleCallback(msg);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          handleMessage(msg);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>dispatchMessage进行消息处理,先检查是否有设置msg.callback,如果有则执行msg.callback处理消息,如果没有则继续判断mCallback的执行,最后才是handleMessage处理.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android FAQ]]></title>
      <url>http://hesstudio.cn/2016/03/27/android-faq/</url>
      <content type="html"><![CDATA[<h1 id="如何引用Hide-API"><a href="#如何引用Hide-API" class="headerlink" title="如何引用Hide API"></a>如何引用Hide API</h1><ol>
<li>反射</li>
<li>替换class文件.找到源码编译出的对应文件的class，替换Android SDK中android.jar对应的class文件</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之开发环境搭建]]></title>
      <url>http://hesstudio.cn/2016/03/20/android-env/</url>
      <content type="html"><![CDATA[<hr>
<h1 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h1><p>Google推荐使用64位Ubuntu操作系统开发Android.针对不同的Android版本,推荐使用相对应的Ubuntu版本.   </p>
<ul>
<li>Android 6.0 (Marshmallow) - AOSP master: Ubuntu 14.04 (Trusty)    </li>
<li>Android 2.3.x (Gingerbread) - Android 5.x (Lollipop): Ubuntu 12.04 (Precise)   </li>
<li>Android 1.5 (Cupcake) - Android 2.2.x (Froyo): Ubuntu 10.04 (Lucid)   </li>
</ul>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p><strong> 安装jdk: </strong><br>Android 5.0版本前使用的是Oracle的JDK,5.0及以后的版本使用的是OpenJDK.</p>
<ul>
<li>The master branch of Android in AOSP: Ubuntu - OpenJDK 8</li>
<li>Android 5.x (Lollipop) - Android 6.0 (Marshmallow): OpenJDK 7</li>
<li>Android 2.3.x (Gingerbread) - Android 4.4.x (KitKat):Java JDK 6</li>
<li>Android 1.5 (Cupcake) - Android 2.2.x (Froyo): Java JDK 5   </li>
</ul>
<p>安装OpenJdk8<br>Ubuntu15.04及以上版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo a pt-get update</span><br><span class="line">$ sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></p>
<p>Ubuntu14.04:<br>下载<a href="http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre-headless_8u45-b14-1_amd64.deb" target="_blank" rel="external">openjdk-8-jre-headless_8u45-b14-1_amd64.deb</a>安装包.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg -i &#123;downloaded.deb file&#125;   </span><br><span class="line">$ sudo apt-get -f install</span><br></pre></td></tr></table></figure></p>
<p>对于安装的多个版本JDK,可使用以下命令指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-alternatives --config java   </span><br><span class="line">$ sudo update-alternatives --config javac</span><br></pre></td></tr></table></figure></p>
<p><strong> 安装编译相关开发包: </strong><br>Ubuntu14.04:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git-core gnupg flex bison gperf build-essential \</span><br><span class="line">  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \</span><br><span class="line">  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \</span><br><span class="line">  libgl1-mesa-dev libxml2-utils xsltproc unzip</span><br></pre></td></tr></table></figure></p>
<p>Ubuntu12.02:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git gnupg flex bison gperf build-essential \</span><br><span class="line">  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \</span><br><span class="line">  libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \</span><br><span class="line">  libgl1-mesa-dev g++-multilib mingw32 tofrodos \</span><br><span class="line">  python-markdown libxml2-utils xsltproc zlib1g-dev:i386</span><br><span class="line">$ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so</span><br></pre></td></tr></table></figure></p>
<p><strong> 开发工具安装: </strong>  </p>
<ol>
<li>下载<a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">Android studio</a></li>
<li>安装Android SDK</li>
</ol>
<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p><strong> Android源码下载: </strong>  </p>
<table>
<thead>
<tr>
<th>Code name</th>
<th>Version</th>
<th>API level</th>
</tr>
</thead>
<tbody>
<tr>
<td>Marshmallow</td>
<td>6.0</td>
<td>API level 23</td>
</tr>
<tr>
<td>Lollipop</td>
<td>5.1</td>
<td>API level 22</td>
</tr>
<tr>
<td>Lollipop</td>
<td>5.0</td>
<td>API level 21</td>
</tr>
<tr>
<td>KitKat</td>
<td>4.4 - 4.4.4</td>
<td>API level 19</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.3.x</td>
<td>API level 18</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.2.x</td>
<td>API level 17</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.1.x</td>
<td>API level 16</td>
</tr>
<tr>
<td>Ice Cream Sandwich</td>
<td>4.0.3 - 4.0.4</td>
<td>API level 15, NDK 8</td>
</tr>
<tr>
<td>Ice Cream Sandwich</td>
<td>4.0.1 - 4.0.2</td>
<td>API level 14, NDK 7</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.2.x</td>
<td>API level 13</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.1</td>
<td>API level 12, NDK 6</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.0</td>
<td>API level 11</td>
</tr>
<tr>
<td>Gingerbread</td>
<td>2.3.3 - 2.3.7</td>
<td>API level 10</td>
</tr>
<tr>
<td>Gingerbread</td>
<td>2.3 - 2.3.2</td>
<td>API level 9, NDK 5</td>
</tr>
<tr>
<td>Froyo</td>
<td>2.2.x</td>
<td>API level 8, NDK 4</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.1</td>
<td>API level 7, NDK 3</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.0.1</td>
<td>API level 6</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.0</td>
<td>API level 5</td>
</tr>
<tr>
<td>Donut</td>
<td>1.6</td>
<td>API level 4, NDK 2</td>
</tr>
<tr>
<td>Cupcake</td>
<td>1.5</td>
<td>API level 3, NDK 1</td>
</tr>
<tr>
<td>(no code name)</td>
<td>1.1</td>
<td>API level 2</td>
</tr>
<tr>
<td>(no code name)</td>
<td>1.0</td>
<td>API level 1</td>
</tr>
</tbody>
</table>
<p>安装repo<br>repo是Google开发的一个脚本,在git上进行封装,用来简化git下载Android源码的过程.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/bin    </span><br><span class="line">$ PATH=~/bin:$PATH   </span><br><span class="line">$ curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo   </span><br><span class="line">$ chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure></p>
<p>repo下载源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">$ mkdir WORKING_DIRECTORY</span><br><span class="line">$ cd WORKING_DIRECTORY</span><br></pre></td></tr></table></figure></p>
<p>默认下载master分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo init -u https://android.googlesource.com/platform/manifest</span><br></pre></td></tr></table></figure></p>
<p>或者指定分支下载,<a href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds" target="_blank" rel="external">查看branch list</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo init -u https://android.googlesource.com/platform/manifest -b android-6.0.1_r22</span><br></pre></td></tr></table></figure></p>
<p>下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo sync -j8</span><br></pre></td></tr></table></figure></p>
<p><strong> Kernel源码下载:   </strong><br>虽然Android源码是通用的,但是每个平台kernel源码都有较大的差异,同时Android源码跟Kernel源码也是分开管理的.kernel源码可以通过一下命令获取.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://android.googlesource.com/kernel/common.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/hikey-linaro</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/x86_64.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/exynos.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/goldfish.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/msm.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/omap.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/samsung.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/tegra.git</span><br></pre></td></tr></table></figure></p>
<p>其中goldfish.git是qemu虚拟机的内核代码库.下面是Google设备型号,kernel位置及源码仓库对应表  </p>
<table>
<thead>
<tr>
<th>Device</th>
<th>Binarry location</th>
<th>Source location</th>
<th>Build configuration</th>
</tr>
</thead>
<tbody>
<tr>
<td>hikey</td>
<td>device/linaro/hikey-kernel</td>
<td>kernel/hikey-linaro</td>
<td>hikey_defconfig</td>
</tr>
<tr>
<td>angler</td>
<td>device/huawei/angler-kernel</td>
<td>kernel/msm</td>
<td>angler_defconfig</td>
</tr>
<tr>
<td>bullhead</td>
<td>device/lge/bullhead-kernel</td>
<td>kernel/msm</td>
<td>bullhead_defconfig</td>
</tr>
<tr>
<td>shamu</td>
<td>device/moto/shamu-kernel</td>
<td>kernel/msm</td>
<td>shamu_defconfig</td>
</tr>
<tr>
<td>fugu</td>
<td>device/asus/fugu-kernel</td>
<td>kernel/x86_64</td>
<td>fugu_defconfig</td>
</tr>
<tr>
<td>volantis</td>
<td>device/htc/flounder-kernel</td>
<td>kernel/tegra</td>
<td>flounder_defconfig</td>
</tr>
<tr>
<td>hammerhead</td>
<td>device/lge/hammerhead-kernel</td>
<td>kernel/msm</td>
<td>hammerhead_defconfig</td>
</tr>
<tr>
<td>flo</td>
<td>device/asus/flo-kernel/kernel</td>
<td>kernel/msm</td>
<td>flo_defconfig</td>
</tr>
<tr>
<td>deb</td>
<td>device/asus/flo-kernel/kernel</td>
<td>kernel/msm</td>
<td>flo_defconfig</td>
</tr>
<tr>
<td>manta</td>
<td>device/samsung/manta/kernel</td>
<td>kernel/exynos</td>
<td>manta_defconfig</td>
</tr>
<tr>
<td>mako</td>
<td>device/lge/mako-kernel/kernel</td>
<td>kernel/msm</td>
<td>mako_defconfig</td>
</tr>
<tr>
<td>grouper</td>
<td>device/asus/grouper/kernel</td>
<td>kernel/tegra</td>
<td>tegra3_android_defconfig</td>
</tr>
<tr>
<td>tilapia</td>
<td>device/asus/grouper/kernel</td>
<td>kernel/tegra</td>
<td>tegra3_android_defconfig</td>
</tr>
<tr>
<td>maguro</td>
<td>device/samsung/tuna/kernel</td>
<td>kernel/omap</td>
<td>tuna_defconfig</td>
</tr>
<tr>
<td>toro</td>
<td>device/samsung/tuna/kernel</td>
<td>kernel/omap</td>
<td>tuna_defconfig</td>
</tr>
<tr>
<td>panda</td>
<td>device/ti/panda/kernel</td>
<td>kernel/omap</td>
<td>panda_defconfig</td>
</tr>
<tr>
<td>stingray</td>
<td>device/moto/wingray/kernel</td>
<td>kernel/tegra</td>
<td>stingray_defconfig</td>
</tr>
<tr>
<td>wingray</td>
<td>device/moto/wingray/kernel</td>
<td>kernel/tegra</td>
<td>stingray_defconfig</td>
</tr>
<tr>
<td>crespo</td>
<td>device/samsung/crespo/kernel</td>
<td>kernel/samsung</td>
<td>herring_defconfig</td>
</tr>
<tr>
<td>crespo4g</td>
<td>device/samsung/crespo/kernel</td>
<td>kernel/samsung</td>
<td>herring_defconfig</td>
</tr>
</tbody>
</table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://source.android.com/source/index.html" target="_blank" rel="external">The Android Source Code</a></li>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a></li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UML Sequence Diagram]]></title>
      <url>http://hesstudio.cn/2015/06/30/uml-sequence-diagram/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[os_process_thread]]></title>
      <url>http://hesstudio.cn/2014/10/30/os-process-thread/</url>
      <content type="html"><![CDATA[<p>进程/线程之间区别</p>
<p>进程同步</p>
<p>java api</p>
]]></content>
    </entry>
    
  
  
</search>
