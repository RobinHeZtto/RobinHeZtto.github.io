<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android之Gradle]]></title>
      <url>http://hesstudio.cn/2016/08/06/android-tools-build-gradle/</url>
      <content type="html"><![CDATA[<h1 id="Building-the-Android-Gradle-Plugin"><a href="#Building-the-Android-Gradle-Plugin" class="headerlink" title="Building the Android Gradle Plugin"></a>Building the Android Gradle Plugin</h1><p><a href="http://tools.android.com/build" target="_blank" rel="external">http://tools.android.com/build</a></p>
<p>$ mkdir studio-master-dev<br>$ cd studio-master-dev<br>$ repo init -u <a href="https://android.googlesource.com/platform/manifest" target="_blank" rel="external">https://android.googlesource.com/platform/manifest</a> -b studio-master-dev<br>$ repo sync</p>
<p>sudo add-apt-repository ppa:openjdk-r/ppa<br>sudo apt-get update<br>sudo apt-get install openjdk-8-jdk<br>sudo update-alternatives –config java<br>sudo update-alternatives –config javac</p>
<p>$ cd tools<br>$ ./gradlew init<br>$ ./gradlew assemble<br>$ ./gradlew publishLocal</p>
<p>关于String 定义msgid后字符串重名的问题，由于不是标准Application做法，gradle不支持<br>代码见sdk-common/src/main/java/com/android/ide/common/res2/ValueResourceParser2.java<br>checkDuplicate() -&gt;<br>else if (set.contains(name) &amp;&amp; resource.getType() != ResourceType.PUBLIC) {<br>                System.out.println(“checkDuplicate ——&gt; “ + resource.getType());<br>                throw MergingException.withMessage(<br>                        “Found item %s/%s more than one time”,<br>                        resource.getType().getDisplayName(), name).withFile(from).build();<br>            }</p>
<p>关于Gradle vs. Make for AOSP build，参考<a href="https://groups.google.com/forum/#!topic/android-building/dxP0tp0e1MI" target="_blank" rel="external">https://groups.google.com/forum/#!topic/android-building/dxP0tp0e1MI</a>　<br>关于Gradle参考<a href="http://tools.android.com/tech-docs" target="_blank" rel="external">http://tools.android.com/tech-docs</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 14.04 Nexus Maven私服搭建]]></title>
      <url>http://hesstudio.cn/2016/08/03/ubuntu-nexus-maven/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Maven是Apache基于POM(project object model)一个项目管理工具.Maven能够管理项目的构建build,reporting和documentation.</p>
<p>Nexus是一个强大的Maven仓库管理器，它极大地简化了内部仓库的维护和外部仓库的访问，可以在局域网搭建一个maven私服,用来部署第三方公共构件或者作为远程仓库在该局域网的一个代理.</p>
</blockquote>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><ol>
<li><p>下载<br>我们使用Nexus OSS开源版开源版进行环境搭建，<a href="http://www.sonatype.com/download-oss-sonatype" target="_blank" rel="external">官网下载</a> All platform的版本<a href="https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.13.0-01-bundle.tar.gz" target="_blank" rel="external">nexus-2.13.0-01-bundle.tar.gz</a></p>
</li>
<li><p>安装<br><code>$ sudo cp nexus-2.13.0-01-bundle.tar.gz /usr/local</code><br><code>$ cd /usr/local</code><br><code>$ sudo tar -zxvf nexus-2.13.0-01-bundle.tar.gz</code><br><code>$ sudo ln -s nexus-2.13.0-01 nexus</code><br><code>$ sudo nexus/bin/nexus</code><br>输出：<code>Usage: nexus/bin/nexus { console | start | stop | restart | status | dump }</code>　即表示安装成功<br><code>$ sudo vim bin/nexus</code> 修改<code>#RUN_AS_USER=</code>为<code>RUN_AS_USER=root</code><br><code>$ sudo bin/nexus start</code>启动nexus<br>浏览器登陆<a href="http://localhost:8081/nexus，默认用户名:admin，密码:admin123" target="_blank" rel="external">http://localhost:8081/nexus，默认用户名:admin，密码:admin123</a><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/ubuntu/nexus-welcome.png?raw=true" alt="nexus welcome"></p>
</li>
<li>设置开机启动：<br><code>$ sudo cp /usr/local/nexus/bin/nexus /etc/init.d/</code><br><code>$ sudo vim /etc/init.d/nexus</code><br>设置<br><code>NEXUS_HOME=&quot;/usr/local/nexus&quot;</code><br><code>RUN_AS_USER=root</code><br><code>PIDDIR=&quot;/var/run&quot;</code></li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li>Repositories配置</li>
</ol>
<p><a href="http://blog.csdn.net/l2show/article/details/48653949" target="_blank" rel="external">http://blog.csdn.net/l2show/article/details/48653949</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之抓包]]></title>
      <url>http://hesstudio.cn/2016/07/14/android-tcpdump/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>在实际开发中，如果需要在Android平台上进行网络数据包的抓取，那么使用tcpdump是非常方便的.通过tcpdump抓取数据包，pull到本地后可以利用Wireshark非常直观地分析数据包</p>
</blockquote>
<hr>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>Root Android设备</li>
<li>下载安装<a href="https://www.wireshark.org/#download" target="_blank" rel="external">Wireshark</a></li>
<li>下载<a href="http://www.androidtcpdump.com/android-tcpdump/downloads" target="_blank" rel="external">Android tcpdump binary文件</a></li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li><code>adb root</code></li>
<li><code>adb remount</code></li>
<li><code>adb push tcpdump /system/bin</code></li>
<li><code>chmod 6755 /system/bin/tcpdump</code></li>
<li><code>tcpdump -i any -p -s 0 -w /sdcard/capture.pcap</code></li>
<li><code>adb pull /sdcard/capture.pcap</code></li>
<li>Wireshark分析capture.pcap数据包</li>
</ol>
<h1 id="tcpdump参数"><a href="#tcpdump参数" class="headerlink" title="tcpdump参数"></a>tcpdump参数</h1><ol>
<li>-i<br>监视指定网络接口的数据包，可通过tcpdump -D查看可抓包的网卡</li>
<li>-p<br>一般情况下,把网络接口设置为非’混杂’模式.但必须注意,在特殊情况下此网络接口还是会以’混杂’模式来工作；从而,’-p’的设与不设,不能当做以下选现的代名词:’ether host {local-hw-add}’或’ether broadcast’(nt: 前者表示只匹配以太网地址为host 的包, 后者表示匹配以太网地址为广播地址的数据包).</li>
<li>-s<br>抓取数据包时默认抓取长度为68字节,-S 0指定可以抓到完整的数据包</li>
<li>-w<br>保存成pacp/cap文件，供Wireshark分析</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.androidtcpdump.com/" target="_blank" rel="external">Android tcpdump</a></li>
<li><a href="http://www.tcpdump.org/" target="_blank" rel="external">tcpdump.org</a></li>
<li><a href="https://www.wireshark.org/" target="_blank" rel="external">Wireshark</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android编译之模块编译]]></title>
      <url>http://hesstudio.cn/2016/07/08/android-build-4/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>Android中的各种模块，无论apk，可执行文件，或jar包等都可通过Build系统编译生成。这些模块的编译规则通过各个模块下的Android.mk来定义.</p>
</blockquote>
<h1 id="Android-mk分析"><a href="#Android-mk分析" class="headerlink" title="Android.mk分析"></a>Android.mk分析</h1><p>下面是Settings的Android.mk：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH:= <span class="variable">$(call my-dir)</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_JAVA_LIBRARIES := bouncycastle conscrypt telephony-common ims-common</span><br><span class="line">LOCAL_STATIC_JAVA_LIBRARIES := android-support-v4 android-support-v13 jsr305</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line">        $(call all-java-files-under, src) \</span><br><span class="line">        src/com/android/settings/EventLogTags.logtags</span><br><span class="line"></span><br><span class="line">LOCAL_RESOURCE_DIR := <span class="variable">$(LOCAL_PATH)</span>/res</span><br><span class="line"></span><br><span class="line">LOCAL_PACKAGE_NAME := Settings</span><br><span class="line">LOCAL_CERTIFICATE := platform</span><br><span class="line">LOCAL_PRIVILEGED_MODULE := true</span><br><span class="line"></span><br><span class="line">LOCAL_PROGUARD_FLAG_FILES := proguard.flags</span><br><span class="line"></span><br><span class="line">ifneq ($(INCREMENTAL_BUILDS),)</span><br><span class="line">    LOCAL_PROGUARD_ENABLED := disabled</span><br><span class="line">    LOCAL_JACK_ENABLED := incremental</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">include frameworks/opt/setupwizard/navigationbar/common.mk</span><br><span class="line">include frameworks/opt/setupwizard/library/common.mk</span><br><span class="line">include frameworks/base/packages/SettingsLib/common.mk</span><br><span class="line"></span><br><span class="line">include $(BUILD_PACKAGE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the following include to make our test apk.</span></span><br><span class="line">ifeq (,$(ONE_SHOT_MAKEFILE))</span><br><span class="line">include $(call all-makefiles-under,$(LOCAL_PATH))</span><br><span class="line">endif</span><br></pre></td></tr></table></figure></p>
<p>对于一个模块定义的Android.mk文件而言，开头几乎固定是：</p>
<blockquote>
<p>LOCAL_PATH:= $(call my-dir)<br>include $(CLEAR_VARS)</p>
</blockquote>
<p>第一行调用my-dir函数来获取当前的路径LOCAL_PATH，my-dir在build/core/definitions.mk中定义<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"><span class="comment">## Retrieve the directory of the current makefile</span></span><br><span class="line"><span class="comment">## Must be called before including any other makefile!!</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure out where we are.</span></span><br><span class="line">define my-dir</span><br><span class="line">$(strip \</span><br><span class="line">  $(eval LOCAL_MODULE_MAKEFILE := $$(lastword $$(MAKEFILE_LIST))) \</span><br><span class="line">  $(if $(filter $(BUILD_SYSTEM)/% $(OUT_DIR)/%,$(LOCAL_MODULE_MAKEFILE)), \</span><br><span class="line">    $(error my-dir must be called before including any other makefile.) \</span><br><span class="line">   , \</span><br><span class="line">    $(patsubst %/,%,$(dir $(LOCAL_MODULE_MAKEFILE))) \</span><br><span class="line">   ) \</span><br><span class="line"> )</span><br><span class="line">endef</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android-recovery]]></title>
      <url>http://hesstudio.cn/2016/06/30/android-recovery/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之签名]]></title>
      <url>http://hesstudio.cn/2016/06/29/android-sign/</url>
      <content type="html"><![CDATA[<p><a href="http://www.mobibrw.com/2015/2657" target="_blank" rel="external">http://www.mobibrw.com/2015/2657</a><br><a href="http://www.mobibrw.com/2015/2826" target="_blank" rel="external">http://www.mobibrw.com/2015/2826</a></p>
<p>$ jarsigner -verbose -keystore debug.keystore -signedjar Test.apk Monster_TmsService.apk  androiddebugkey<br>$ keytool -list  -v -keystore debug.keystore -storepass android</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04 FTP服务器搭建]]></title>
      <url>http://hesstudio.cn/2016/06/06/ftp/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>vsftpd 是“very secure FTP daemon”的缩写，它是一款在Linux发行版中最受推崇的FTP服务器程序，安全性是它的一个最大的特点.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>安装： <code>sudo apt-get install vsftpd</code>    </li>
<li>创建FTP账户： <code>sudo useradd -g ftp -s /sbin/nologin -d /home/ftp_directory ftpuser</code></li>
<li>设置账户密码： <code>sudo passwd ftpuser</code>   </li>
<li>重启服务： <code>sudo service vsftpd restart</code></li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li><p>备份<br>vsftpd的配置文件位于/etc/vsftpd.conf，修改之前先备份配置文件<br><code>sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.bak</code>    </p>
</li>
<li><p>目录限制<br>默认情况下，用户登陆FTP后，是可以切换到根目录以外的主机其他目录，为了加以限制，可做如下配置：<br><code>chroot_list_enable=YES</code><br><code>chroot_list_file=/etc/vsftpd.chroot_list</code><br>然后设置chroot_local_user，有以下二种设置<br>设置<code>chroot_local_user＝YES</code>表示/etc/vsftpd.chroot_list文件中用户不能chroot，其他用户可以<br>设置<code>chroot_local_user=NO</code>表示/etc/vsftpd.chroot_list中用户可以chroot，其他用户不行<br>创建vsftpd.chroot_list，写入需控制chroot的用户<br><code>sudo touch /etc/vsftpd.chroot_list</code>  </p>
</li>
<li><p>写权限<br><code>write_enable=YES</code><br>如果开启了chroot来控制用户路径，则用户不再具有该用户根目录的写的权限<br>需设置<code>allow_writeable_chroot=YES</code>  </p>
</li>
<li><p>530 Login incorrect<br>如果在登陆时返回530 Login incorrect.<br>修改<br><code>pam_service_name=vsftpd</code><br>为<br><code>pam_service_name=ftp</code>  </p>
</li>
<li><p>相关配置参数<br>（1）ftpd_banner=welcome to ftp service ：设置连接服务器后的欢迎信息<br>（2）idle_session_timeout=60 ：限制远程的客户机连接后，所建立的控制连接，在多长时间没有做任何的操作就会中断(秒)<br>（3）data_connection_timeout=120 ：设置客户机在进行数据传输时,设置空闲的数据中断时间<br>（4）accept_timeout=60 设置在多长时间后自动建立连接<br>（5）connect_timeout=60 设置数据连接的最大激活时间，多长时间断开，为别人所使用<br>（6）max_clients=200 指明服务器总的客户并发连接数为200<br>（7）max_per_ip=3 指明每个客户机的最大连接数为3<br>（8）local_max_rate=50000(50kbytes/sec) 本地用户最大传输速率限制<br>（9）anon_max_rate=30000匿名用户的最大传输速率限制<br>（10）pasv_min_port=端口<br>（11）pasv-max-prot=端口号 定义最大与最小端口，为0表示任意端口;为客户端连接指明端口<br>（12）listen_address=IP地址 设置ftp服务来监听的地址，客户端可以用哪个地址来连接<br>（13）listen_port=端口号 设置FTP工作的端口号，默认的为21<br>（14）chroot_local_user=YES 设置所有的本地用户可以chroot<br>（15）chroot_local_user=NO 设置指定用户能够chroot<br>（16）chroot_list_enable=YES<br>（17）chroot_list_file=/etc/vsftpd/chroot_list(只有/etc/vsftpd/chroot_list中的指定的用户才能执行 )<br>（18）local_root=path 无论哪个用户都能登录的用户，定义登录帐号的主目录, 若没有指定，则每一个用户则进入到个人用户主目录<br>（19）chroot_local_user=yes/no 是否锁定本地系统帐号用户主目录(所有);锁定后，用户只能访问用户的主目录/home/user,不能利用cd命令向上转;只能向下<br>（20）chroot_list_enable=yes/no 锁定指定文件中用户的主目录(部分),文件：/chroot_list_file=path 中指定;<br>（21）userlist_enable=YES/NO 是否加载用户列表文件<br>（22）userlist_deny=YES 表示上面所加载的用户是否允许拒绝登录<br>（23）userlist_file=/etc/vsftpd/user_list 列表文件   </p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jenkins环境搭建]]></title>
      <url>http://hesstudio.cn/2016/06/01/jenkins/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><code>wget -q -O - http://pkg.jenkins-ci.org/debian-stable/jenkins-ci.org.key | sudo apt-key add -</code></li>
<li><code>sudo sh -c &#39;echo deb http://pkg.jenkins-ci.org/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</code></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install jenkins</code></li>
</ol>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol>
<li>jenkins账户<br>jenkins安装后,会创建一个名为jenkins的服务账号(可通过<code>cat /etc/passwd</code>查看),该账号是没有home目录的,可通过<code>sudo su -s /bin/bash jenkins</code>切换到该账户</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://jenkins.io/index.html" target="_blank" rel="external">jenkins官网</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android_build-3]]></title>
      <url>http://hesstudio.cn/2016/05/31/android-build-3/</url>
      <content type="html"><![CDATA[<h1 id="image"><a href="#image" class="headerlink" title="image"></a>image</h1><ol>
<li>boot.img </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-sed]]></title>
      <url>http://hesstudio.cn/2016/05/30/linux-sed/</url>
      <content type="html"><![CDATA[<blockquote>
<p>^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。<br>$ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。<br>. 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。<br>* 匹配0个或多个字符，如：/<em>sed/匹配所有模板是一个或多个空格后紧跟sed的行。<br>[] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。<br>[^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。<br>(..) 匹配子串，保存匹配的字符，如s/(love)able/\1rs，loveable被替换成lovers。<br>&amp; 保存搜索字符用来替换其他字符，如s/love/<strong>&amp;</strong>/，love这成<em>*love</em></em>。<br>\&lt; 匹配单词的开始，如:/\ 匹配单词的结束，如/love>/匹配包含以love结尾的单词的行。<br> x{m} 重复字符x，m次，如：/0{5}/匹配包含5个0的行。<br> x{m,} 重复字符x，至少m次，如：/0{5,}/匹配至少有5个0的行。<br>  x{m,n} 重复字符x，至少m次，不多于n次，如：/0{5,10}/匹配5~10个0的行。    </p>
</blockquote>
<p>来自: <a href="http://man.linuxde.net/sed" target="_blank" rel="external">http://man.linuxde.net/sed</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Build系统之envsetup.sh]]></title>
      <url>http://hesstudio.cn/2016/05/24/android-build-2/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>Android Build系统是比较大的模块,为了能快速了解整个模块的组织架构,后面采用从入口开始分析的方式,一步步深入分析Android的Build系统.在编译AOSP前,首先运行的是envsetup.sh脚本,所以下面就从envsetup.sh脚本开始分析.</p>
</blockquote>
<h1 id="envsetup-sh的作用"><a href="#envsetup-sh的作用" class="headerlink" title="envsetup.sh的作用"></a>envsetup.sh的作用</h1><p>打开envsetup.sh脚本,可以看到该脚本定义了很多的shell命令,这些命令在envsetup.sh脚本执行后可以直接在shell环境中使用.忽略掉定义部分,envsetup.sh脚本实际执行的代码只有数行,如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 中间部分代码</span><br><span class="line"># add the default one here</span><br><span class="line">add_lunch_combo aosp_arm-eng</span><br><span class="line">add_lunch_combo aosp_arm64-eng</span><br><span class="line">add_lunch_combo aosp_mips-eng</span><br><span class="line">add_lunch_combo aosp_mips64-eng</span><br><span class="line">add_lunch_combo aosp_x86-eng</span><br><span class="line">add_lunch_combo aosp_x86_64-eng</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"># 结尾部分代码</span><br><span class="line">if [ &quot;x$SHELL&quot; != &quot;x/bin/bash&quot; ]; then</span><br><span class="line">    case `ps -o command -p $$` in</span><br><span class="line">        *bash*)</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            echo &quot;WARNING: Only bash is supported, use of other shell would lead to erroneous results&quot;</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Execute the contents of any erroneous files we can find.</span><br><span class="line">for f in `test -d device &amp;&amp; find -L device -maxdepth 4 -name &apos;vendorsetup.sh&apos; 2&gt; /dev/null | sort` \</span><br><span class="line">         `test -d vendor &amp;&amp; find -L vendor -maxdepth 4 -name &apos;vendorsetup.sh&apos; 2&gt; /dev/null | sort`</span><br><span class="line">do</span><br><span class="line">    echo &quot;including $f&quot;</span><br><span class="line">    . $f</span><br><span class="line">done</span><br><span class="line">unset f</span><br><span class="line"></span><br><span class="line">addcompletions</span><br></pre></td></tr></table></figure>
<p>中间部分有6条add_lunch_combo的调用,结尾部分首先会判断是否是bash环境,如果不是提示警告.接着查找device与vendor目录下的vendorsetup.sh脚本并执行.<br>先看add_lunch_combo的定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function add_lunch_combo()</span><br><span class="line">&#123;</span><br><span class="line">    local new_combo=$1</span><br><span class="line">    local c</span><br><span class="line">    for c in $&#123;LUNCH_MENU_CHOICES[@]&#125; ; do</span><br><span class="line">        if [ &quot;$new_combo&quot; = &quot;$c&quot; ] ; then</span><br><span class="line">            return</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    LUNCH_MENU_CHOICES=($&#123;LUNCH_MENU_CHOICES[@]&#125; $new_combo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到add_lunch_combo的作用就是将传递的$1参数加入到LUNCH_MENU_CHOICES数组中.<br>再看一下vendorsetup.sh的定义,以bullhead为例,device/lge/bullhead/vendorsetup.sh的内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_lunch_combo aosp_bullhead-userdebug</span><br></pre></td></tr></table></figure></p>
<p>可以发现整个envsetup.sh执行过后,除了定义了一些shell函数,剩下的工作就是利用add_lunch_combo将传递给其的参数加入到全局数组LUNCH_MENU_CHOICES中,到底LUNCH_MENU_CHOICES有什么作用呢?我们可以在终端执行一下lunch命令,输出如下:</p>
<blockquote>
<p>You’re building on Linux</p>
<p>Lunch menu… pick a combo:</p>
<pre><code>1. aosp_arm-eng
2. aosp_arm64-eng
3. aosp_mips-eng
4. aosp_mips64-eng
5. aosp_x86-eng
6. aosp_x86_64-eng
7. aosp_deb-userdebug
8. aosp_flo-userdebug
9. full_fugu-userdebug
10. aosp_fugu-userdebug
11. mini_emulator_arm64-userdebug
12. m_e_arm-userdebug
13. mini_emulator_mips-userdebug
14. mini_emulator_x86_64-userdebug
15. mini_emulator_x86-userdebug
16. aosp_flounder-userdebug
17. aosp_angler-userdebug
18. aosp_bullhead-userdebug
19. aosp_hammerhead-userdebug
20. aosp_hammerhead_fp-userdebug
21. aosp_shamu-userdebug
</code></pre><p>Which would you like? [aosp_arm-eng]</p>
</blockquote>
<p>实际上上面的这些选项就是通过add_lunch_combo加进去的.</p>
<p>envsetup.sh脚本中定义的很多shell命令,一些常用的如下.</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>lunch</td>
<td>lunch <product_name><build_variant> 指定当前编译产品</build_variant></product_name></td>
</tr>
</tbody>
</table>
<p>下面分析以下lunch命令的功能:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">function lunch()</span><br><span class="line">&#123;</span><br><span class="line">    local answer</span><br><span class="line"></span><br><span class="line">    if [ &quot;$1&quot; ] ; then</span><br><span class="line">        answer=$1</span><br><span class="line">    else</span><br><span class="line">        print_lunch_menu</span><br><span class="line">        echo -n &quot;Which would you like? [aosp_arm-eng] &quot;</span><br><span class="line">        read answer</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    local selection=</span><br><span class="line"></span><br><span class="line">    # 如果lunch后没跟参数,默认aosp_arm-eng</span><br><span class="line">    if [ -z &quot;$answer&quot; ]</span><br><span class="line">    then</span><br><span class="line">        selection=aosp_arm-eng</span><br><span class="line">    elif (echo -n $answer | grep -q -e &quot;^[0-9][0-9]*$&quot;)</span><br><span class="line">    then</span><br><span class="line">        if [ $answer -le $&#123;#LUNCH_MENU_CHOICES[@]&#125; ]</span><br><span class="line">        then</span><br><span class="line">            selection=$&#123;LUNCH_MENU_CHOICES[$(($answer-1))]&#125;</span><br><span class="line">        fi</span><br><span class="line">    elif (echo -n $answer | grep -q -e &quot;^[^\-][^\-]*-[^\-][^\-]*$&quot;)</span><br><span class="line">    then</span><br><span class="line">        selection=$answer</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if [ -z &quot;$selection&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;Invalid lunch combo: $answer&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    export TARGET_BUILD_APPS=</span><br><span class="line"></span><br><span class="line">    # 变量selection &quot;-&quot;分割的前部分赋值product</span><br><span class="line">    local product=$(echo -n $selection | sed -e &quot;s/-.*$//&quot;)</span><br><span class="line">    check_product $product</span><br><span class="line">    if [ $? -ne 0 ]</span><br><span class="line">    then</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;** Don&apos;t have a product spec for: &apos;$product&apos;&quot;</span><br><span class="line">        echo &quot;** Do you have the right repo manifest?&quot;</span><br><span class="line">        product=</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 变量selection &quot;-&quot;分割的后部分赋值variant</span><br><span class="line">    local variant=$(echo -n $selection | sed -e &quot;s/^[^\-]*-//&quot;)</span><br><span class="line">    check_variant $variant</span><br><span class="line">    if [ $? -ne 0 ]</span><br><span class="line">    then</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;** Invalid variant: &apos;$variant&apos;&quot;</span><br><span class="line">        echo &quot;** Must be one of $&#123;VARIANT_CHOICES[@]&#125;&quot;</span><br><span class="line">        variant=</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if [ -z &quot;$product&quot; -o -z &quot;$variant&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    export TARGET_PRODUCT=$product</span><br><span class="line">    export TARGET_BUILD_VARIANT=$variant</span><br><span class="line">    export TARGET_BUILD_TYPE=release</span><br><span class="line"></span><br><span class="line">    echo</span><br><span class="line"></span><br><span class="line">    # 设置更多环境变量</span><br><span class="line">    set_stuff_for_environment</span><br><span class="line">    # 打印设置的环境变量</span><br><span class="line">    printconfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>lunch aosp_bullhead-userdebug执行完毕后输出如下:   </p>
<blockquote>
<p>PLATFORM_VERSION_CODENAME=REL<br>PLATFORM_VERSION=6.0.1<br>TARGET_PRODUCT=aosp_bullhead<br>TARGET_BUILD_VARIANT=userdebug<br>TARGET_BUILD_TYPE=release<br>TARGET_BUILD_APPS=<br>TARGET_ARCH=arm64<br>TARGET_ARCH_VARIANT=armv8-a<br>TARGET_CPU_VARIANT=cortex-a53<br>TARGET_2ND_ARCH=arm<br>TARGET_2ND_ARCH_VARIANT=armv7-a-neon<br>TARGET_2ND_CPU_VARIANT=cortex-a7<br>HOST_ARCH=x86_64<br>HOST_OS=linux<br>HOST_OS_EXTRA=Linux-4.2.0-27-generic-x86_64-with-Ubuntu-14.04-trusty<br>HOST_BUILD_TYPE=release<br>BUILD_ID=MHC19J<br>OUT_DIR=out   </p>
</blockquote>
<table>
<thead>
<tr>
<th>环境变量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PLATFORM_VERSION_CODENAME</td>
<td>代表平台版本名称</td>
</tr>
<tr>
<td>PLATFORM_VERSION</td>
<td>表示平台版本号</td>
</tr>
<tr>
<td>TARGET_PRODUCT</td>
<td>表示产品名称</td>
</tr>
<tr>
<td>TARGET_BUILD_VARIANT</td>
<td>表示产品编译类型,可以是eng,userdebug,debug</td>
</tr>
<tr>
<td>TARGET_BUILD_TYPE</td>
<td>编译类型,可以是release或者debug,当为debug时,编译时会加入调试信息</td>
</tr>
<tr>
<td>TARGET_BUILD_APPS</td>
<td>编译android时为空,编译模块是为模块的路径</td>
</tr>
<tr>
<td>TARGET_ARCH</td>
<td>目标cpu架构</td>
</tr>
<tr>
<td>TARGET_ARCH_VARIANT</td>
<td>目标cpu架构版本</td>
</tr>
<tr>
<td>TARGET_CPU_VARIANT</td>
<td>目标cpu代号</td>
</tr>
<tr>
<td>TARGET_2ND_ARCH</td>
<td>目标第二cpu架构</td>
</tr>
<tr>
<td>TARGET_2ND_ARCH_VARIANT</td>
<td>目标第二cpu架构版本</td>
</tr>
<tr>
<td>TARGET_2ND_CPU_VARIANT</td>
<td>目标第二代cpu代号</td>
</tr>
<tr>
<td>HOST_ARCH</td>
<td>编译平台架构</td>
</tr>
<tr>
<td>HOST_OS</td>
<td>编译平台操作系统</td>
</tr>
<tr>
<td>HOST_OS_EXTRA</td>
<td>编译平台额外信息</td>
</tr>
<tr>
<td>HOST_BUILD_TYPE</td>
<td>编译平台编译类型</td>
</tr>
<tr>
<td>BUILD_ID</td>
<td>编译ID,会出现编译版本信息中</td>
</tr>
<tr>
<td>OUT_DIR</td>
<td>编译输出目录</td>
</tr>
</tbody>
</table>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git操作总结]]></title>
      <url>http://hesstudio.cn/2016/05/23/git-operate/</url>
      <content type="html"><![CDATA[<hr>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ol>
<li><p>配置<br>Usage: git config –global|–system|–local|–list<br><code>$ git config --global user.name [username]</code><br><code>$ git config --global user.email [email]</code><br><code>$ git config --global color.ui true</code></p>
</li>
<li><p>初始化版本库<br><code>$ git init</code></p>
</li>
<li><p>暂存<br><code>$ git add .</code><br><code>$ git add -u</code>   暂存已跟踪文件<br><code>$ git add -A</code>   跟踪文件并暂存<br><code>$ git add -p</code>   选择性暂存文件</p>
</li>
<li><p>状态查看<br><code>$ git status</code><br><code>$ git status -s</code> 精简显示   </p>
</li>
<li><p>比较<br>工作区与暂存区比较:<br><code>$ git diff</code><br>暂存区与HEAD(版本库当前分支)比较:<br><code>$ git diff --staged</code><br>工作,暂存区(未提交修改)与HEAD(版本库当前分支)比较:<br><code>$ git diff HEAD</code></p>
</li>
<li><p>撤销<br>撤销工作区修改:<br><code>$ git checkout .</code><br>该命令会将暂存区全部文件或指定文件替换工作区对应文件<br><code>$ git checkout -- &lt;file&gt;</code>   </p>
<p>撤销工作区,暂存区修改:<br><code>$ git checkout HEAD .</code><br><code>$ git checkout HEAD &lt;file&gt;</code><br>该命令会将HEAD所指向的master分支全部或指定文件替换到工作区,暂存区,</p>
<p>暂存区域撤销:<br><code>$ git reset HEAD</code></p>
</li>
<li><p>移除<br>暂存区移除:<br><code>$ git rm --cached &lt;file&gt;</code>  </p>
</li>
<li><p>日志查看<br><code>git log</code>   </p>
</li>
<li><p>其他</p>
</li>
<li>修改远程仓库url:<br><code>git remote set-url origin new-url</code></li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Build系统概述]]></title>
      <url>http://hesstudio.cn/2016/05/23/android-build-1/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>Android的Build系统是基于GNU make,shell,python构建的一套编译环境.通过该编译环境,不仅可以完成对目标系统的二进制文件,APK应用程序编译,链接,打包等工作,还可以生成目标文件系统镜像,各种配置文件等.Build系统维护着各模块间的依赖关系,以确保某个模块修改能引起所依赖的模块重新编译.另外Build系统还支持多架构(arm,mips,x86),多语言(asm,c/C++,java)和多目标(同时支持多个产品).</p>
</blockquote>
<h1 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h1><p>在完整获取AOSP源码后,可按以下流程来进行源码的编译.<br>1.初始化编译环境:<br><code>$ source build/envsetup.sh</code><br>2.选择编译目标:<br><code>$ lunch aosp_arm-eng</code><br>目标有三种编译类型可选,分别是user,userdebug,eng  </p>
<table>
<thead>
<tr>
<th>Buildtype</th>
<th>Use</th>
</tr>
</thead>
<tbody>
<tr>
<td>user</td>
<td>limited access; suited for production</td>
</tr>
<tr>
<td>userdebug</td>
<td>like “user” but with root access and debuggability; preferred for debugging</td>
</tr>
<tr>
<td>eng</td>
<td>development configuration with additional debugging tools</td>
</tr>
</tbody>
</table>
<p>3.编译代码:<br><code>$ make -j8</code><br>所有的编译目标都在out目录下生成.</p>
<h1 id="Build系统框架"><a href="#Build系统框架" class="headerlink" title="Build系统框架"></a>Build系统框架</h1><p>Build系统的主要逻辑都集中在make文件中,同时依靠脚本辅助.从大的方面讲,Android Build系统可以分为一下3大块.<br>1.Build核心文件:<br>位于build/core下的文件是Android Build系统的框架与核心,其他device,module的make都依赖<br>2.产品配置文件:<br>产品相关文件主要位于源码的device,vendor目录下,device下主要存放产品配置文件,verdor下主要存放一些硬件的HAL库.<br>3.模块make文件:<br>整个系统中，包含了大量的模块，每个模块都有一个Android.mk文件.Build系统会在整个源码树中扫描名称为“Android.mk”的文件并根据其中的内容来执行模块的编译</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.gnu.org/software/make/manual/html_node/index.html?cm_mc_uid=03725177062214639675956&amp;cm_mc_sid_50200000=1463985980" target="_blank" rel="external">GNU make</a><br>2.</li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[remastersys 备份/制作ubuntu副本]]></title>
      <url>http://hesstudio.cn/2016/05/18/remastersys-md/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Remastersys是由Tony Brijeski 发起的免费软件项目,可以把已安装的Ubuntu、Debian及其衍生版打包成一个可以用来安装的Live CD/DVD的iso文件.</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>环境: ubuntu14.04</li>
<li>步骤:<br><code>$ wget &quot;https://www.freesoftwareservers.com/wp-content/uploads/2015/12/remastersys-gui.zip&quot; &amp;&amp; unzip remastersys-gui.zip &amp;&amp; cd remastersys-gui</code><br><code>$ sudo dpkg -i *.deb</code><br>如果报错,强制执行安装<br><code>$ echo y | sudo apt-get install -f</code></li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>语法:<br>sudo remastersys backup|clean|dist [cdfs|iso] [filename.iso]<br>Backup：备份整个系统，包括你的个人数据和配置信息<br>Dist：打包整个系统，不包括你的个人数据和配置信息</p>
</li>
<li><p>用例:<br>sudo remastersys backup   (to make a livecd/dvd backup of your system)<br>sudo remastersys backup custom.iso (to make a livecd/dvd backup and call the iso custom.iso)<br>sudo remastersys clean    (to clean up temporary files of remastersys)<br>sudo remastersys dist     (to make a distributable livecd/dvd of your system)<br>sudo remastersys dist cdfs(to make a distributable livecd/dvd filesystem only)<br>sudo remastersys dist iso custom.iso(to make a distributable iso named custom.iso but onlyif the cdfs is already present)   </p>
</li>
<li><p>制作过程<br><code>$ sudo remastersys dist</code><br><img src="http://7xrz32.com1.z0.glb.clouddn.com/remastersys.png" alt="remastersys dist"><br>根据系统打包大小,执行时间在十几分钟到数小时,目标ISO文件生成在home/remastersys/remastersys/下<br>使用ubuntu系统自带工具制作U盘启动盘<br><img src="http://7xrz32.com1.z0.glb.clouddn.com/make.png" alt="make"><br>制作完成,清除生成文件可使用sudo remastersys clean</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://help.ubuntu.com/community/InstallCDCustomization?action=show&amp;redirect=InstallCDCustomizationHowTo" target="_blank" rel="external">https://help.ubuntu.com/community/InstallCDCustomization?action=show&amp;redirect=InstallCDCustomizationHowTo</a>  </li>
<li><a href="https://help.ubuntu.com/community/InstallCDCustomization/Scripts" target="_blank" rel="external">https://help.ubuntu.com/community/InstallCDCustomization/Scripts</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GIT+Gerrit+Jenkins环境搭建]]></title>
      <url>http://hesstudio.cn/2016/05/18/gerrit-md/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li><p>创建gerrit管理用户<br>$ sudo adduser gerrit<br>$ sudo passwd gerrit</p>
</li>
<li><p>配置java环境  </p>
</li>
<li>下载gerrit<br><a href="https://www.gerritcodereview.com/" target="_blank" rel="external">https://www.gerritcodereview.com/</a></li>
</ul>
<h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><ul>
<li>安装<br>$ su gerrit<br>$ cd ~<br>$ java -jar gerrit-2.12.2.war init -d review_site  </li>
<li>配置<br>$ vi review_site/etc/gerrit.config</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android OTA升级]]></title>
      <url>http://hesstudio.cn/2016/04/30/android-ota/</url>
      <content type="html"><![CDATA[<h1 id="OTA技术"><a href="#OTA技术" class="headerlink" title="OTA技术"></a>OTA技术</h1><h1 id="Android-设备分区"><a href="#Android-设备分区" class="headerlink" title="Android 设备分区"></a>Android 设备分区</h1><h1 id="OTA-升级流程"><a href="#OTA-升级流程" class="headerlink" title="OTA 升级流程"></a>OTA 升级流程</h1><p># </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之消息机制]]></title>
      <url>http://hesstudio.cn/2016/04/15/android-handler/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>消息驱动是一种进程/线程的运行模式,内部或者外部的消息事件被放到进程/线程的消息队列中按序处理是现在的操作系统普遍采用的机制.Android也是采用了消息驱动的机制来处理各种外部按键,触屏,系统Intent,广播事件等消息.</p>
<p>Android的消息队列是线程相关的,每启动一个线程,都可以在内部创建一个消息队列,然后在消息队列中不断循环检查是否有新的消息需要处理,如果有,则对该消息进行处理,如果没有,线程就进入休眠状态直到有新的消息需要处理为止.</p>
<hr>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>Android中与消息机制相关的类主要有Looper,MessageQueue,Handler,Message,相关的代码主要在以下文件中:  </p>
<blockquote>
<ul>
<li>frameworks/base/core/java/android/os/Looper.java</li>
<li>frameworks/base/core/java/android/os/Message.java</li>
<li>frameworks/base/core/java/android/os/MessageQueue.java</li>
<li>frameworks/base/core/java/android/os/Handler.java</li>
<li>frameworks/base/core/jni/android_os_MessageQueue.cpp</li>
<li>system/core/libutils/Looper.cpp</li>
</ul>
</blockquote>
<ul>
<li>Looper<br>Looper对象是用来创建消息队列并进入消息循环处理的.每个线程只能有一个Looper对象，同时对应着一个MessageQueue，发送到该线程的消息都将存放在该队列中，并由Looper循环处理。Android默认只为主线程)(UI线程)创建了Looper，所以当我们新建线程需要使用消息队列时必须手动创建Looper.</li>
<li>MessageQueue<br>MessageQueue即消息队列，由Looper创建管理,一个Looper对象对应一个MessageQueue对象.</li>
<li>Handler<br>Handler是消息的接收与处理者，Handler将Message添加到消息队列，同时也通过Handler的回调方法handleMessage()处理对应的消息.一个Handler对象只能关联一个Looper对象，但多个Handler对象可以关联到同一个Looper.默认情况下Handler会关联到实例化Handler线程的Lopper，也可以通过Handler的构造函数的Looper参数指定Handler关联到某个线程的Looper，即发送消息到某个指定线程并在该线程中回调Handler处理该消息.</li>
<li>Message<br>Message是消息的载体，Parcelable的派生类，通过其成员变量target关联到Handler对象.  </li>
</ul>
<p>它们之间关系如下图示：<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/handler-looper-messagequeue.jpg?raw=true" alt="Handler,Looper,MessageQueue之间的关系"></p>
<p>在代码中我们一般如下使用线程的消息机制:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Looper.prepare();</span><br><span class="line"></span><br><span class="line">          mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// process incoming messages here</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          Looper.loop();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="线程消息队列的创建"><a href="#线程消息队列的创建" class="headerlink" title="线程消息队列的创建"></a>线程消息队列的创建</h3><p>线程的消息队列通过Looper创建并维护的，主线程中调用Looper.prepareMainLooper(),其他子线程中调用Looper.prepare()来创建消息队列.一个线程多次调用prepareMainLooper()或prepare()将会抛出异常.</p>
<p>在介绍消息队列创建之前,首先了解一下Looper与MessageQueue,再看消息队列创建的流程.</p>
<ol>
<li><p>Looper类的主要成员变量与方法如下:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  </span><br><span class="line">      <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">      <span class="keyword">final</span> Thread mThread;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>sThreadLocal是静态成员变量,用于保存线程私有的Looper对象</li>
<li>sMainLooper是主线程的Looper对象.在prepareMainLooper()中赋值,可通过调用getMainLooper获取</li>
<li>mQueue即消息队列,在Looper构造函数中初始化</li>
<li>mThread即Looper所在的线程</li>
</ul>
</li>
<li><p>MessageQueue类的主要成员变量与方法如下:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mQuitAllowed;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">long</span> mPtr;</span><br><span class="line">      Message mMessages;</span><br><span class="line"></span><br><span class="line">      MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>mQuitAllowed代表是否允许退出消息循环,主线程中默认为false,子线程默认false</li>
<li>mPtr保存的是NativeMessageQueue的地址,通过该地址就可以找到java层MessageQueue所对应native的MessageQueue.</li>
<li>mMessages即消息队列,通过mMessages可以遍历整个消息队列</li>
</ul>
</li>
<li>消息队列的创建:<br>消息队列的创建从Looper.prepare()/Looper.prepareMainLooper()开始</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      prepare(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">          <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          sMainLooper = myLooper();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">      mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">      mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过调用prepare()或prepareMainLooper()创建Looper对象,然后保存到sThreadLocal中,sThreadLocal是模板类ThreadLocal<t>,它通过线程ID与对象关联的方式实现线程本地存储功能.这样放入sThreadLocal对象中的Looper对象就与创建它的线程关联起来了.所以可以从sThreadLocal中获取到保存的Looper对象:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p>
<p>主线程的Loopper对象保存在sMainLooper,可以通过getMainLooper获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">          <span class="keyword">return</span> sMainLooper;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建Looper同时会创建Looper关联的MessageQueue并赋值给成员变量mQueue,接下来再看new MessageQueue(quitAllowed)的过程:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;</span><br><span class="line">      mQuitAllowed = quitAllowed;</span><br><span class="line">      mPtr = nativeInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到,直接调用了nativeInit().这个JNI方法定义在android_os_MessageQueue.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">android_os_MessageQueue_nativeInit</span><span class="params">(JNIEnv* env, jclass clazz)</span> </span>&#123;</span><br><span class="line">      NativeMessageQueue* nativeMessageQueue = <span class="keyword">new</span> NativeMessageQueue();</span><br><span class="line">      <span class="keyword">if</span> (!nativeMessageQueue) &#123;</span><br><span class="line">          jniThrowRuntimeException(env, <span class="string">"Unable to allocate native queue"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      nativeMessageQueue-&gt;incStrong(env);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(nativeMessageQueue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>nativeInit()中首先创建了nativeMessageQueue,然后又将nativeMessageQueue的地址赋值给java层的mPtr,所以java层的MessageQueue就可以通过mPtr找到nativeMessageQueue了.<br>再看new NativeMessageQueue()过程,NativeMessageQueue的构造如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NativeMessageQueue::NativeMessageQueue() : mInCallback(<span class="literal">false</span>), mExceptionObj(<span class="literal">NULL</span>) &#123;</span><br><span class="line">      mLooper = Looper::getForThread();</span><br><span class="line">      <span class="keyword">if</span> (mLooper == <span class="literal">NULL</span>) &#123;</span><br><span class="line">          mLooper = <span class="keyword">new</span> Looper(<span class="literal">false</span>);</span><br><span class="line">          Looper::setForThread(mLooper);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它首先通过Looper::getForThread()判断当前线程是否已创建过Looper对象,如果没有则创建.注意,这个Looper对象是实现在JNI层的,与上面Java层的Looper是不一样的,不过也是对应的关系.JNI层的Looper对象的创建过程是在Looper.cpp中实现的.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Looper::Looper(<span class="keyword">bool</span> allowNonCallbacks) :</span><br><span class="line">        mAllowNonCallbacks(allowNonCallbacks), mSendingMessage(<span class="literal">false</span>),</span><br><span class="line">        mPolling(<span class="literal">false</span>), mEpollFd(<span class="number">-1</span>), mEpollRebuildRequired(<span class="literal">false</span>),</span><br><span class="line">        mNextRequestSeq(<span class="number">0</span>), mResponseIndex(<span class="number">0</span>), mNextMessageUptime(LLONG_MAX) &#123;</span><br><span class="line">    mWakeEventFd = eventfd(<span class="number">0</span>, EFD_NONBLOCK);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(mWakeEventFd &lt; <span class="number">0</span>, <span class="string">"Could not make wake event fd.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line">    rebuildEpollLocked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建eventfd并赋值给mWakeEventFd,在以前的Android版本上,这里创建的是pipe管道.eventfd是较新的API,被用作一个事件等待/响应,实现了线程之间事件通知.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::rebuildEpollLocked() &#123;</span><br><span class="line">    <span class="comment">// Close old epoll instance if we have one.</span></span><br><span class="line">    <span class="keyword">if</span> (mEpollFd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_CALLBACKS</span></span><br><span class="line">        ALOGD(<span class="string">"%p ~ rebuildEpollLocked - rebuilding epoll set"</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        close(mEpollFd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate the new epoll instance and register the wake pipe.</span></span><br><span class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(mEpollFd &lt; <span class="number">0</span>, <span class="string">"Could not create epoll instance.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> epoll_event eventItem;</span><br><span class="line">    <span class="built_in">memset</span>(&amp; eventItem, <span class="number">0</span>, <span class="keyword">sizeof</span>(epoll_event)); <span class="comment">// zero out unused members of data field union</span></span><br><span class="line">    eventItem.events = EPOLLIN;</span><br><span class="line">    eventItem.data.fd = mWakeEventFd;</span><br><span class="line">    <span class="keyword">int</span> result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeEventFd, &amp; eventItem);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result != <span class="number">0</span>, <span class="string">"Could not add wake event fd to epoll instance.  errno=%d"</span>,</span><br><span class="line">            errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mRequests.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> Request&amp; request = mRequests.valueAt(i);</span><br><span class="line">        <span class="keyword">struct</span> epoll_event eventItem;</span><br><span class="line">        request.initEventItem(&amp;eventItem);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> epollResult = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, request.fd, &amp; eventItem);</span><br><span class="line">        <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"Error adding epoll events for fd %d while rebuilding epoll set, errno=%d"</span>,</span><br><span class="line">                    request.fd, errno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>rebuildEpollLocked中通过epoll_create创建了一个epoll专用的文件描述符,EPOLL_SIZE_HINT表示mEpollFd上能监控的最大文件描述符数.最后调用epoll_ctl监控mWakeEventFd文件描述符的EPOLLIN事件，即当eventfd中有内容可读时，就唤醒当前正在等待的线程.  </p>
<p>C++层的这个Looper对象创建好了之后，就返回到JNI层的NativeMessageQueue的构造函数，再返回到Java层的消息队列MessageQueue的创建过程,最后从Looper的构造函数中返回.线程消息队列的创建过程也就此完成.</p>
<p>总结一下:  </p>
<ul>
<li>首先在Java层创建了一个Looper对象，然后创建MessageQueue对象mQueue,进入MessageQueue的创建过程</li>
<li>MessageQueue在JNI层创建了一个NativeMessageQueue对象,并将这个对象保存在MessageQueue的成员变量mPtr中</li>
<li>在JNI层，创建了NativeMessageQueue对象时,会创建了一个Looper对象，保存在JNI层的NativeMessageQueue对象的成员变量mLooper中，这个对象的作用是，当Java层的消息队列中没有消息时，就使Android应用程序线程进入等待状态，而当Java层的消息队列中来了新的消息后，就唤醒Android应用程序的线程来处理这个消息</li>
<li>关于java层与JNI层的Looper,MessageQueue对象可以这样理解,java层的Looper,MessageQueue主要实现了消息队列发送处理逻辑,而JNI层的主要实现是线程的等待/唤醒.在逻辑上他们还是一一对应的关系,只不过侧重点不同.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/Looper_MessageQueue.png?raw=true" alt="java与jni层Looper,MessageQueue关系"></li>
</ul>
<hr>
<h3 id="线程消息队列的循环"><a href="#线程消息队列的循环" class="headerlink" title="线程消息队列的循环"></a>线程消息队列的循环</h3><p>当线程消息队列创建完成后,即进入消息队列循环处理过程中,Android消息队列的循环通过Loop.Loop()来实现,整个流程如下图示.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/loop_message.jpg?raw=true" alt="消息队列循环流程"></p>
<p>下面具体来看具体分析<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">      <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">          <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          ...</span><br><span class="line">          msg.target.dispatchMessage(msg);</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>进入loop前,首先通过myLooper()拿到前面创建的Looper对象,如果为null将会抛出异常,这也就是为什么必须在Looper.loop()之前调用Looper.prepare()或者Looper.prepareMainLooper()的原因.接下来通过me.mQueue拿到MessageQueue对象,而后进入到无尽循环处理中.在循环中通过queue.next()从队列中取消息,再调用msg.target.dispatchMessage(msg)处理.下面看一下queue.next()流程.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">      <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">              Binder.flushPendingCommands();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">              Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">              Message msg = mMessages;</span><br><span class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  do &#123;</span><br><span class="line">                      prevMsg = msg;</span><br><span class="line">                      msg = msg.next;</span><br><span class="line">                  &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                      nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                      <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                          prevMsg.next = msg.next;</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          mMessages = msg.next;</span><br><span class="line">                      &#125;</span><br><span class="line">                      msg.next = <span class="keyword">null</span>;</span><br><span class="line">                      <span class="keyword">if</span> (<span class="keyword">false</span>) Log.v(<span class="string">"MessageQueue"</span>, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                      <span class="keyword">return</span> msg;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                  dispose();</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                      &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                  pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">              &#125;</span><br><span class="line">              mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">              <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">              mPendingIdleHandlers[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  keep = idler.queueIdle();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                  Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                      mIdleHandlers.remove(idler);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">          nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>先看一下开始定义的2个变量的含义,pendingIdleHandlerCount表示消息队列空闲消息处理器(IdleHandler)的个数,nextPollTimeoutMillis表示没有消息处理时,线程需睡眠等待的时间.nativePollOnce将会睡眠等待nextPollTimeoutMillis时间.从nativePollOnce返回后,再从消息队列中取消息,如果没有任何消息,那么nextPollTimeoutMillis赋值为-1,表示下一次nativePollOnce无限制等待直到其他线程把它唤醒.如果取到消息,比较消息处理的时间与当前时间,如果消息处理的时间未到(now &lt; msg.when),那么计算nextPollTimeoutMillis,等下一次时间到时再处理.如果消息处理时间已到,那么取出消息返回到Looperde的loop中处理.另外如果当前没有消息处理时,会回调注册的IdleHandler.<br>下面继续分析nativePollOnce.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativePollOnce</span><span class="params">(JNIEnv* env, jobject obj,</span><br><span class="line">        jlong ptr, jint timeoutMillis)</span> </span>&#123;</span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">    nativeMessageQueue-&gt;pollOnce(env, obj, timeoutMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NativeMessageQueue::pollOnce(JNIEnv* env, jobject pollObj, <span class="keyword">int</span> timeoutMillis) &#123;</span><br><span class="line">    mPollEnv = env;</span><br><span class="line">    mPollObj = pollObj;</span><br><span class="line">    mLooper-&gt;pollOnce(timeoutMillis);</span><br><span class="line">    mPollObj = <span class="literal">NULL</span>;</span><br><span class="line">    mPollEnv = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mExceptionObj) &#123;</span><br><span class="line">        env-&gt;Throw(mExceptionObj);</span><br><span class="line">        env-&gt;DeleteLocalRef(mExceptionObj);</span><br><span class="line">        mExceptionObj = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终nativePollOnce调用的JNI层Looper的pollOnce<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Looper::pollOnce(<span class="keyword">int</span> timeoutMillis, <span class="keyword">int</span>* outFd, <span class="keyword">int</span>* outEvents, <span class="keyword">void</span>** outData) &#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = pollInner(timeoutMillis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在pollOnce中不断的循环调用pollInner来检查线程是否有新消息需要处理.如果有新消息处理或者timeoutMillis时间到,则返回到java层MessageQueue的next()继续执行.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Looper::pollInner(<span class="keyword">int</span> timeoutMillis) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> result = POLL_WAKE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> epoll_event eventItems[EPOLL_MAX_EVENTS];</span><br><span class="line">    <span class="keyword">int</span> eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fd = eventItems[i].data.fd;</span><br><span class="line">        <span class="keyword">uint32_t</span> epollEvents = eventItems[i].events;</span><br><span class="line">        <span class="keyword">if</span> (fd == mWakeEventFd) &#123;</span><br><span class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</span><br><span class="line">                awoken();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ALOGW(<span class="string">"Ignoring unexpected epoll events 0x%x on wake event fd."</span>, epollEvents);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>epoll_wait会监听前面创建的epoll实例的文件描述符上的IO读写事件,如果文件描述上没有IO事件出现,那么则等待timeoutMillis延时,检测到EPOLLIN事件即文件描述符上发生了写事件,随后调用awoken读出数据,以便接收新的数据.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::awoken() &#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> counter;</span><br><span class="line">    TEMP_FAILURE_RETRY(read(mWakeEventFd, &amp;counter, <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在awoken中读出数据.然后一步步返回到java层的MessageQueue继续消息处理.</p>
<hr>
<h3 id="线程消息的发送"><a href="#线程消息的发送" class="headerlink" title="线程消息的发送"></a>线程消息的发送</h3><p>消息的发送是通过Handler来执行的,下面我们从new Handler()开始,一步步分析消息的发送过程<br>首先看一下Handler类的主要数据成员与方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">      <span class="keyword">final</span> Looper mLooper;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      ...</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtFrontOfQueue</span><span class="params">(Runnable r)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, <span class="keyword">long</span> uptimeMillis)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>mQueue handler对应的MessageQueue对象,通过handler发送的消息都将插入到mQueue队列中</li>
<li>mLooper handler对应的Looper对象,如果创建Handler前没有实例化Looper对象将抛出异常.</li>
</ul>
<p>Handler是与Looper对象相关联的,我们创建的Handler对象都会关联到某一Looper,默认情况下,Handler会关联到创建Handler对象所在线程的Looper对象,也可通过Handler的构造函数来指定关联到的Looper.Handler发送消息有二类接口,post类与send类,一般send类用来发送传统带消息ID的消息，post类用来发送带消息处理方法的消息.</p>
<p>下面来看消息发送的具体流程<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/send_message.jpg?raw=true" alt="消息发送流程"><br>Handler或Post类方法最终都会调用enqueueMessage将消息发送到消息队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">      msg.target = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">          msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Message的成员变量target赋值为this，即关联到handler.然后继续调用MessageQueue的enqueueMessage方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/// M: Add message protect mechanism @&#123;</span></span><br><span class="line">      <span class="keyword">if</span> (msg.hasRecycle) &#123;</span><br><span class="line">          Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"Warning: message has been recycled. msg="</span> + msg);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/// Add message protect mechanism @&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">              IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                      msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">              Log.w(<span class="string">"MessageQueue"</span>, e.getMessage(), e);</span><br><span class="line">              msg.recycle();</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          msg.markInUse();</span><br><span class="line">          msg.when = when;</span><br><span class="line">          Message p = mMessages;</span><br><span class="line">          <span class="keyword">boolean</span> needWake;</span><br><span class="line">          <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">              <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">              msg.next = p;</span><br><span class="line">              mMessages = msg;</span><br><span class="line">              needWake = mBlocked;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">              <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">              <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">              needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">              Message prev;</span><br><span class="line">              <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                  prev = p;</span><br><span class="line">                  p = p.next;</span><br><span class="line">                  <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                      needWake = <span class="keyword">false</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">              prev.next = msg;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">          <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">              nativeWake(mPtr);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MessageQueue中的enqueueMessage主要工作是将message插入到队列，然后根据情况判断是否应该调用nativeWake唤醒目标线程.当前队列为空或者插入消息处理时间延时为0或者处理时间小于队头处理时间时，消息被插入到头部，否则按时间遍历插入到对应位置，并设置needWake标志，needWake是根据mBlocked来判断的，mBlocked记录了当前线程是否处于睡眠状态，如果消息插入队头且线程在睡眠中，neeWake为true，调用nativeWake唤醒目标线程.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativeWake</span><span class="params">(JNIEnv* env, jclass clazz, jlong ptr)</span> </span>&#123;</span><br><span class="line">      NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">      <span class="keyword">return</span> nativeMessageQueue-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NativeMessageQueue::wake() &#123;</span><br><span class="line">      mLooper-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::wake() &#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> inc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> nWrite = TEMP_FAILURE_RETRY(write(mWakeEventFd, &amp;inc, <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)));</span><br><span class="line">    <span class="keyword">if</span> (nWrite != <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EAGAIN) &#123;</span><br><span class="line">            ALOGW(<span class="string">"Could not write wake signal, errno=%d"</span>, errno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nativeWake最终会调用到jni层的Looper对象的wake方法中,Looper wake方法的实现非常简单,即向mWakeEventFd写入一个uint64_t,这样目标线程就会因为mWakeEventFd发生的IO事件而唤醒.消息的发送流程就此结束.</p>
<hr>
<h3 id="线程消息的处理"><a href="#线程消息的处理" class="headerlink" title="线程消息的处理"></a>线程消息的处理</h3><p>从前面的分析可以知道,当线程没有消息需要处理时,会在c++层Looper对象的pollInner中进入睡眠等待,当有新消息唤醒该目标线程时或这延时时间到,执行流程将沿着pollInner调用路径一直返回,直到java层Looper类的loop.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/hand_message.jpg?raw=true" alt="消息处理流程"><br>loop中将调用msg.target.dispatchMessage(msg)处理消息,这里的msg.target就是上面enqueueMessage中所赋值的handler,即进入handler的dispatchMessage处理消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">          handleCallback(msg);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          handleMessage(msg);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>dispatchMessage进行消息处理,先检查是否有设置msg.callback,如果有则执行msg.callback处理消息,如果没有则继续判断mCallback的执行,最后才是handleMessage处理.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android FAQ]]></title>
      <url>http://hesstudio.cn/2016/03/27/android-faq/</url>
      <content type="html"><![CDATA[<h1 id="如何引用Hide-API"><a href="#如何引用Hide-API" class="headerlink" title="如何引用Hide API"></a>如何引用Hide API</h1><ol>
<li>反射</li>
<li>替换class文件.找到源码编译出的对应文件的class，替换Android SDK中android.jar对应的class文件</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之开发环境搭建]]></title>
      <url>http://hesstudio.cn/2016/03/20/android-env/</url>
      <content type="html"><![CDATA[<hr>
<h1 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h1><p>Google推荐使用64位Ubuntu操作系统开发Android.针对不同的Android版本,推荐使用相对应的Ubuntu版本.   </p>
<ul>
<li>Android 6.0 (Marshmallow) - AOSP master: Ubuntu 14.04 (Trusty)    </li>
<li>Android 2.3.x (Gingerbread) - Android 5.x (Lollipop): Ubuntu 12.04 (Precise)   </li>
<li>Android 1.5 (Cupcake) - Android 2.2.x (Froyo): Ubuntu 10.04 (Lucid)   </li>
</ul>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p><strong> 安装jdk: </strong><br>Android 5.0版本前使用的是Oracle的JDK,5.0及以后的版本使用的是OpenJDK.</p>
<ul>
<li>The master branch of Android in AOSP: Ubuntu - OpenJDK 8</li>
<li>Android 5.x (Lollipop) - Android 6.0 (Marshmallow): OpenJDK 7</li>
<li>Android 2.3.x (Gingerbread) - Android 4.4.x (KitKat):Java JDK 6</li>
<li>Android 1.5 (Cupcake) - Android 2.2.x (Froyo): Java JDK 5   </li>
</ul>
<p>安装OpenJdk8<br>Ubuntu15.04及以上版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo a pt-get update</span><br><span class="line">$ sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></p>
<p>Ubuntu14.04:<br>下载<a href="http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre-headless_8u45-b14-1_amd64.deb" target="_blank" rel="external">openjdk-8-jre-headless_8u45-b14-1_amd64.deb</a>安装包.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg -i &#123;downloaded.deb file&#125;   </span><br><span class="line">$ sudo apt-get -f install</span><br></pre></td></tr></table></figure></p>
<p>对于安装的多个版本JDK,可使用以下命令指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-alternatives --config java   </span><br><span class="line">$ sudo update-alternatives --config javac</span><br></pre></td></tr></table></figure></p>
<p><strong> 安装编译相关开发包: </strong><br>Ubuntu14.04:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git-core gnupg flex bison gperf build-essential \</span><br><span class="line">  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \</span><br><span class="line">  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \</span><br><span class="line">  libgl1-mesa-dev libxml2-utils xsltproc unzip</span><br></pre></td></tr></table></figure></p>
<p>Ubuntu12.02:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git gnupg flex bison gperf build-essential \</span><br><span class="line">  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \</span><br><span class="line">  libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \</span><br><span class="line">  libgl1-mesa-dev g++-multilib mingw32 tofrodos \</span><br><span class="line">  python-markdown libxml2-utils xsltproc zlib1g-dev:i386</span><br><span class="line">$ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so</span><br></pre></td></tr></table></figure></p>
<p><strong> 开发工具安装: </strong>  </p>
<ol>
<li>下载<a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">Android studio</a></li>
<li>安装Android SDK</li>
</ol>
<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p><strong> Android源码下载: </strong>  </p>
<table>
<thead>
<tr>
<th>Code name</th>
<th>Version</th>
<th>API level</th>
</tr>
</thead>
<tbody>
<tr>
<td>Marshmallow</td>
<td>6.0</td>
<td>API level 23</td>
</tr>
<tr>
<td>Lollipop</td>
<td>5.1</td>
<td>API level 22</td>
</tr>
<tr>
<td>Lollipop</td>
<td>5.0</td>
<td>API level 21</td>
</tr>
<tr>
<td>KitKat</td>
<td>4.4 - 4.4.4</td>
<td>API level 19</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.3.x</td>
<td>API level 18</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.2.x</td>
<td>API level 17</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.1.x</td>
<td>API level 16</td>
</tr>
<tr>
<td>Ice Cream Sandwich</td>
<td>4.0.3 - 4.0.4</td>
<td>API level 15, NDK 8</td>
</tr>
<tr>
<td>Ice Cream Sandwich</td>
<td>4.0.1 - 4.0.2</td>
<td>API level 14, NDK 7</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.2.x</td>
<td>API level 13</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.1</td>
<td>API level 12, NDK 6</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.0</td>
<td>API level 11</td>
</tr>
<tr>
<td>Gingerbread</td>
<td>2.3.3 - 2.3.7</td>
<td>API level 10</td>
</tr>
<tr>
<td>Gingerbread</td>
<td>2.3 - 2.3.2</td>
<td>API level 9, NDK 5</td>
</tr>
<tr>
<td>Froyo</td>
<td>2.2.x</td>
<td>API level 8, NDK 4</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.1</td>
<td>API level 7, NDK 3</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.0.1</td>
<td>API level 6</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.0</td>
<td>API level 5</td>
</tr>
<tr>
<td>Donut</td>
<td>1.6</td>
<td>API level 4, NDK 2</td>
</tr>
<tr>
<td>Cupcake</td>
<td>1.5</td>
<td>API level 3, NDK 1</td>
</tr>
<tr>
<td>(no code name)</td>
<td>1.1</td>
<td>API level 2</td>
</tr>
<tr>
<td>(no code name)</td>
<td>1.0</td>
<td>API level 1</td>
</tr>
</tbody>
</table>
<p>安装repo<br>repo是Google开发的一个脚本,在git上进行封装,用来简化git下载Android源码的过程.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/bin    </span><br><span class="line">$ PATH=~/bin:$PATH   </span><br><span class="line">$ curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo   </span><br><span class="line">$ chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure></p>
<p>repo下载源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">$ mkdir WORKING_DIRECTORY</span><br><span class="line">$ cd WORKING_DIRECTORY</span><br></pre></td></tr></table></figure></p>
<p>默认下载master分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo init -u https://android.googlesource.com/platform/manifest</span><br></pre></td></tr></table></figure></p>
<p>或者指定分支下载,<a href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds" target="_blank" rel="external">查看branch list</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo init -u https://android.googlesource.com/platform/manifest -b android-6.0.1_r22</span><br></pre></td></tr></table></figure></p>
<p>下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo sync -j8</span><br></pre></td></tr></table></figure></p>
<p><strong> Kernel源码下载:   </strong><br>虽然Android源码是通用的,但是每个平台kernel源码都有较大的差异,同时Android源码跟Kernel源码也是分开管理的.kernel源码可以通过一下命令获取.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://android.googlesource.com/kernel/common.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/hikey-linaro</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/x86_64.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/exynos.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/goldfish.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/msm.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/omap.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/samsung.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/tegra.git</span><br></pre></td></tr></table></figure></p>
<p>其中goldfish.git是qemu虚拟机的内核代码库.下面是Google设备型号,kernel位置及源码仓库对应表  </p>
<table>
<thead>
<tr>
<th>Device</th>
<th>Binarry location</th>
<th>Source location</th>
<th>Build configuration</th>
</tr>
</thead>
<tbody>
<tr>
<td>hikey</td>
<td>device/linaro/hikey-kernel</td>
<td>kernel/hikey-linaro</td>
<td>hikey_defconfig</td>
</tr>
<tr>
<td>angler</td>
<td>device/huawei/angler-kernel</td>
<td>kernel/msm</td>
<td>angler_defconfig</td>
</tr>
<tr>
<td>bullhead</td>
<td>device/lge/bullhead-kernel</td>
<td>kernel/msm</td>
<td>bullhead_defconfig</td>
</tr>
<tr>
<td>shamu</td>
<td>device/moto/shamu-kernel</td>
<td>kernel/msm</td>
<td>shamu_defconfig</td>
</tr>
<tr>
<td>fugu</td>
<td>device/asus/fugu-kernel</td>
<td>kernel/x86_64</td>
<td>fugu_defconfig</td>
</tr>
<tr>
<td>volantis</td>
<td>device/htc/flounder-kernel</td>
<td>kernel/tegra</td>
<td>flounder_defconfig</td>
</tr>
<tr>
<td>hammerhead</td>
<td>device/lge/hammerhead-kernel</td>
<td>kernel/msm</td>
<td>hammerhead_defconfig</td>
</tr>
<tr>
<td>flo</td>
<td>device/asus/flo-kernel/kernel</td>
<td>kernel/msm</td>
<td>flo_defconfig</td>
</tr>
<tr>
<td>deb</td>
<td>device/asus/flo-kernel/kernel</td>
<td>kernel/msm</td>
<td>flo_defconfig</td>
</tr>
<tr>
<td>manta</td>
<td>device/samsung/manta/kernel</td>
<td>kernel/exynos</td>
<td>manta_defconfig</td>
</tr>
<tr>
<td>mako</td>
<td>device/lge/mako-kernel/kernel</td>
<td>kernel/msm</td>
<td>mako_defconfig</td>
</tr>
<tr>
<td>grouper</td>
<td>device/asus/grouper/kernel</td>
<td>kernel/tegra</td>
<td>tegra3_android_defconfig</td>
</tr>
<tr>
<td>tilapia</td>
<td>device/asus/grouper/kernel</td>
<td>kernel/tegra</td>
<td>tegra3_android_defconfig</td>
</tr>
<tr>
<td>maguro</td>
<td>device/samsung/tuna/kernel</td>
<td>kernel/omap</td>
<td>tuna_defconfig</td>
</tr>
<tr>
<td>toro</td>
<td>device/samsung/tuna/kernel</td>
<td>kernel/omap</td>
<td>tuna_defconfig</td>
</tr>
<tr>
<td>panda</td>
<td>device/ti/panda/kernel</td>
<td>kernel/omap</td>
<td>panda_defconfig</td>
</tr>
<tr>
<td>stingray</td>
<td>device/moto/wingray/kernel</td>
<td>kernel/tegra</td>
<td>stingray_defconfig</td>
</tr>
<tr>
<td>wingray</td>
<td>device/moto/wingray/kernel</td>
<td>kernel/tegra</td>
<td>stingray_defconfig</td>
</tr>
<tr>
<td>crespo</td>
<td>device/samsung/crespo/kernel</td>
<td>kernel/samsung</td>
<td>herring_defconfig</td>
</tr>
<tr>
<td>crespo4g</td>
<td>device/samsung/crespo/kernel</td>
<td>kernel/samsung</td>
<td>herring_defconfig</td>
</tr>
</tbody>
</table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://source.android.com/source/index.html" target="_blank" rel="external">The Android Source Code</a></li>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a></li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UML Sequence Diagram]]></title>
      <url>http://hesstudio.cn/2015/06/30/uml-sequence-diagram/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[os_process_thread]]></title>
      <url>http://hesstudio.cn/2014/10/30/os-process-thread/</url>
      <content type="html"><![CDATA[<p>进程/线程之间区别</p>
<p>进程同步</p>
<p>java api</p>
]]></content>
    </entry>
    
  
  
</search>
