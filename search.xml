<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android#Overview]]></title>
      <url>http://robinheztto.com/2200/01/01/android-overview/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Android学习提纲．从底至上．RTFSC．</p>
</blockquote>
<div align="center"><br><img src="https://source.android.com/images/android_framework_details.png" alt="Android stack"><br></div>

<hr>
<h1 id="开发环境与工具"><a href="#开发环境与工具" class="headerlink" title="开发环境与工具"></a>开发环境与工具</h1><ul>
<li><p><a href="http://www.robinheztto.com/2016/01/01/android-env/" target="_blank" rel="external">Android之开发环境搭建</a></p>
</li>
<li><p><a href="http://www.robinheztto.com/2016/01/05/android-tcpdump/" target="_blank" rel="external">Android之抓包</a></p>
</li>
</ul>
<hr>
<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><ul>
<li><a href="http://www.robinheztto.com/2016/01/01/android-env/" target="_blank" rel="external">Android Debug之系统启动</a></li>
</ul>
<hr>
<h1 id="Bootloader"><a href="#Bootloader" class="headerlink" title="Bootloader"></a>Bootloader</h1><ul>
<li><a href="http://www.robinheztto.com/2016/01/15/android-lk/" target="_blank" rel="external">Android之LK</a></li>
</ul>
<hr>
<h1 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h1><ul>
<li><a href="http://www.robinheztto.com/2016/02/01/android-init-language/" target="_blank" rel="external">Android Binder之概述</a></li>
<li><a href="http://www.robinheztto.com/2016/02/01/android-init-language/" target="_blank" rel="external">Android Binder之Binder Driver</a></li>
<li><a href="http://www.robinheztto.com/2016/02/01/android-init-language/" target="_blank" rel="external">Android Binder之Service Manager</a></li>
<li><a href="http://www.robinheztto.com/2016/02/01/android-init-language/" target="_blank" rel="external">Android Binder之进程间通信库</a></li>
<li><a href="http://www.robinheztto.com/2016/02/01/android-init-language/" target="_blank" rel="external">Android Binder之defaultServiceManager</a></li>
</ul>
<hr>
<h1 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h1><ul>
<li><a href="http://www.robinheztto.com/2016/02/01/android-init-language/" target="_blank" rel="external">Android之Init.rc语法</a></li>
<li><a href="http://www.robinheztto.com/2016/02/02/android-init/" target="_blank" rel="external">Android之Init</a></li>
<li><a href="http://www.robinheztto.com/2016/01/01/android-env/" target="_blank" rel="external">Android之Zygote-启动流程</a></li>
<li><a href="http://www.robinheztto.com/2016/01/01/android-env/" target="_blank" rel="external">Android之Zygote-应用进程创建</a></li>
<li><a href="http://www.robinheztto.com/2016/02/02/android-init/" target="_blank" rel="external">Android之SystemServer启动(上)</a></li>
<li><a href="http://www.robinheztto.com/2016/02/02/android-init/" target="_blank" rel="external">Android之SystemServer启动(下)</a></li>
</ul>
<hr>
<h1 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h1><p> TODO…</p>
<hr>
<h1 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h1><p> TODO…</p>
<hr>
<h1 id="Build-System"><a href="#Build-System" class="headerlink" title="Build System"></a>Build System</h1><p> TODO…</p>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://free-electrons.com/pub/conferences/2012/captronic/android/android-captronic.pdf" target="_blank" rel="external">android-captronic</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android#Issue]]></title>
      <url>http://robinheztto.com/2100/01/01/android-issue/</url>
      <content type="html"><![CDATA[<p><strong>关于Android N平台java.lang.UnsatisfiedLinkError: dlopen failed的问题</strong></p>
<blockquote>
<p>Android N上应用Crash,log上报java.lang.UnsatisfiedLinkError，类似如下的log：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: dlopen failed: library &quot;libcutils.so&quot;</span><br><span class="line">(&quot;/system/lib/libcutils.so&quot;) needed or dlopened by</span><br><span class="line">&quot;/system/lib/libnativeloader.so&quot; is not accessible for the namespace</span><br><span class="line">&quot;classloader-namespace&quot;</span><br><span class="line">  at java.lang.Runtime.loadLibrary0(Runtime.java:977)</span><br><span class="line">  at java.lang.System.loadLibrary(System.java:1602)</span><br></pre></td></tr></table></figure></p>
<p>原因：<br>从Android N开始，系统将阻止应用动态链接非公开NDK库(参考官网描述<a href="https://developer.android.com/about/versions/nougat/android-7.0-changes.html" target="_blank" rel="external">android-7.0-changes</a>)<br>解决：<br>　1. so库打包到apk里面或参考官网解决<br>　2. 添加so到public.libraries.txt白名单.(参考<a href="http://blog.csdn.net/xiashaohua/article/details/52709630?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="external">android N : UnsatisfiedLinkError</a>)</p>
</blockquote>
<hr>
<p><strong>关于绕过默认短信应用限制读写短信的问题</strong></p>
<blockquote>
<p>Android 4.4以后，只有默认短信应用才具有读写短信的权限，系统应用比如垃圾短信拦截，一键换机等需要在未设置为默认短信应用的情况下读写短信数据库，可以利用以下代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if ( 19 &gt;= Build.VERSION.SDK_INT) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        AppOpsManager appOpsManager = (AppOpsManager) sContext.getSystemService(&quot;appops&quot;);</span><br><span class="line">        appOpsManager.setMode(15, android.os.Process.myUid(), packageName, 0);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>具体原理参考<a href="http://3dobe.com/archives/51/" target="_blank" rel="external">Android 权限管理 AppOps</a></p>
<hr>
<p><strong>关于使用jack编译生成jar包</strong></p>
<blockquote>
<p>Jack是Java Android Compiler Kit的缩写，它直接将Java代码直接编译为字节码，不再生成classes.jar等中间文件，而是直接生成了classes.jack文件，需生成classes.jar时，可在Android.mk中添加如下定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_JACK_ENABLED=disabled</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>Jack &amp; Jill参考<a href="https://yq.aliyun.com/articles/40811" target="_blank" rel="external">Android 新一代编译 toolchain Jack &amp; Jill 简介</a></p>
<hr>
<p><strong>关于Android Gradle Plugin</strong></p>
<blockquote>
<p>编译android gradle plugin</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir studio-master-dev</span><br><span class="line">$ cd studio-master-dev</span><br><span class="line">$ repo init -u https://android.googlesource.com/platform/manifest -b studio-master-dev</span><br><span class="line">$ repo sync</span><br><span class="line">$ cd tools</span><br><span class="line">$ ./gradlew init</span><br><span class="line">$ ./gradlew assemble</span><br><span class="line">$ ./gradlew publishLocal</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于gradle不支持不支持msgid同名字符串的问题（由于不是标准Application做法）参考gradle plugin源码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sdk-common/src/main/java/com/android/ide/common/res2/ValueResourceParser2.java</span><br><span class="line">checkDuplicate() -&gt;</span><br><span class="line">else if (set.contains(name) &amp;&amp; resource.getType() != ResourceType.PUBLIC) &#123;</span><br><span class="line">				System.out.println(&quot;checkDuplicate ------&gt; &quot; + resource.getType());</span><br><span class="line">                throw MergingException.withMessage(</span><br><span class="line">                        &quot;Found item %s/%s more than one time&quot;,</span><br><span class="line">                        resource.getType().getDisplayName(), name).withFile(from).build();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://groups.google.com/forum/#!topic/android-building/dxP0tp0e1MI" target="_blank" rel="external">Gradle vs. Make for AOSP build</a><br><a href="http://tools.android.com/tech-docs" target="_blank" rel="external">Android Gradle</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android-tools-opengrok]]></title>
      <url>http://robinheztto.com/2017/01/04/android-tools-opengrok/</url>
      <content type="html"><![CDATA[<p>$ sudo apt-get install exuberant-ctags</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之SystemServer启动(下)]]></title>
      <url>http://robinheztto.com/2016/11/28/android-systemserver-2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>上篇Android SystemServer启动之进程创建分析的是SystemServer启动的第一阶段，本篇继续分析SystemServer进程创建以后个服务启动的过程，上文分析到ZygoteInit.main()中catch MethodAndArgsCaller异常后，将执行MethodAndArgsCaller.run反射到SystemServer.main方法，本篇接着从SystemServer.main()开始分析</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The main entry point from zygote.</span><br><span class="line"> */</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    new SystemServer().run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SystemServer() &#123;</span><br><span class="line">    // Check for factory test mode.</span><br><span class="line">    mFactoryTestMode = FactoryTest.getMode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">private void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 调整系统时间，如果时间在1970以前，调整到1970年</span><br><span class="line">        if (System.currentTimeMillis() &lt; EARLIEST_SUPPORTED_TIME) &#123;</span><br><span class="line">            Slog.w(TAG, &quot;System clock is before 1970; setting to 1970.&quot;);</span><br><span class="line">            SystemClock.setCurrentTimeMillis(EARLIEST_SUPPORTED_TIME);</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">        //设置persist.sys.dalvik.vm.lib.2属性值为当前虚拟机库文件libart.so</span><br><span class="line">        SystemProperties.set(&quot;persist.sys.dalvik.vm.lib.2&quot;, VMRuntime.getRuntime().vmLibrary());</span><br><span class="line"></span><br><span class="line">        // Enable sampling profiler，用于性能统计</span><br><span class="line">        if (SamplingProfilerIntegration.isEnabled()) &#123;</span><br><span class="line">            SamplingProfilerIntegration.start();</span><br><span class="line">            mProfilerSnapshotTimer = new Timer();</span><br><span class="line">            mProfilerSnapshotTimer.schedule(new TimerTask() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        SamplingProfilerIntegration.writeSnapshot(&quot;system_server&quot;, null);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, SNAPSHOT_INTERVAL, SNAPSHOT_INTERVAL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 清除vm内存增长上限，设定虚拟机堆内存利用率为0.8</span><br><span class="line">        VMRuntime.getRuntime().clearGrowthLimit();</span><br><span class="line">        VMRuntime.getRuntime().setTargetHeapUtilization(0.8f);</span><br><span class="line"></span><br><span class="line">        // Some devices rely on runtime fingerprint generation, so make sure</span><br><span class="line">        // we&apos;ve defined it before booting further.</span><br><span class="line">        Build.ensureFingerprintProperty();</span><br><span class="line"></span><br><span class="line">        //设置访问Environment需要指定用户</span><br><span class="line">        Environment.setUserRequired(true);</span><br><span class="line"></span><br><span class="line">        // Within the system server, any incoming Bundles should be defused</span><br><span class="line">        // to avoid throwing BadParcelableException.</span><br><span class="line">        BaseBundle.setShouldDefuse(true);</span><br><span class="line"></span><br><span class="line">        // Ensure binder calls into the system always run at foreground priority.</span><br><span class="line">        BinderInternal.disableBackgroundScheduling(true);</span><br><span class="line"></span><br><span class="line">        // Increase the number of binder threads in system_server</span><br><span class="line">        BinderInternal.setMaxThreads(sMaxBinderThreads);</span><br><span class="line"></span><br><span class="line">        // Prepare the main looper thread (this thread).</span><br><span class="line">        android.os.Process.setThreadPriority(</span><br><span class="line">            android.os.Process.THREAD_PRIORITY_FOREGROUND);</span><br><span class="line">        android.os.Process.setCanSelfBackground(false);</span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        // 加载android_servers.so库(frameworks/base/services/)</span><br><span class="line">        System.loadLibrary(&quot;android_servers&quot;);</span><br><span class="line"></span><br><span class="line">        // Check whether we failed to shut down last time we tried.</span><br><span class="line">        // This call may not return.</span><br><span class="line">        performPendingShutdown();</span><br><span class="line"></span><br><span class="line">        // 获取SystemServer的Context对象</span><br><span class="line">        createSystemContext();</span><br><span class="line"></span><br><span class="line">        // Create the system service manager.</span><br><span class="line">        mSystemServiceManager = new SystemServiceManager(mSystemContext);</span><br><span class="line">        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Start services.</span><br><span class="line">    try &#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, &quot;StartServices&quot;);</span><br><span class="line">        startBootstrapServices();</span><br><span class="line">        startCoreServices();</span><br><span class="line">        startOtherServices();</span><br><span class="line">    &#125; catch (Throwable ex) &#123;</span><br><span class="line">        Slog.e(&quot;System&quot;, &quot;******************************************&quot;);</span><br><span class="line">        Slog.e(&quot;System&quot;, &quot;************ Failure starting system services&quot;, ex);</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // For debug builds, log event loop stalls to dropbox for analysis.</span><br><span class="line">    if (StrictMode.conditionallyEnableDebugLogging()) &#123;</span><br><span class="line">        Slog.i(TAG, &quot;Enabled StrictMode for system server main thread.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Loop forever.</span><br><span class="line">    Looper.loop();</span><br><span class="line">    throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之SystemServer启动(上)]]></title>
      <url>http://robinheztto.com/2016/11/28/android-systemserver-1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>SystemServer是Android Framework的核心，大部分Android的核心服务都运行在SystemServer进程当中。此篇博客主要分析SystemServer的进程创建流程,相关的源代码在以下文件中：</p>
<ul>
<li>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</li>
<li>frameworks/base/core/java/com/android/internal/os/Zygote.java</li>
<li>frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</li>
<li>frameworks/base/core/jni/com_android_internal_os_Zygote.cpp</li>
<li>frameworks/base/core/jni/AndroidRuntime.cpp</li>
<li>frameworks/base/cmds/app_process/app_main.cpp</li>
</ul>
</blockquote>
<h1 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h1><p>SystemServer(system_server进程)是由Zygote fork出来的，如下所示，通过在init.zygote32.rc/init.zygote32.rc中定义的参数<code>--start-system-server</code>传递给Zygote来启动SystemServer。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span><br><span class="line">    class main</span><br><span class="line">    socket zygote stream 660 root system</span><br><span class="line">    onrestart write /sys/android_power/request_state wake</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">    onrestart restart audioserver</span><br><span class="line">    onrestart restart cameraserver</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart netd</span><br><span class="line">    writepid /dev/cpuset/foreground/tasks /sys/fs/cgroup/stune/foreground/tasks</span><br><span class="line"></span><br><span class="line">service zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary</span><br><span class="line">    class main</span><br><span class="line">    socket zygote_secondary stream 660 root system</span><br><span class="line">    onrestart restart zygote</span><br><span class="line">    writepid /dev/cpuset/foreground/tasks /dev/stune/foreground/tasks</span><br></pre></td></tr></table></figure>
<p>SystemServer的启动流程大概可以分为二个阶段，第一阶段Zygote fork进程并初始化，第二阶段SystemServer类中执行启动系统服务的操作，此篇博客将分析第一个阶段进程创建过程，下篇将分析第二阶段系统服务启动过程。<br>Zygote fork SystemServer的流程如下图示，后面将根据下图的流程来进行分析。</p>
<div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/android_systemserver_init_flow.jpg?raw=true" alt="android_systemserver_init_flow"><br></div>

<h1 id="ZygoteInit-main"><a href="#ZygoteInit-main" class="headerlink" title="ZygoteInit.main()"></a>ZygoteInit.main()</h1><p>ZygoteInit.main()通过解析argv[]参数列表来确定是否启动SystemServer，如果有定义参数<code>--start-system-server</code>则启动调用startSystemServer启动SystemServer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String argv[]) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ......</span><br><span class="line">        for (int i = 1; i &lt; argv.length; i++) &#123;</span><br><span class="line">            if (&quot;start-system-server&quot;.equals(argv[i])) &#123;</span><br><span class="line">                startSystemServer = true;</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">        if (startSystemServer) &#123;</span><br><span class="line">            startSystemServer(abiList, socketName);</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125; catch (MethodAndArgsCaller caller) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">        Log.e(TAG, &quot;Zygote died with exception&quot;, ex);</span><br><span class="line">        closeServerSocket();</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="ZygoteInit-startSystemServer"><a href="#ZygoteInit-startSystemServer" class="headerlink" title="ZygoteInit.startSystemServer()"></a>ZygoteInit.startSystemServer()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">private static boolean startSystemServer(String abiList, String socketName)</span><br><span class="line">        throws MethodAndArgsCaller, RuntimeException &#123;</span><br><span class="line">    long capabilities = posixCapabilitiesAsBits(</span><br><span class="line">        OsConstants.CAP_IPC_LOCK,</span><br><span class="line">        OsConstants.CAP_KILL,</span><br><span class="line">        OsConstants.CAP_NET_ADMIN,</span><br><span class="line">        OsConstants.CAP_NET_BIND_SERVICE,</span><br><span class="line">        OsConstants.CAP_NET_BROADCAST,</span><br><span class="line">        OsConstants.CAP_NET_RAW,</span><br><span class="line">        OsConstants.CAP_SYS_MODULE,</span><br><span class="line">        OsConstants.CAP_SYS_NICE,</span><br><span class="line">        OsConstants.CAP_SYS_RESOURCE,</span><br><span class="line">        OsConstants.CAP_SYS_TIME,</span><br><span class="line">        OsConstants.CAP_SYS_TTY_CONFIG</span><br><span class="line">    );</span><br><span class="line">    /* Containers run without this capability, so avoid setting it in that case */</span><br><span class="line">    if (!SystemProperties.getBoolean(PROPERTY_RUNNING_IN_CONTAINER, false)) &#123;</span><br><span class="line">        capabilities |= posixCapabilitiesAsBits(OsConstants.CAP_BLOCK_SUSPEND);</span><br><span class="line">    &#125;</span><br><span class="line">    /* Hardcoded command line to start the system server */</span><br><span class="line">    String args[] = &#123;</span><br><span class="line">        &quot;--setuid=1000&quot;,</span><br><span class="line">        &quot;--setgid=1000&quot;,</span><br><span class="line">        &quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1032,3001,3002,3003,3006,3007,3009,3010&quot;,</span><br><span class="line">        &quot;--capabilities=&quot; + capabilities + &quot;,&quot; + capabilities,</span><br><span class="line">        &quot;--nice-name=system_server&quot;,</span><br><span class="line">        &quot;--runtime-args&quot;,</span><br><span class="line">        &quot;com.android.server.SystemServer&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">    ZygoteConnection.Arguments parsedArgs = null;</span><br><span class="line"></span><br><span class="line">    int pid;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // 准备执行参数</span><br><span class="line">        parsedArgs = new ZygoteConnection.Arguments(args);</span><br><span class="line">        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</span><br><span class="line">        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</span><br><span class="line"></span><br><span class="line">        // fork SystemServer并返回进程id</span><br><span class="line">        pid = Zygote.forkSystemServer(</span><br><span class="line">                parsedArgs.uid, parsedArgs.gid,</span><br><span class="line">                parsedArgs.gids,</span><br><span class="line">                parsedArgs.debugFlags,</span><br><span class="line">                null,</span><br><span class="line">                parsedArgs.permittedCapabilities,</span><br><span class="line">                parsedArgs.effectiveCapabilities);</span><br><span class="line">    &#125; catch (IllegalArgumentException ex) &#123;</span><br><span class="line">        throw new RuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 子进程即system_server进程中执行handleSystemServerProcess</span><br><span class="line">    if (pid == 0) &#123;</span><br><span class="line">        if (hasSecondZygote(abiList)) &#123;</span><br><span class="line">            waitForSecondaryZygote(socketName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handleSystemServerProcess(parsedArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>startSystemServer中，首先为SystemServer准备启动参数，指定uid，gid为1000，进程名为“system_server”，并指定执行类为“com.android.server.SystemServer”。然后执行 Zygote.forkSystemServer()fork出进程，Zygote fork完成后将在子进程<code>system_server</code>中继续执行handleSystemServerProcess()。</p>
<h1 id="Zygote-forkSystemServer"><a href="#Zygote-forkSystemServer" class="headerlink" title="Zygote.forkSystemServer()"></a>Zygote.forkSystemServer()</h1><p>forkSystemServer()继续调用native方法nativeForkSystemServer()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static int forkSystemServer(int uid, int gid, int[] gids, int debugFlags,</span><br><span class="line">        int[][] rlimits, long permittedCapabilities, long effectiveCapabilities) &#123;</span><br><span class="line">    VM_HOOKS.preFork();</span><br><span class="line">    int pid = nativeForkSystemServer(</span><br><span class="line">            uid, gid, gids, debugFlags, rlimits, permittedCapabilities, effectiveCapabilities);</span><br><span class="line">    // Enable tracing as soon as we enter the system_server.</span><br><span class="line">    if (pid == 0) &#123;</span><br><span class="line">        Trace.setTracingEnabled(true);</span><br><span class="line">    &#125;</span><br><span class="line">    VM_HOOKS.postForkCommon();</span><br><span class="line">    return pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>与fork普通应用进程实现一样，nativeForkSystemServer在frameworks/base/core/jni/com_android_internal_os_Zygote.cpp中实现，映射关联到com_android_internal_os_Zygote_nativeForkSystemServer()</p>
<h1 id="nativeForkSystemServer"><a href="#nativeForkSystemServer" class="headerlink" title="nativeForkSystemServer()"></a>nativeForkSystemServer()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;nativeForkSystemServer&quot;, &quot;(II[II[[IJJ)I&quot;,</span><br><span class="line">  (void *) com_android_internal_os_Zygote_nativeForkSystemServer &#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">static jint com_android_internal_os_Zygote_nativeForkSystemServer(</span><br><span class="line">        JNIEnv* env, jclass, uid_t uid, gid_t gid, jintArray gids,</span><br><span class="line">        jint debug_flags, jobjectArray rlimits, jlong permittedCapabilities,</span><br><span class="line">        jlong effectiveCapabilities) &#123;</span><br><span class="line">  // 与fork普通应用进程一样调用ForkAndSpecializeCommon创建出子进程</span><br><span class="line">  pid_t pid = ForkAndSpecializeCommon(env, uid, gid, gids,</span><br><span class="line">                                      debug_flags, rlimits,</span><br><span class="line">                                      permittedCapabilities, effectiveCapabilities,</span><br><span class="line">                                      MOUNT_EXTERNAL_DEFAULT, NULL, NULL, true, NULL,</span><br><span class="line">                                      NULL, NULL);</span><br><span class="line">  if (pid &gt; 0) &#123;</span><br><span class="line">      // 保存system_server进程pid</span><br><span class="line">      gSystemServerPid = pid;</span><br><span class="line"></span><br><span class="line">      int status;</span><br><span class="line">      // 判断system_server是否启动成功，不成功则重启zygote</span><br><span class="line">      if (waitpid(pid, &amp;status, WNOHANG) == pid) &#123;</span><br><span class="line">          ALOGE(&quot;System server process %d has died. Restarting Zygote!&quot;, pid);</span><br><span class="line">          RuntimeAbort(env, __LINE__, &quot;System server process has died. Restarting Zygote!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与创建普通进程的执行流程一样，com_android_internal_os_Zygote_nativeForkSystemServer()最终也是通过调用ForkAndSpecializeCommon()来创建system_server进程，然后执行waitpid来判断system_server是否退出(WNOHANG-若pid指定的子进程没有结束，则waitpid()函数返回0，不予以等待。若结束，则返回该子进程的ID)，如果返回了system_server的pid说明system_server启动失败，Zygote执行RuntimeAbort自杀，然后通过Init重启Zygote与system_server。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// Utility routine to fork zygote and specialize the child process.</span><br><span class="line">static pid_t ForkAndSpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray javaGids,</span><br><span class="line">                                     jint debug_flags, jobjectArray javaRlimits,</span><br><span class="line">                                     jlong permittedCapabilities, jlong effectiveCapabilities,</span><br><span class="line">                                     jint mount_external,</span><br><span class="line">                                     jstring java_se_info, jstring java_se_name,</span><br><span class="line">                                     bool is_system_server, jintArray fdsToClose,</span><br><span class="line">                                     jstring instructionSet, jstring dataDir) &#123;                               </span><br><span class="line">　SetSigChldHandler();　//设置SIGCHLD处理函数SigChldHandler</span><br><span class="line">  ......                      </span><br><span class="line">  pid_t pid = fork();</span><br><span class="line"></span><br><span class="line">  if (pid == 0) &#123;</span><br><span class="line">    // The child process.</span><br><span class="line">    ......</span><br><span class="line">  &#125; else if (pid &gt; 0) &#123;</span><br><span class="line">    // the parent process</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">  return pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ForkAndSpecializeCommon中通过设置SetSigChldHandler接收子进程退出的消息，如果接收到gSystemServerPid退出，那么Zygote将自杀，然后通过Init重启Zygote与system_server。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">static void SigChldHandler(int /*signal_number*/) &#123;</span><br><span class="line">  pid_t pid;</span><br><span class="line">　......</span><br><span class="line">  while ((pid = waitpid(-1, &amp;status, WNOHANG)) &gt; 0) &#123;</span><br><span class="line">    ......</span><br><span class="line">    // If the just-crashed process is the system_server, bring down zygote</span><br><span class="line">    // so that it is restarted by init and system server will be restarted</span><br><span class="line">    // from there.</span><br><span class="line">    if (pid == gSystemServerPid) &#123;</span><br><span class="line">      ALOGE(&quot;Exit zygote because system server (%d) has terminated&quot;, pid);</span><br><span class="line">      kill(getpid(), SIGKILL);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在ForkAndSpecializeCommon中fork出子进程systemServer后，父子进程返回继续执行，子进程(pid == 0)继续执行handleSystemServerProcess。</p>
<h1 id="Zygote-handleSystemServerProcess"><a href="#Zygote-handleSystemServerProcess" class="headerlink" title="Zygote.handleSystemServerProcess()"></a>Zygote.handleSystemServerProcess()</h1><p>在Zygote成功fork出子进程后，将在子进程system_server中执行handleSystemServerProcess()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">private static void handleSystemServerProcess(</span><br><span class="line">        ZygoteConnection.Arguments parsedArgs)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    //关闭继承自父进程zygote的Socket</span><br><span class="line">    closeServerSocket();</span><br><span class="line"></span><br><span class="line">    //umask 0077后system_server创建的文件属性为0700</span><br><span class="line">    Os.umask(S_IRWXG | S_IRWXO);</span><br><span class="line"></span><br><span class="line">    //设置进程名&quot;system_server&quot;,ps可以看到这个进程名</span><br><span class="line">    if (parsedArgs.niceName != null) &#123;</span><br><span class="line">        Process.setArgV0(parsedArgs.niceName);　</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取环境变量SYSTEMSERVERCLASSPATH</span><br><span class="line">    //SYSTEMSERVERCLASSPATH=/system/framework/services.jar:/system/framework/ethernet-service.jar:/system/framework/wifi-service.jar:/system/framework/container-service.jar</span><br><span class="line">    final String systemServerClasspath = Os.getenv(&quot;SYSTEMSERVERCLASSPATH&quot;);</span><br><span class="line">    if (systemServerClasspath != null) &#123;</span><br><span class="line">        // 创建与installd的socket连接，对systemServerClasspath执行dex优化操作</span><br><span class="line">        performSystemServerDexOpt(systemServerClasspath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (parsedArgs.invokeWith != null) &#123;</span><br><span class="line">      ......</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ClassLoader cl = null;</span><br><span class="line">        if (systemServerClasspath != null) &#123;</span><br><span class="line">            cl = createSystemServerClassLoader(systemServerClasspath,</span><br><span class="line">                                               parsedArgs.targetSdkVersion);</span><br><span class="line"></span><br><span class="line">            Thread.currentThread().setContextClassLoader(cl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Pass the remaining arguments to SystemServer.</span><br><span class="line">         */</span><br><span class="line">        RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* should never reach here */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>handleSystemServerProcess()中在关闭Zygote中复制而来的socket，设置进程名，并继续执行RuntimeInit.zygoteInit()</p>
<h1 id="RuntimeInit-zygoteInit"><a href="#RuntimeInit-zygoteInit" class="headerlink" title="RuntimeInit.zygoteInit()"></a>RuntimeInit.zygoteInit()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static final void zygoteInit(int targetSdkVersion, String[] argv, ClassLoader classLoader)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    if (DEBUG) Slog.d(TAG, &quot;RuntimeInit: Starting application from zygote&quot;);</span><br><span class="line"></span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;RuntimeInit&quot;);</span><br><span class="line">    redirectLogStreams();</span><br><span class="line"></span><br><span class="line">    commonInit();</span><br><span class="line">    nativeZygoteInit();</span><br><span class="line">    applicationInit(targetSdkVersion, argv, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>zygoteInit()中主要执行初始化相关的工作，最后将调到startClas(SystemServer)的main方法。commonInit中主要设置了默认的未捕获异常处理方法，timezone等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private static final void commonInit() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 设置Default未捕捉异常处理方法</span><br><span class="line">    /* set default handler; this applies to all threads in the VM */</span><br><span class="line">    Thread.setDefaultUncaughtExceptionHandler(new UncaughtHandler());</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Install a TimezoneGetter subclass for ZoneInfo.db</span><br><span class="line">     */</span><br><span class="line">    TimezoneGetter.setInstance(new TimezoneGetter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String getId() &#123;</span><br><span class="line">            return SystemProperties.get(&quot;persist.sys.timezone&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    TimeZone.setDefault(null);</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Sets handler for java.util.logging to use Android log facilities.</span><br><span class="line">     * The odd &quot;new instance-and-then-throw-away&quot; is a mirror of how</span><br><span class="line">     * the &quot;java.util.logging.config.class&quot; system property works. We</span><br><span class="line">     * can&apos;t use the system property here since the logger has almost</span><br><span class="line">     * certainly already been initialized.</span><br><span class="line">     */</span><br><span class="line">    LogManager.getLogManager().reset();</span><br><span class="line">    new AndroidConfig();</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Sets the default HTTP User-Agent used by HttpURLConnection.</span><br><span class="line">     */</span><br><span class="line">    String userAgent = getDefaultUserAgent();</span><br><span class="line">    System.setProperty(&quot;http.agent&quot;, userAgent);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    initialized = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>nativeZygoteInit在frameworks/base/core/jni/AndroidRuntime.cpp中关联映射到com_android_internal_os_RuntimeInit_nativeZygoteInit，最终调用到frameworks/base/core/jni/AndroidRuntime.cpp的onZygoteInit方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;nativeZygoteInit&quot;, &quot;()V&quot;,</span><br><span class="line">    (void*) com_android_internal_os_RuntimeInit_nativeZygoteInit &#125;,</span><br><span class="line"></span><br><span class="line">static void com_android_internal_os_RuntimeInit_nativeZygoteInit(JNIEnv* env, jobject clazz)</span><br><span class="line">&#123;</span><br><span class="line">    gCurRuntime-&gt;onZygoteInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual void onZygoteInit()</span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;ProcessState&gt; proc = ProcessState::self();</span><br><span class="line">    ALOGV(&quot;App process: starting thread pool.\n&quot;);</span><br><span class="line">    proc-&gt;startThreadPool();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>onZygoteInit中创建SystemServer进程的ProcessState对象，打开并映射binder，并开启线程与其交互。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">private static void applicationInit(int targetSdkVersion, String[] argv, ClassLoader classLoader)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    ......</span><br><span class="line">    设置虚拟机的内存利用率及targetSdkVersion</span><br><span class="line">    VMRuntime.getRuntime().setTargetHeapUtilization(0.75f);</span><br><span class="line">    VMRuntime.getRuntime().setTargetSdkVersion(targetSdkVersion);</span><br><span class="line"></span><br><span class="line">    final Arguments args;</span><br><span class="line">    try &#123;</span><br><span class="line">        args = new Arguments(argv);</span><br><span class="line">    &#125; catch (IllegalArgumentException ex) &#123;</span><br><span class="line">        Slog.e(TAG, ex.getMessage());</span><br><span class="line">        // let the process exit</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    // Remaining arguments are passed to the start class&apos;s static main</span><br><span class="line">    invokeStaticMain(args.startClass, args.startArgs, classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void invokeStaticMain(String className, String[] argv, ClassLoader classLoader)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    Class&lt;?&gt; cl;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        cl = Class.forName(className, true, classLoader);</span><br><span class="line">    &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;Missing class when invoking static main &quot; + className,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Method m;</span><br><span class="line">    try &#123;</span><br><span class="line">        m = cl.getMethod(&quot;main&quot;, new Class[] &#123; String[].class &#125;);</span><br><span class="line">    &#125; catch (NoSuchMethodException ex) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;Missing static main on &quot; + className, ex);</span><br><span class="line">    &#125; catch (SecurityException ex) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;Problem getting static main on &quot; + className, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int modifiers = m.getModifiers();</span><br><span class="line">    if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;Main method is not public and static on &quot; + className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * This throw gets caught in ZygoteInit.main(), which responds</span><br><span class="line">     * by invoking the exception&apos;s run() method. This arrangement</span><br><span class="line">     * clears up all the stack frames that were required in setting</span><br><span class="line">     * up the process.</span><br><span class="line">     */</span><br><span class="line">    throw new ZygoteInit.MethodAndArgsCaller(m, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终在invokeStaticMain中抛出MethodAndArgsCaller异常，并传递参数”com.android.server.SystemServer.main”,ZygoteInit.main()中catch该异常，并调用MethodAndArgsCaller.run反射执行SystemServer.main方法</p>
<h1 id="MethodAndArgsCaller-run"><a href="#MethodAndArgsCaller-run" class="headerlink" title="MethodAndArgsCaller.run()"></a>MethodAndArgsCaller.run()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        mMethod.invoke(null, new Object[] &#123; mArgs &#125;);</span><br><span class="line">    &#125; catch (IllegalAccessException ex) &#123;</span><br><span class="line">        throw new RuntimeException(ex);</span><br><span class="line">    &#125; catch (InvocationTargetException ex) &#123;</span><br><span class="line">        Throwable cause = ex.getCause();</span><br><span class="line">        if (cause instanceof RuntimeException) &#123;</span><br><span class="line">            throw (RuntimeException) cause;</span><br><span class="line">        &#125; else if (cause instanceof Error) &#123;</span><br><span class="line">            throw (Error) cause;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new RuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之消息机制]]></title>
      <url>http://robinheztto.com/2016/11/24/android-handler/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>消息驱动是一种进程/线程的运行模式,内部或者外部的消息事件被放到进程/线程的消息队列中按序处理是现在的操作系统普遍采用的机制.Android也是采用了消息驱动的机制来处理各种外部按键,触屏,系统Intent,广播事件等消息.</p>
<p>Android的消息队列是线程相关的,每启动一个线程,都可以在内部创建一个消息队列,然后在消息队列中不断循环检查是否有新的消息需要处理,如果有,则对该消息进行处理,如果没有,线程就进入休眠状态直到有新的消息需要处理为止.</p>
<hr>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>Android中与消息机制相关的类主要有Looper,MessageQueue,Handler,Message,相关的代码主要在以下文件中:  </p>
<blockquote>
<ul>
<li>frameworks/base/core/java/android/os/Looper.java</li>
<li>frameworks/base/core/java/android/os/Message.java</li>
<li>frameworks/base/core/java/android/os/MessageQueue.java</li>
<li>frameworks/base/core/java/android/os/Handler.java</li>
<li>frameworks/base/core/jni/android_os_MessageQueue.cpp</li>
<li>system/core/libutils/Looper.cpp</li>
</ul>
</blockquote>
<ul>
<li>Looper<br>Looper对象是用来创建消息队列并进入消息循环处理的.每个线程只能有一个Looper对象，同时对应着一个MessageQueue，发送到该线程的消息都将存放在该队列中，并由Looper循环处理。Android默认只为主线程)(UI线程)创建了Looper，所以当我们新建线程需要使用消息队列时必须手动创建Looper.</li>
<li>MessageQueue<br>MessageQueue即消息队列，由Looper创建管理,一个Looper对象对应一个MessageQueue对象.</li>
<li>Handler<br>Handler是消息的接收与处理者，Handler将Message添加到消息队列，同时也通过Handler的回调方法handleMessage()处理对应的消息.一个Handler对象只能关联一个Looper对象，但多个Handler对象可以关联到同一个Looper.默认情况下Handler会关联到实例化Handler线程的Lopper，也可以通过Handler的构造函数的Looper参数指定Handler关联到某个线程的Looper，即发送消息到某个指定线程并在该线程中回调Handler处理该消息.</li>
<li>Message<br>Message是消息的载体，Parcelable的派生类，通过其成员变量target关联到Handler对象.  </li>
</ul>
<p>它们之间关系如下图示：<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/handler-looper-messagequeue.jpg?raw=true" alt="Handler,Looper,MessageQueue之间的关系"></p>
<p>在代码中我们一般如下使用线程的消息机制:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Looper.prepare();</span><br><span class="line"></span><br><span class="line">          mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// process incoming messages here</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          Looper.loop();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="线程消息队列的创建"><a href="#线程消息队列的创建" class="headerlink" title="线程消息队列的创建"></a>线程消息队列的创建</h3><p>线程的消息队列通过Looper创建并维护的，主线程中调用Looper.prepareMainLooper(),其他子线程中调用Looper.prepare()来创建消息队列.一个线程多次调用prepareMainLooper()或prepare()将会抛出异常.</p>
<p>在介绍消息队列创建之前,首先了解一下Looper与MessageQueue,再看消息队列创建的流程.</p>
<ol>
<li><p>Looper类的主要成员变量与方法如下:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  </span><br><span class="line">      <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">      <span class="keyword">final</span> Thread mThread;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>sThreadLocal是静态成员变量,用于保存线程私有的Looper对象</li>
<li>sMainLooper是主线程的Looper对象.在prepareMainLooper()中赋值,可通过调用getMainLooper获取</li>
<li>mQueue即消息队列,在Looper构造函数中初始化</li>
<li>mThread即Looper所在的线程</li>
</ul>
</li>
<li><p>MessageQueue类的主要成员变量与方法如下:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mQuitAllowed;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">long</span> mPtr;</span><br><span class="line">      Message mMessages;</span><br><span class="line"></span><br><span class="line">      MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>mQuitAllowed代表是否允许退出消息循环,主线程中默认为false,子线程默认false</li>
<li>mPtr保存的是NativeMessageQueue的地址,通过该地址就可以找到java层MessageQueue所对应native的MessageQueue.</li>
<li>mMessages即消息队列,通过mMessages可以遍历整个消息队列</li>
</ul>
</li>
<li>消息队列的创建:<br>消息队列的创建从Looper.prepare()/Looper.prepareMainLooper()开始</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      prepare(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">          <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          sMainLooper = myLooper();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">      mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">      mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过调用prepare()或prepareMainLooper()创建Looper对象,然后保存到sThreadLocal中,sThreadLocal是模板类ThreadLocal<t>,它通过线程ID与对象关联的方式实现线程本地存储功能.这样放入sThreadLocal对象中的Looper对象就与创建它的线程关联起来了.所以可以从sThreadLocal中获取到保存的Looper对象:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p>
<p>主线程的Loopper对象保存在sMainLooper,可以通过getMainLooper获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">          <span class="keyword">return</span> sMainLooper;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建Looper同时会创建Looper关联的MessageQueue并赋值给成员变量mQueue,接下来再看new MessageQueue(quitAllowed)的过程:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;</span><br><span class="line">      mQuitAllowed = quitAllowed;</span><br><span class="line">      mPtr = nativeInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到,直接调用了nativeInit().这个JNI方法定义在android_os_MessageQueue.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">android_os_MessageQueue_nativeInit</span><span class="params">(JNIEnv* env, jclass clazz)</span> </span>&#123;</span><br><span class="line">      NativeMessageQueue* nativeMessageQueue = <span class="keyword">new</span> NativeMessageQueue();</span><br><span class="line">      <span class="keyword">if</span> (!nativeMessageQueue) &#123;</span><br><span class="line">          jniThrowRuntimeException(env, <span class="string">"Unable to allocate native queue"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      nativeMessageQueue-&gt;incStrong(env);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(nativeMessageQueue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>nativeInit()中首先创建了nativeMessageQueue,然后又将nativeMessageQueue的地址赋值给java层的mPtr,所以java层的MessageQueue就可以通过mPtr找到nativeMessageQueue了.<br>再看new NativeMessageQueue()过程,NativeMessageQueue的构造如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NativeMessageQueue::NativeMessageQueue() : mInCallback(<span class="literal">false</span>), mExceptionObj(<span class="literal">NULL</span>) &#123;</span><br><span class="line">      mLooper = Looper::getForThread();</span><br><span class="line">      <span class="keyword">if</span> (mLooper == <span class="literal">NULL</span>) &#123;</span><br><span class="line">          mLooper = <span class="keyword">new</span> Looper(<span class="literal">false</span>);</span><br><span class="line">          Looper::setForThread(mLooper);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它首先通过Looper::getForThread()判断当前线程是否已创建过Looper对象,如果没有则创建.注意,这个Looper对象是实现在JNI层的,与上面Java层的Looper是不一样的,不过也是对应的关系.JNI层的Looper对象的创建过程是在Looper.cpp中实现的.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Looper::Looper(<span class="keyword">bool</span> allowNonCallbacks) :</span><br><span class="line">        mAllowNonCallbacks(allowNonCallbacks), mSendingMessage(<span class="literal">false</span>),</span><br><span class="line">        mPolling(<span class="literal">false</span>), mEpollFd(<span class="number">-1</span>), mEpollRebuildRequired(<span class="literal">false</span>),</span><br><span class="line">        mNextRequestSeq(<span class="number">0</span>), mResponseIndex(<span class="number">0</span>), mNextMessageUptime(LLONG_MAX) &#123;</span><br><span class="line">    mWakeEventFd = eventfd(<span class="number">0</span>, EFD_NONBLOCK);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(mWakeEventFd &lt; <span class="number">0</span>, <span class="string">"Could not make wake event fd.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line">    rebuildEpollLocked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建eventfd并赋值给mWakeEventFd,在以前的Android版本上,这里创建的是pipe管道.eventfd是较新的API,被用作一个事件等待/响应,实现了线程之间事件通知.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::rebuildEpollLocked() &#123;</span><br><span class="line">    <span class="comment">// Close old epoll instance if we have one.</span></span><br><span class="line">    <span class="keyword">if</span> (mEpollFd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_CALLBACKS</span></span><br><span class="line">        ALOGD(<span class="string">"%p ~ rebuildEpollLocked - rebuilding epoll set"</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        close(mEpollFd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate the new epoll instance and register the wake pipe.</span></span><br><span class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(mEpollFd &lt; <span class="number">0</span>, <span class="string">"Could not create epoll instance.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> epoll_event eventItem;</span><br><span class="line">    <span class="built_in">memset</span>(&amp; eventItem, <span class="number">0</span>, <span class="keyword">sizeof</span>(epoll_event)); <span class="comment">// zero out unused members of data field union</span></span><br><span class="line">    eventItem.events = EPOLLIN;</span><br><span class="line">    eventItem.data.fd = mWakeEventFd;</span><br><span class="line">    <span class="keyword">int</span> result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeEventFd, &amp; eventItem);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result != <span class="number">0</span>, <span class="string">"Could not add wake event fd to epoll instance.  errno=%d"</span>,</span><br><span class="line">            errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mRequests.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> Request&amp; request = mRequests.valueAt(i);</span><br><span class="line">        <span class="keyword">struct</span> epoll_event eventItem;</span><br><span class="line">        request.initEventItem(&amp;eventItem);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> epollResult = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, request.fd, &amp; eventItem);</span><br><span class="line">        <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"Error adding epoll events for fd %d while rebuilding epoll set, errno=%d"</span>,</span><br><span class="line">                    request.fd, errno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>rebuildEpollLocked中通过epoll_create创建了一个epoll专用的文件描述符,EPOLL_SIZE_HINT表示mEpollFd上能监控的最大文件描述符数.最后调用epoll_ctl监控mWakeEventFd文件描述符的EPOLLIN事件，即当eventfd中有内容可读时，就唤醒当前正在等待的线程.  </p>
<p>C++层的这个Looper对象创建好了之后，就返回到JNI层的NativeMessageQueue的构造函数，再返回到Java层的消息队列MessageQueue的创建过程,最后从Looper的构造函数中返回.线程消息队列的创建过程也就此完成.</p>
<p>总结一下:  </p>
<ul>
<li>首先在Java层创建了一个Looper对象，然后创建MessageQueue对象mQueue,进入MessageQueue的创建过程</li>
<li>MessageQueue在JNI层创建了一个NativeMessageQueue对象,并将这个对象保存在MessageQueue的成员变量mPtr中</li>
<li>在JNI层，创建了NativeMessageQueue对象时,会创建了一个Looper对象，保存在JNI层的NativeMessageQueue对象的成员变量mLooper中，这个对象的作用是，当Java层的消息队列中没有消息时，就使Android应用程序线程进入等待状态，而当Java层的消息队列中来了新的消息后，就唤醒Android应用程序的线程来处理这个消息</li>
<li>关于java层与JNI层的Looper,MessageQueue对象可以这样理解,java层的Looper,MessageQueue主要实现了消息队列发送处理逻辑,而JNI层的主要实现是线程的等待/唤醒.在逻辑上他们还是一一对应的关系,只不过侧重点不同.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/Looper_MessageQueue.png?raw=true" alt="java与jni层Looper,MessageQueue关系"></li>
</ul>
<hr>
<h3 id="线程消息队列的循环"><a href="#线程消息队列的循环" class="headerlink" title="线程消息队列的循环"></a>线程消息队列的循环</h3><p>当线程消息队列创建完成后,即进入消息队列循环处理过程中,Android消息队列的循环通过Loop.Loop()来实现,整个流程如下图示.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/loop_message.jpg?raw=true" alt="消息队列循环流程"></p>
<p>下面具体来看具体分析<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">      <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">          <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          ...</span><br><span class="line">          msg.target.dispatchMessage(msg);</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>进入loop前,首先通过myLooper()拿到前面创建的Looper对象,如果为null将会抛出异常,这也就是为什么必须在Looper.loop()之前调用Looper.prepare()或者Looper.prepareMainLooper()的原因.接下来通过me.mQueue拿到MessageQueue对象,而后进入到无尽循环处理中.在循环中通过queue.next()从队列中取消息,再调用msg.target.dispatchMessage(msg)处理.下面看一下queue.next()流程.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">      <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">              Binder.flushPendingCommands();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">              Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">              Message msg = mMessages;</span><br><span class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  do &#123;</span><br><span class="line">                      prevMsg = msg;</span><br><span class="line">                      msg = msg.next;</span><br><span class="line">                  &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                      nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                      <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                          prevMsg.next = msg.next;</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          mMessages = msg.next;</span><br><span class="line">                      &#125;</span><br><span class="line">                      msg.next = <span class="keyword">null</span>;</span><br><span class="line">                      <span class="keyword">if</span> (<span class="keyword">false</span>) Log.v(<span class="string">"MessageQueue"</span>, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                      <span class="keyword">return</span> msg;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                  dispose();</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                      &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                  pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">              &#125;</span><br><span class="line">              mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">              <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">              mPendingIdleHandlers[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  keep = idler.queueIdle();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                  Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                      mIdleHandlers.remove(idler);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">          nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>先看一下开始定义的2个变量的含义,pendingIdleHandlerCount表示消息队列空闲消息处理器(IdleHandler)的个数,nextPollTimeoutMillis表示没有消息处理时,线程需睡眠等待的时间.nativePollOnce将会睡眠等待nextPollTimeoutMillis时间.从nativePollOnce返回后,再从消息队列中取消息,如果没有任何消息,那么nextPollTimeoutMillis赋值为-1,表示下一次nativePollOnce无限制等待直到其他线程把它唤醒.如果取到消息,比较消息处理的时间与当前时间,如果消息处理的时间未到(now &lt; msg.when),那么计算nextPollTimeoutMillis,等下一次时间到时再处理.如果消息处理时间已到,那么取出消息返回到Looperde的loop中处理.另外如果当前没有消息处理时,会回调注册的IdleHandler.<br>下面继续分析nativePollOnce.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativePollOnce</span><span class="params">(JNIEnv* env, jobject obj,</span><br><span class="line">        jlong ptr, jint timeoutMillis)</span> </span>&#123;</span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">    nativeMessageQueue-&gt;pollOnce(env, obj, timeoutMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NativeMessageQueue::pollOnce(JNIEnv* env, jobject pollObj, <span class="keyword">int</span> timeoutMillis) &#123;</span><br><span class="line">    mPollEnv = env;</span><br><span class="line">    mPollObj = pollObj;</span><br><span class="line">    mLooper-&gt;pollOnce(timeoutMillis);</span><br><span class="line">    mPollObj = <span class="literal">NULL</span>;</span><br><span class="line">    mPollEnv = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mExceptionObj) &#123;</span><br><span class="line">        env-&gt;Throw(mExceptionObj);</span><br><span class="line">        env-&gt;DeleteLocalRef(mExceptionObj);</span><br><span class="line">        mExceptionObj = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终nativePollOnce调用的JNI层Looper的pollOnce<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Looper::pollOnce(<span class="keyword">int</span> timeoutMillis, <span class="keyword">int</span>* outFd, <span class="keyword">int</span>* outEvents, <span class="keyword">void</span>** outData) &#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = pollInner(timeoutMillis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在pollOnce中不断的循环调用pollInner来检查线程是否有新消息需要处理.如果有新消息处理或者timeoutMillis时间到,则返回到java层MessageQueue的next()继续执行.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Looper::pollInner(<span class="keyword">int</span> timeoutMillis) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> result = POLL_WAKE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> epoll_event eventItems[EPOLL_MAX_EVENTS];</span><br><span class="line">    <span class="keyword">int</span> eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fd = eventItems[i].data.fd;</span><br><span class="line">        <span class="keyword">uint32_t</span> epollEvents = eventItems[i].events;</span><br><span class="line">        <span class="keyword">if</span> (fd == mWakeEventFd) &#123;</span><br><span class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</span><br><span class="line">                awoken();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ALOGW(<span class="string">"Ignoring unexpected epoll events 0x%x on wake event fd."</span>, epollEvents);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>epoll_wait会监听前面创建的epoll实例的文件描述符上的IO读写事件,如果文件描述上没有IO事件出现,那么则等待timeoutMillis延时,检测到EPOLLIN事件即文件描述符上发生了写事件,随后调用awoken读出数据,以便接收新的数据.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::awoken() &#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> counter;</span><br><span class="line">    TEMP_FAILURE_RETRY(read(mWakeEventFd, &amp;counter, <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在awoken中读出数据.然后一步步返回到java层的MessageQueue继续消息处理.</p>
<hr>
<h3 id="线程消息的发送"><a href="#线程消息的发送" class="headerlink" title="线程消息的发送"></a>线程消息的发送</h3><p>消息的发送是通过Handler来执行的,下面我们从new Handler()开始,一步步分析消息的发送过程<br>首先看一下Handler类的主要数据成员与方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">      <span class="keyword">final</span> Looper mLooper;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;...&#125;</span><br><span class="line">      ...</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtFrontOfQueue</span><span class="params">(Runnable r)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, <span class="keyword">long</span> uptimeMillis)</span></span>&#123;...&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>mQueue handler对应的MessageQueue对象,通过handler发送的消息都将插入到mQueue队列中</li>
<li>mLooper handler对应的Looper对象,如果创建Handler前没有实例化Looper对象将抛出异常.</li>
</ul>
<p>Handler是与Looper对象相关联的,我们创建的Handler对象都会关联到某一Looper,默认情况下,Handler会关联到创建Handler对象所在线程的Looper对象,也可通过Handler的构造函数来指定关联到的Looper.Handler发送消息有二类接口,post类与send类,一般send类用来发送传统带消息ID的消息，post类用来发送带消息处理方法的消息.</p>
<p>下面来看消息发送的具体流程<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/send_message.jpg?raw=true" alt="消息发送流程"><br>Handler或Post类方法最终都会调用enqueueMessage将消息发送到消息队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">      msg.target = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">          msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Message的成员变量target赋值为this，即关联到handler.然后继续调用MessageQueue的enqueueMessage方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/// M: Add message protect mechanism @&#123;</span></span><br><span class="line">      <span class="keyword">if</span> (msg.hasRecycle) &#123;</span><br><span class="line">          Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"Warning: message has been recycled. msg="</span> + msg);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/// Add message protect mechanism @&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">              IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                      msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">              Log.w(<span class="string">"MessageQueue"</span>, e.getMessage(), e);</span><br><span class="line">              msg.recycle();</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          msg.markInUse();</span><br><span class="line">          msg.when = when;</span><br><span class="line">          Message p = mMessages;</span><br><span class="line">          <span class="keyword">boolean</span> needWake;</span><br><span class="line">          <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">              <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">              msg.next = p;</span><br><span class="line">              mMessages = msg;</span><br><span class="line">              needWake = mBlocked;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">              <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">              <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">              needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">              Message prev;</span><br><span class="line">              <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                  prev = p;</span><br><span class="line">                  p = p.next;</span><br><span class="line">                  <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                      needWake = <span class="keyword">false</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">              prev.next = msg;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">          <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">              nativeWake(mPtr);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MessageQueue中的enqueueMessage主要工作是将message插入到队列，然后根据情况判断是否应该调用nativeWake唤醒目标线程.当前队列为空或者插入消息处理时间延时为0或者处理时间小于队头处理时间时，消息被插入到头部，否则按时间遍历插入到对应位置，并设置needWake标志，needWake是根据mBlocked来判断的，mBlocked记录了当前线程是否处于睡眠状态，如果消息插入队头且线程在睡眠中，neeWake为true，调用nativeWake唤醒目标线程.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativeWake</span><span class="params">(JNIEnv* env, jclass clazz, jlong ptr)</span> </span>&#123;</span><br><span class="line">      NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">      <span class="keyword">return</span> nativeMessageQueue-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NativeMessageQueue::wake() &#123;</span><br><span class="line">      mLooper-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::wake() &#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> inc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> nWrite = TEMP_FAILURE_RETRY(write(mWakeEventFd, &amp;inc, <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)));</span><br><span class="line">    <span class="keyword">if</span> (nWrite != <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EAGAIN) &#123;</span><br><span class="line">            ALOGW(<span class="string">"Could not write wake signal, errno=%d"</span>, errno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nativeWake最终会调用到jni层的Looper对象的wake方法中,Looper wake方法的实现非常简单,即向mWakeEventFd写入一个uint64_t,这样目标线程就会因为mWakeEventFd发生的IO事件而唤醒.消息的发送流程就此结束.</p>
<hr>
<h3 id="线程消息的处理"><a href="#线程消息的处理" class="headerlink" title="线程消息的处理"></a>线程消息的处理</h3><p>从前面的分析可以知道,当线程没有消息需要处理时,会在c++层Looper对象的pollInner中进入睡眠等待,当有新消息唤醒该目标线程时或这延时时间到,执行流程将沿着pollInner调用路径一直返回,直到java层Looper类的loop.<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/hand_message.jpg?raw=true" alt="消息处理流程"><br>loop中将调用msg.target.dispatchMessage(msg)处理消息,这里的msg.target就是上面enqueueMessage中所赋值的handler,即进入handler的dispatchMessage处理消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">          handleCallback(msg);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          handleMessage(msg);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>dispatchMessage进行消息处理,先检查是否有设置msg.callback,如果有则执行msg.callback处理消息,如果没有则继续判断mCallback的执行,最后才是handleMessage处理.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android-binder-7]]></title>
      <url>http://robinheztto.com/2016/11/23/android-binder-7/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Debug之系统启动]]></title>
      <url>http://robinheztto.com/2016/11/05/android-debug-boot/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Debug:系统启动问题</p>
</blockquote>
<h1 id="Boot-Flow"><a href="#Boot-Flow" class="headerlink" title="Boot Flow"></a>Boot Flow</h1><p>Android Boot Flow如下图示：</p>
<p><div align="center"><br><img src="https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/android-debug-boot.jpg?raw=true" alt="Android Boot Flow"><br></div></p>
<h1 id="Boot-Debug"><a href="#Boot-Debug" class="headerlink" title="Boot Debug"></a>Boot Debug</h1><h2 id="BootRom"><a href="#BootRom" class="headerlink" title="BootRom"></a>BootRom</h2><h2 id="LK"><a href="#LK" class="headerlink" title="LK"></a>LK</h2><p>抓取Uart log<br>LK执行时间的计算需借助Trace32并在<code>start of kernel</code>设置断点计算执行时间。</p>
<h2 id="Android-Boot"><a href="#Android-Boot" class="headerlink" title="Android Boot"></a>Android Boot</h2><ol>
<li><p>Catch log:<br>开机后执行以下命令抓取log。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb wait-for-device root</span><br><span class="line">adb wait-for-device</span><br><span class="line">adb shell dmesg &gt; dmesg.txt</span><br><span class="line">adb logcat -b events -d &gt; logcat_events.txt</span><br><span class="line">adb logcat -v time thread -d &gt; logcat.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>Log analysis:<br>根据关键的event log进行分析，正常启动的events log中应该包含如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">01-08 11:46:10.253   760   760 I boot_progress_start: 27961</span><br><span class="line">//Zygote64 begin to start</span><br><span class="line">01-08 11:46:11.828   760   760 I boot_progress_preload_start: 29537</span><br><span class="line">//Zygote32 begin to start</span><br><span class="line">01-08 11:46:12.185   761   761 I boot_progress_preload_start: 29892</span><br><span class="line">//Zygote64 end</span><br><span class="line">01-08 11:46:14.595   760   760 I boot_progress_preload_end: 32303</span><br><span class="line">//Zygote32 end</span><br><span class="line">01-08 11:46:14.774   761   761 I boot_progress_preload_end: 32483</span><br><span class="line">//System ready</span><br><span class="line">01-08 11:46:14.956  1429  1429 I boot_progress_system_run: 32664</span><br><span class="line">// package scan begin</span><br><span class="line">01-08 11:46:15.496  1429  1429 I boot_progress_pms_start: 33204</span><br><span class="line">//scan system folder</span><br><span class="line">01-08 11:46:16.069  1429  1429 I boot_progress_pms_system_scan_start: 33777</span><br><span class="line">//scan data folder</span><br><span class="line">01-08 11:46:17.757  1429  1429 I boot_progress_pms_data_scan_start: 35466</span><br><span class="line">//scan end</span><br><span class="line">01-08 11:46:17.868  1429  1429 I boot_progress_pms_scan_end: 35577</span><br><span class="line">//PMS ready</span><br><span class="line">01-08 11:46:18.401  1429  1429 I boot_progress_pms_ready: 36109</span><br><span class="line">//AMS ready</span><br><span class="line">01-08 11:46:20.632  1429  1429 I boot_progress_ams_ready: 38341</span><br><span class="line">//Home activiy start</span><br><span class="line">01-08 11:46:22.081  1429  1464 I boot_progress_enable_screen: 39789</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>根据以上log可以清楚的计算出每个步骤所用时间：</p>
<ul>
<li>Kernel part : boot_progress_start</li>
<li>Zygote time : boot_progress_preload_end - boot_progress_preload_start</li>
<li>/system Scan time : boot_progress_pms_data_scan_start - boot_progress_pms_system_scan_start</li>
<li>/data Scan time : boot_progress_pms_scan_end- boot_progress_pms_data_scan_start</li>
<li>Home activity start time : boot_progress_enable_screen- boot_progress_ams_ready</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Zygote-应用进程创建]]></title>
      <url>http://robinheztto.com/2016/07/02/android-zygote-2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Android上的应用程序由各种组件(<strong>activity</strong>,<strong>service</strong>,<strong>broadcastReceiver</strong>,<strong>contentProvider</strong>)组合，在启动应用的某个组件之前，必须先向zygote请求创建该应用的进程，以充当运行这些组件的容器。此篇博客主要分析Zygote创建应用进程的过程。相关源码在以下文件中：</p>
<ul>
<li>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</li>
<li>frameworks/base/core/java/android/os/Process.java</li>
<li>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</li>
<li>frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</li>
<li>frameworks/base/core/java/com/android/internal/os/Zygote.java</li>
<li>frameworks/base/core/jni/com_android_internal_os_Zygote.cpp</li>
</ul>
</blockquote>
<p>根据上一篇博客<strong>Android之Zygote-启动流程</strong>的分析，zygote通过/dev/socket/zygote来接收客户端的请求，而发起请求的一端则是运行于system_server进程中的ActivityManagerService。</p>
<h1 id="AMS-Request"><a href="#AMS-Request" class="headerlink" title="AMS Request"></a>AMS Request</h1><p>AMS需要创建新的进程来执行某个组件时，调用ActivityManagerService.startProcessLocked()向Zygote发送创建新进程的请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private final void startProcessLocked(ProcessRecord app, String hostingType,</span><br><span class="line">        String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) &#123;</span><br><span class="line">    ......</span><br><span class="line">    try &#123;</span><br><span class="line">        int uid = app.uid;</span><br><span class="line">        int[] gids = null;</span><br><span class="line">        int mountExternal = Zygote.MOUNT_EXTERNAL_NONE;</span><br><span class="line">        app.gids = gids;</span><br><span class="line">        app.requiredAbi = requiredAbi;</span><br><span class="line">        app.instructionSet = instructionSet;</span><br><span class="line">        ......</span><br><span class="line">        boolean isActivityProcess = (entryPoint == null);</span><br><span class="line">        if (entryPoint == null) entryPoint = &quot;android.app.ActivityThread&quot;;</span><br><span class="line">        Process.ProcessStartResult startResult = Process.start(entryPoint,</span><br><span class="line">                app.processName, uid, uid, gids, debugFlags, mountExternal,</span><br><span class="line">                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</span><br><span class="line">                app.info.dataDir, entryPointArgs);</span><br><span class="line">        ......</span><br><span class="line">    &#125; catch (RuntimeException e) &#123;</span><br><span class="line">        Slog.e(TAG, &quot;Failure starting process &quot; + app.processName, e);</span><br><span class="line">        forceStopPackageLocked(app.info.packageName, UserHandle.getAppId(app.uid), false,</span><br><span class="line">                false, true, false, false, UserHandle.getUserId(app.userId), &quot;start failure&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>startProcessLocked中指定uid，gid，应用程序入口等信息，并调用Process.start()启动进程,下面是Process.start()的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static final ProcessStartResult start(final String processClass,</span><br><span class="line">                              final String niceName,</span><br><span class="line">                              int uid, int gid, int[] gids,</span><br><span class="line">                              int debugFlags, int mountExternal,</span><br><span class="line">                              int targetSdkVersion,</span><br><span class="line">                              String seInfo,</span><br><span class="line">                              String abi,</span><br><span class="line">                              String instructionSet,</span><br><span class="line">                              String appDataDir,</span><br><span class="line">                              String[] zygoteArgs) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return startViaZygote(processClass, niceName, uid, gid, gids,</span><br><span class="line">                debugFlags, mountExternal, targetSdkVersion, seInfo,</span><br><span class="line">                abi, instructionSet, appDataDir, zygoteArgs);</span><br><span class="line">    &#125; catch (ZygoteStartFailedEx ex) &#123;</span><br><span class="line">        Log.e(LOG_TAG,</span><br><span class="line">                &quot;Starting VM process through Zygote failed&quot;);</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;Starting VM process through Zygote failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Process.start()进一步调用startViaZygote()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private static ProcessStartResult startViaZygote(final String processClass,</span><br><span class="line">                              final String niceName,</span><br><span class="line">                              final int uid, final int gid,</span><br><span class="line">                              final int[] gids,</span><br><span class="line">                              int debugFlags, int mountExternal,</span><br><span class="line">                              int targetSdkVersion,</span><br><span class="line">                              String seInfo,</span><br><span class="line">                              String abi,</span><br><span class="line">                              String instructionSet,</span><br><span class="line">                              String appDataDir,</span><br><span class="line">                              String[] extraArgs)</span><br><span class="line">                              throws ZygoteStartFailedEx &#123;</span><br><span class="line">    synchronized(Process.class) &#123;</span><br><span class="line">        // 构造发送给Zygote的进程启动参数argsForZygote</span><br><span class="line">        ArrayList&lt;String&gt; argsForZygote = new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        // --runtime-args, --setuid=, --setgid=,</span><br><span class="line">        // and --setgroups= must go first</span><br><span class="line">        argsForZygote.add(&quot;--runtime-args&quot;);  // 指定zygote在fork进程后执行ZygoteInit()方法并启动binder线程池</span><br><span class="line">        argsForZygote.add(&quot;--setuid=&quot; + uid); // 指定进程的user id</span><br><span class="line">        argsForZygote.add(&quot;--setgid=&quot; + gid); // 指定进程的group id</span><br><span class="line">        ...... //argsForZygote.add(...)</span><br><span class="line">        argsForZygote.add(&quot;--target-sdk-version=&quot; + targetSdkVersion);　// app target SDK</span><br><span class="line">        ...... //argsForZygote.add(...)</span><br><span class="line">        argsForZygote.add(processClass);  // 指定fork以后执行的java类，“android.app.ActivityThread”</span><br><span class="line"></span><br><span class="line">        if (extraArgs != null) &#123;</span><br><span class="line">            for (String arg : extraArgs) &#123;</span><br><span class="line">                argsForZygote.add(arg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>startViaZygote()的主要工作是创进程启动参数argsForZygote，并通过zygoteSendArgsAndGetResult发送给zygote请求fork子进程。<br>zygoteSendArgsAndGetResult()的第一个参数类型是ZygoteState，ZygoteState是Process类中的静态内部类，负责与zygote socket通信细节。在分析zygoteSendArgsAndGetResult之前先看一下ZygoteState的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public static class ZygoteState &#123;</span><br><span class="line">    // LocalSocket,用来与zygote的LocalServerSocket通信</span><br><span class="line">    final LocalSocket socket;</span><br><span class="line">    // 输入流</span><br><span class="line">    final DataInputStream inputStream;</span><br><span class="line">    // 输出流</span><br><span class="line">    final BufferedWriter writer;</span><br><span class="line">    // abilist(application binary interface)，用与判断32/64位执行</span><br><span class="line">    final List&lt;String&gt; abiList;</span><br><span class="line"></span><br><span class="line">    boolean mClosed;</span><br><span class="line"></span><br><span class="line">    private ZygoteState(LocalSocket socket, DataInputStream inputStream,</span><br><span class="line">            BufferedWriter writer, List&lt;String&gt; abiList) &#123;</span><br><span class="line">        this.socket = socket;</span><br><span class="line">        this.inputStream = inputStream;</span><br><span class="line">        this.writer = writer;</span><br><span class="line">        this.abiList = abiList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 连接ZYGOTE_SOCKET(使用字符串作为地址)</span><br><span class="line">    public static ZygoteState connect(String socketAddress) throws IOException &#123;</span><br><span class="line">        DataInputStream zygoteInputStream = null;</span><br><span class="line">        BufferedWriter zygoteWriter = null;</span><br><span class="line">        final LocalSocket zygoteSocket = new LocalSocket();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // socketAddress为ZYGOTE_SOCKET即“zygote”</span><br><span class="line">            zygoteSocket.connect(new LocalSocketAddress(socketAddress,</span><br><span class="line">                    LocalSocketAddress.Namespace.RESERVED));</span><br><span class="line"></span><br><span class="line">            // 初始输入输出流</span><br><span class="line">            zygoteInputStream = new DataInputStream(zygoteSocket.getInputStream());</span><br><span class="line"></span><br><span class="line">            zygoteWriter = new BufferedWriter(new OutputStreamWriter(</span><br><span class="line">                    zygoteSocket.getOutputStream()), 256);</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                zygoteSocket.close();</span><br><span class="line">            &#125; catch (IOException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String abiListString = getAbiList(zygoteWriter, zygoteInputStream);</span><br><span class="line"></span><br><span class="line">        return new ZygoteState(zygoteSocket, zygoteInputStream, zygoteWriter,</span><br><span class="line">                Arrays.asList(abiListString.split(&quot;,&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 通过match来判断primaryZygoteState或secondaryZygoteState</span><br><span class="line">    boolean matches(String abi) &#123;</span><br><span class="line">        return abiList.contains(abi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void close() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            Log.e(LOG_TAG,&quot;I/O exception on routine close&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mClosed = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean isClosed() &#123;</span><br><span class="line">        return mClosed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>zygoteSendArgsAndGetResult的第一个参数为openZygoteSocketIfNeeded(abi),即通过abi选择对应的ZygoteState(分别connect /dev/socket/zygote或/dev/socket/zygote_secondary)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private static ZygoteState openZygoteSocketIfNeeded(String abi) throws ZygoteStartFailedEx &#123;</span><br><span class="line">    if (primaryZygoteState == null || primaryZygoteState.isClosed()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建localSocket,connect zygote并返回ZygoteState</span><br><span class="line">            primaryZygoteState = ZygoteState.connect(ZYGOTE_SOCKET);</span><br><span class="line">        &#125; catch (IOException ioe) &#123;</span><br><span class="line">            throw new ZygoteStartFailedEx(&quot;Error connecting to primary zygote&quot;, ioe);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (primaryZygoteState.matches(abi)) &#123;</span><br><span class="line">        return primaryZygoteState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // The primary zygote didn&apos;t match. Try the secondary.</span><br><span class="line">    if (secondaryZygoteState == null || secondaryZygoteState.isClosed()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">        secondaryZygoteState = ZygoteState.connect(SECONDARY_ZYGOTE_SOCKET);</span><br><span class="line">        &#125; catch (IOException ioe) &#123;</span><br><span class="line">            throw new ZygoteStartFailedEx(&quot;Error connecting to secondary zygote&quot;, ioe);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (secondaryZygoteState.matches(abi)) &#123;</span><br><span class="line">        return secondaryZygoteState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    throw new ZygoteStartFailedEx(&quot;Unsupported zygote ABI: &quot; + abi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>回到zygoteSendArgsAndGetResult方法，继续分析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">private static ProcessStartResult zygoteSendArgsAndGetResult(</span><br><span class="line">        ZygoteState zygoteState, ArrayList&lt;String&gt; args)</span><br><span class="line">        throws ZygoteStartFailedEx &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // ......</span><br><span class="line">        // 从zygoteState获取输入输出流</span><br><span class="line">        final BufferedWriter writer = zygoteState.writer;</span><br><span class="line">        final DataInputStream inputStream = zygoteState.inputStream;</span><br><span class="line"></span><br><span class="line">        // 向socket写入请求参数.</span><br><span class="line">        writer.write(Integer.toString(args.size()));</span><br><span class="line">        writer.newLine();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; sz; i++) &#123;</span><br><span class="line">            String arg = args.get(i);</span><br><span class="line">            writer.write(arg);</span><br><span class="line">            writer.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer.flush();</span><br><span class="line"></span><br><span class="line">        // Should there be a timeout on this?</span><br><span class="line">        ProcessStartResult result = new ProcessStartResult();</span><br><span class="line"></span><br><span class="line">        //等待zygote返回新创建的进程pid;</span><br><span class="line">        result.pid = inputStream.readInt();</span><br><span class="line">        result.usingWrapper = inputStream.readBoolean();</span><br><span class="line"></span><br><span class="line">        if (result.pid &lt; 0) &#123;</span><br><span class="line">            throw new ZygoteStartFailedEx(&quot;fork() failed&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        zygoteState.close();</span><br><span class="line">        throw new ZygoteStartFailedEx(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>zygoteSendArgsAndGetResult通过socket向zygote发送创建进程请求及参数，并等待创建结束返回pid。</p>
<h1 id="Zygote-Handle"><a href="#Zygote-Handle" class="headerlink" title="Zygote Handle"></a>Zygote Handle</h1><p>Zygote端的处理流程如下图示：<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/android-zygote-fork-app.jpg?raw=true" alt="android-zygote-fork-app-process"></p>
<p>下面从ZygoteInit.main()开始分析在Zygote服务端处理创建进程的流程．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String argv[]) &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        ......</span><br><span class="line">        registerZygoteSocket(socketName);</span><br><span class="line">        ......</span><br><span class="line">        runSelectLoop(abiList);</span><br><span class="line">        closeServerSocket();</span><br><span class="line">    &#125; catch (MethodAndArgsCaller caller) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">        closeServerSocket();</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ZygoteInit.main()中首先通过registerZygoteSocket创建服务端LocalServerSocket，然后在runSelectLoop()中循环等待处理客户端连接并处理．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private static final String ANDROID_SOCKET_PREFIX = &quot;ANDROID_SOCKET_&quot;;</span><br><span class="line">private static LocalServerSocket sServerSocket;</span><br><span class="line"></span><br><span class="line">private static void registerZygoteSocket(String socketName) &#123;</span><br><span class="line">    if (sServerSocket == null) &#123;</span><br><span class="line">        int fileDesc;</span><br><span class="line">        final String fullSocketName = ANDROID_SOCKET_PREFIX + socketName;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 从环境变量ANDROID_SOCKET_zygote获取/dev/socket/zygote*句柄(可参考上篇博客Android之Zygote-启动流程中init进程启动zygote服务的分析)</span><br><span class="line">            String env = System.getenv(fullSocketName);</span><br><span class="line">            fileDesc = Integer.parseInt(env);</span><br><span class="line">        &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">            throw new RuntimeException(fullSocketName + &quot; unset or invalid&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            FileDescriptor fd = new FileDescriptor();</span><br><span class="line">            fd.setInt$(fileDesc);</span><br><span class="line">            sServerSocket = new LocalServerSocket(fd);</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                    &quot;Error binding to local socket &apos;&quot; + fileDesc + &quot;&apos;&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>registerZygoteSocket()的主要作用创建Zygote服务端sServerSocket，并设置/dev/socket/zygote*的文件描述符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">private static void runSelectLoop(String abiList) throws MethodAndArgsCaller &#123;</span><br><span class="line">    ArrayList&lt;FileDescriptor&gt; fds = new ArrayList&lt;FileDescriptor&gt;();</span><br><span class="line">    ArrayList&lt;ZygoteConnection&gt; peers = new ArrayList&lt;ZygoteConnection&gt;();</span><br><span class="line"></span><br><span class="line">    fds.add(sServerSocket.getFileDescriptor());</span><br><span class="line">    peers.add(null);</span><br><span class="line"></span><br><span class="line">    while (true) &#123;</span><br><span class="line">        StructPollfd[] pollFds = new StructPollfd[fds.size()];</span><br><span class="line">        for (int i = 0; i &lt; pollFds.length; ++i) &#123;</span><br><span class="line">            pollFds[i] = new StructPollfd();</span><br><span class="line">            pollFds[i].fd = fds.get(i);</span><br><span class="line">            pollFds[i].events = (short) POLLIN;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 监控pollFds上POLLIN可读事件，有数据可读表示收到一个连接或者请求</span><br><span class="line">            Os.poll(pollFds, -1);</span><br><span class="line">        &#125; catch (ErrnoException ex) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;poll failed&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = pollFds.length - 1; i &gt;= 0; --i) &#123;</span><br><span class="line">            if ((pollFds[i].revents &amp; POLLIN) == 0) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (i == 0) &#123;</span><br><span class="line">                // i == 0，创建与客户端的连接，并添加到监听的fds中</span><br><span class="line">                ZygoteConnection newPeer = acceptCommandPeer(abiList);</span><br><span class="line">                peers.add(newPeer);</span><br><span class="line">                fds.add(newPeer.getFileDesciptor());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 收到请求的数据，通过ZygoteConnection.runOnce()处理客户端请求</span><br><span class="line">                boolean done = peers.get(i).runOnce();</span><br><span class="line">                if (done) &#123;</span><br><span class="line">                    peers.remove(i);</span><br><span class="line">                    fds.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static ZygoteConnection acceptCommandPeer(String abiList) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 获取请求连接的客户端socket并创建ZygoteConnection对象</span><br><span class="line">        return new ZygoteConnection(sServerSocket.accept(), abiList);</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;IOException during accept()&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在监听到与客户端连接的socket有数据到来时，调用ZygoteConnection.runOnce()处理客户端的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">boolean runOnce() throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    String args[];</span><br><span class="line">    Arguments parsedArgs = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // 读取客户端发送的的创建进程的启动参数</span><br><span class="line">        args = readArgumentList();</span><br><span class="line">        descriptors = mSocket.getAncillaryFileDescriptors();</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        Log.w(TAG, &quot;IOException on command socket &quot; + ex.getMessage());</span><br><span class="line">        closeSocket();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // 解析参数</span><br><span class="line">        parsedArgs = new Arguments(args);</span><br><span class="line">        ......</span><br><span class="line">        // fork子进程</span><br><span class="line">        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,</span><br><span class="line">                parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,</span><br><span class="line">                parsedArgs.niceName, fdsToClose, parsedArgs.instructionSet,</span><br><span class="line">                parsedArgs.appDataDir);</span><br><span class="line">    &#125; catch (ErrnoException ex) &#123;</span><br><span class="line">        logAndPrintError(newStderr, &quot;Exception creating pipe&quot;, ex);</span><br><span class="line">    &#125; catch (IllegalArgumentException ex) &#123;</span><br><span class="line">        logAndPrintError(newStderr, &quot;Invalid zygote arguments&quot;, ex);</span><br><span class="line">    &#125; catch (ZygoteSecurityException ex) &#123;</span><br><span class="line">        logAndPrintError(newStderr,</span><br><span class="line">                &quot;Zygote security policy prevents request: &quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (pid == 0) &#123;</span><br><span class="line">            // in child</span><br><span class="line">            ......</span><br><span class="line">            handleChildProc(parsedArgs, descriptors, childPipeFd, newStderr);</span><br><span class="line"></span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // in parent...pid of &lt; 0 means failure</span><br><span class="line">            ......</span><br><span class="line">            return handleParentProc(pid, descriptors, serverPipeFd, parsedArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        IoUtils.closeQuietly(childPipeFd);</span><br><span class="line">        IoUtils.closeQuietly(serverPipeFd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在runOnce中读取并解析客户端发送的启动参数，并调用Zygote.forkAndSpecialize()方法fork子进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static int forkAndSpecialize(int uid, int gid, int[] gids, int debugFlags,</span><br><span class="line">      int[][] rlimits, int mountExternal, String seInfo, String niceName, int[] fdsToClose,</span><br><span class="line">      String instructionSet, String appDataDir) &#123;</span><br><span class="line">    VM_HOOKS.preFork();</span><br><span class="line">    int pid = nativeForkAndSpecialize(</span><br><span class="line">              uid, gid, gids, debugFlags, rlimits, mountExternal, seInfo, niceName, fdsToClose,</span><br><span class="line">              instructionSet, appDataDir);</span><br><span class="line">    ......</span><br><span class="line">    VM_HOOKS.postForkCommon();</span><br><span class="line">    return pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>forkAndSpecialize中直接调用native方法nativeForkAndSpecialize，nativeForkAndSpecialize在register_com_android_internal_os_Zygote在AndroidRuntime.start()中通过startReg注册。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static const JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    &#123; &quot;nativeForkAndSpecialize&quot;,</span><br><span class="line">      &quot;(II[II[[IILjava/lang/String;Ljava/lang/String;[ILjava/lang/String;Ljava/lang/String;)I&quot;,</span><br><span class="line">      (void *) com_android_internal_os_Zygote_nativeForkAndSpecialize &#125;,</span><br><span class="line">    &#123; &quot;nativeForkSystemServer&quot;, &quot;(II[II[[IJJ)I&quot;,</span><br><span class="line">      (void *) com_android_internal_os_Zygote_nativeForkSystemServer &#125;,</span><br><span class="line">    &#123; &quot;nativeUnmountStorageOnInit&quot;, &quot;()V&quot;,</span><br><span class="line">      (void *) com_android_internal_os_Zygote_nativeUnmountStorageOnInit &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int register_com_android_internal_os_Zygote(JNIEnv* env) &#123;</span><br><span class="line">  gZygoteClass = MakeGlobalRefOrDie(env, FindClassOrDie(env, kZygoteClassName));</span><br><span class="line">  gCallPostForkChildHooks = GetStaticMethodIDOrDie(env, gZygoteClass, &quot;callPostForkChildHooks&quot;,</span><br><span class="line">                                                   &quot;(IZLjava/lang/String;)V&quot;);</span><br><span class="line"></span><br><span class="line">  return RegisterMethodsOrDie(env, &quot;com/android/internal/os/Zygote&quot;, gMethods, NELEM(gMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>nativeForkAndSpecialize映射到jni方法com_android_internal_os_Zygote_nativeForkAndSpecialize，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">static jint com_android_internal_os_Zygote_nativeForkAndSpecialize(</span><br><span class="line">        JNIEnv* env, jclass, jint uid, jint gid, jintArray gids,</span><br><span class="line">        jint debug_flags, jobjectArray rlimits,</span><br><span class="line">        jint mount_external, jstring se_info, jstring se_name,</span><br><span class="line">        jintArray fdsToClose, jstring instructionSet, jstring appDataDir) &#123;</span><br><span class="line">    jlong capabilities = 0;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    return ForkAndSpecializeCommon(env, uid, gid, gids, debug_flags,</span><br><span class="line">            rlimits, capabilities, capabilities, mount_external, se_info,</span><br><span class="line">            se_name, false, fdsToClose, instructionSet, appDataDir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static pid_t ForkAndSpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray javaGids,</span><br><span class="line">                                     jint debug_flags, jobjectArray javaRlimits,</span><br><span class="line">                                     jlong permittedCapabilities, jlong effectiveCapabilities,</span><br><span class="line">                                     jint mount_external,</span><br><span class="line">                                     jstring java_se_info, jstring java_se_name,</span><br><span class="line">                                     bool is_system_server, jintArray fdsToClose,</span><br><span class="line">                                     jstring instructionSet, jstring dataDir) &#123;</span><br><span class="line">  ......</span><br><span class="line">  pid_t pid = fork();</span><br><span class="line"></span><br><span class="line">  if (pid == 0) &#123;</span><br><span class="line">    ......</span><br><span class="line">    // 设置进程各个属性</span><br><span class="line">    rc = setresgid(gid, gid, gid);</span><br><span class="line">    rc = setresuid(uid, uid, uid);</span><br><span class="line">    SetCapabilities(env, permittedCapabilities, effectiveCapabilities);</span><br><span class="line">    ......</span><br><span class="line">  &#125; else if (pid &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">  return pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终ForkAndSpecializeCommon中通过fork创建出子进程并返回，接着在子进程(pid == 0)中执行handleChildProc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private void handleChildProc(Arguments parsedArgs,</span><br><span class="line">        FileDescriptor[] descriptors, FileDescriptor pipeFd, PrintStream newStderr)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    // close继承与Zygote的socket</span><br><span class="line">    closeSocket();</span><br><span class="line">    ZygoteInit.closeServerSocket();</span><br><span class="line"></span><br><span class="line">    // 恢复子进程中的STDIN_FILENO，STDOUT_FILENO，STDERR_FILENO</span><br><span class="line">    if (descriptors != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Os.dup2(descriptors[0], STDIN_FILENO);</span><br><span class="line">            Os.dup2(descriptors[1], STDOUT_FILENO);</span><br><span class="line">            Os.dup2(descriptors[2], STDERR_FILENO);</span><br><span class="line"></span><br><span class="line">            for (FileDescriptor fd: descriptors) &#123;</span><br><span class="line">                IoUtils.closeQuietly(fd);</span><br><span class="line">            &#125;</span><br><span class="line">            newStderr = System.err;</span><br><span class="line">        &#125; catch (ErrnoException ex) &#123;</span><br><span class="line">            Log.e(TAG, &quot;Error reopening stdio&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置进程名</span><br><span class="line">    if (parsedArgs.niceName != null) &#123;</span><br><span class="line">        Process.setArgV0(parsedArgs.niceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (parsedArgs.invokeWith != null) &#123;</span><br><span class="line">      ......</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 进入到zygoteInit执行</span><br><span class="line">        RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,</span><br><span class="line">                parsedArgs.remainingArgs, null /* classLoader */);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在handleChildProc()中关闭sServerSocket,设置进程名，并进入到RuntimeInit.zygoteInit()中执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static final void zygoteInit(int targetSdkVersion, String[] argv, ClassLoader classLoader)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    ......</span><br><span class="line">    commonInit();</span><br><span class="line">    nativeZygoteInit();</span><br><span class="line">    applicationInit(targetSdkVersion, argv, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>zygoteInit()中主要是对新创建的进程执行一些初始化的操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private static final void commonInit() &#123;</span><br><span class="line">    // 设置默认的caughtHandler</span><br><span class="line">    Thread.setDefaultUncaughtExceptionHandler(new UncaughtHandler());</span><br><span class="line"></span><br><span class="line">    // 设置时区信息</span><br><span class="line">    TimezoneGetter.setInstance(new TimezoneGetter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String getId() &#123;</span><br><span class="line">            return SystemProperties.get(&quot;persist.sys.timezone&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    TimeZone.setDefault(null);</span><br><span class="line"></span><br><span class="line">    LogManager.getLogManager().reset();</span><br><span class="line">    new AndroidConfig();</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Sets the default HTTP User-Agent used by HttpURLConnection.</span><br><span class="line">     */</span><br><span class="line">    String userAgent = getDefaultUserAgent();</span><br><span class="line">    System.setProperty(&quot;http.agent&quot;, userAgent);</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Wire socket tagging to traffic stats.</span><br><span class="line">     */</span><br><span class="line">    NetworkManagementSocketTagger.install();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    initialized = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>commonInit()中主要做一些通用的初始化。继续看nativeZygoteInit()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static const JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    &#123; &quot;nativeFinishInit&quot;, &quot;()V&quot;,</span><br><span class="line">        (void*) com_android_internal_os_RuntimeInit_nativeFinishInit &#125;,</span><br><span class="line">    &#123; &quot;nativeZygoteInit&quot;, &quot;()V&quot;,</span><br><span class="line">        (void*) com_android_internal_os_RuntimeInit_nativeZygoteInit &#125;,</span><br><span class="line">    &#123; &quot;nativeSetExitWithoutCleanup&quot;, &quot;(Z)V&quot;,</span><br><span class="line">        (void*) com_android_internal_os_RuntimeInit_nativeSetExitWithoutCleanup &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int register_com_android_internal_os_RuntimeInit(JNIEnv* env)</span><br><span class="line">&#123;</span><br><span class="line">    return jniRegisterNativeMethods(env, &quot;com/android/internal/os/RuntimeInit&quot;,</span><br><span class="line">        gMethods, NELEM(gMethods));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void com_android_internal_os_RuntimeInit_nativeZygoteInit(JNIEnv* env, jobject clazz)</span><br><span class="line">&#123;</span><br><span class="line">    // 调用AppRuntime.onZygoteInit()</span><br><span class="line">    gCurRuntime-&gt;onZygoteInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>nativeZygoteInit最终由AndroidRuntime.cpp中的com_android_internal_os_RuntimeInit_nativeZygoteInit实现，onZygoteInit()是AndroidRuntime中的定义的virtual方法，在AppRuntime中实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virtual void onZygoteInit()</span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;ProcessState&gt; proc = ProcessState::self();</span><br><span class="line">    proc-&gt;startThreadPool();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到onZygoteInit()中的主要操作是启动线程池，用于Binder进程间通信(参考Binder篇的分析)。继续分析applicationInit()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private static void applicationInit(int targetSdkVersion, String[] argv, ClassLoader classLoader)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    ......</span><br><span class="line">    final Arguments args;</span><br><span class="line">    try &#123;</span><br><span class="line">        args = new Arguments(argv);</span><br><span class="line">    &#125; catch (IllegalArgumentException ex) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    invokeStaticMain(args.startClass, args.startArgs, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>applicationInit()中调用invokeStaticMain并抛出ZygoteInit.MethodAndArgsCaller异常，在ZygoteInit.main()中会catch住这个异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private static void invokeStaticMain(String className, String[] argv, ClassLoader classLoader)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    Class&lt;?&gt; cl;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        cl = Class.forName(className, true, classLoader);</span><br><span class="line">    &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;Missing class when invoking static main &quot; + className,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Method m;</span><br><span class="line">    try &#123;</span><br><span class="line">        m = cl.getMethod(&quot;main&quot;, new Class[] &#123; String[].class &#125;);</span><br><span class="line">    &#125; catch (NoSuchMethodException ex) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;Missing static main on &quot; + className, ex);</span><br><span class="line">    &#125; catch (SecurityException ex) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">                &quot;Problem getting static main on &quot; + className, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    throw new ZygoteInit.MethodAndArgsCaller(m, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>invokeStaticMain()中className即由AMS所传递的”android.app.ActivityThread”，在invokeStaticMain抛出ZygoteInit.MethodAndArgsCaller异常后，系统沿着调用栈找到ZygoteInit.main()处理这个异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String argv[]) &#123;</span><br><span class="line">    ......</span><br><span class="line">    try &#123;</span><br><span class="line">      ......</span><br><span class="line">    &#125; catch (MethodAndArgsCaller caller) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">        Log.e(TAG, &quot;Zygote died with exception&quot;, ex);</span><br><span class="line">        closeServerSocket();</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        mMethod.invoke(null, new Object[] &#123; mArgs &#125;);</span><br><span class="line">    &#125; catch (IllegalAccessException ex) &#123;</span><br><span class="line">        throw new RuntimeException(ex);</span><br><span class="line">    &#125; catch (InvocationTargetException ex) &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终，在MethodAndArgsCaller.run()中执行应用程序入口”android.app.ActivityThread”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ......</span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line">    ......</span><br><span class="line">    ActivityThread thread = new ActivityThread();</span><br><span class="line">    thread.attach(false);</span><br><span class="line">    ......</span><br><span class="line">    Looper.loop();</span><br><span class="line"></span><br><span class="line">    throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Zygote-启动流程]]></title>
      <url>http://robinheztto.com/2016/07/01/android-zygote-1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Zygote是Android系统中的进程孵化器，它孵化了Android中运行系统核心服务的system_server进程及所有的应用程序进程。此篇博客主要分析Zygote进程的启动流程。相关源码在以下文件中：</p>
<ul>
<li>system/core/init/service.cpp</li>
<li>frameworks/base/cmds/app_process/app_main.cpp</li>
<li>frameworks/base/core/jni/AndroidRuntime.cpp</li>
<li>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</li>
</ul>
</blockquote>
<div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/android_zygote.jpg?raw=true" alt="android_zygote_init_flow"><br></div>

<h1 id="init-ro-zygote-rc"><a href="#init-ro-zygote-rc" class="headerlink" title="init.${ro.zygote}.rc"></a>init.${ro.zygote}.rc</h1><p>Zygote以服务的形式定义在init.${ro.zygote}.rc文件中，通过<code>import /init.${ro.zygote}.rc</code>的形式包含到/init.rc文件，其中ro.zygote是用来区分32与64位版本的属性值，一般可取的值有”zygote32”，”zygote32_64”，”zygote64”，”zygote64_32”。下面是init.zygote64_32.rc(即ro.zygote等于zygote64_32)相关的定义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span><br><span class="line">    class main</span><br><span class="line">    socket zygote stream 660 root system</span><br><span class="line">    onrestart write /sys/android_power/request_state wake</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">    onrestart restart audioserver</span><br><span class="line">    onrestart restart cameraserver</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart netd</span><br><span class="line">    writepid /dev/cpuset/foreground/tasks /sys/fs/cgroup/stune/foreground/tasks</span><br><span class="line"></span><br><span class="line">service zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary</span><br><span class="line">    class main</span><br><span class="line">    socket zygote_secondary stream 660 root system</span><br><span class="line">    onrestart restart zygote</span><br><span class="line">    writepid /dev/cpuset/foreground/tasks /dev/stune/foreground/tasks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//根据以上的定义对应生成二个zygote进程</span><br><span class="line">root:/ $ ps | grep zygote</span><br><span class="line">root      754   1     2237660 82604 poll_sched 0000000000 S zygote64</span><br><span class="line">root      755   1     1668956 69200 poll_sched 0000000000 S zygote</span><br></pre></td></tr></table></figure></p>
<p>init.zygote64_32.rc文件中定义了zygote与zygote_secondary二个service，系统启动后可以看到存在zygote64与zygote二个进程，即分别通过/system/bin/下的app_process64与app_process32启动。<code>class main</code>定义zygote服务属于class main，通过<code>class_start main</code>启动，并为其创建名为”zygote”的socket用于进程间通信，在zygote重启后会重新启动audioserver，cameraserver，media，netd进程。下面是init进程启动zygote服务的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">system/core/init/service.cpp</span><br><span class="line">bool Service::Start() &#123;</span><br><span class="line">    ......</span><br><span class="line">    pid_t pid = fork();</span><br><span class="line">    if (pid == 0) &#123;</span><br><span class="line">        // 创建/dev/socket/zygote</span><br><span class="line">        for (const auto&amp; si : sockets_) &#123;</span><br><span class="line">            int socket_type = ((si.type == &quot;stream&quot; ? SOCK_STREAM :</span><br><span class="line">                                (si.type == &quot;dgram&quot; ? SOCK_DGRAM :</span><br><span class="line">                                 SOCK_SEQPACKET)));</span><br><span class="line">            const char* socketcon =</span><br><span class="line">                !si.socketcon.empty() ? si.socketcon.c_str() : scon.c_str();</span><br><span class="line"></span><br><span class="line">            int s = create_socket(si.name.c_str(), socket_type, si.perm,</span><br><span class="line">                                  si.uid, si.gid, socketcon);</span><br><span class="line">            if (s &gt;= 0) &#123;</span><br><span class="line">                // 把socket的fd保存在环境变量ANDROID_SOCKET_zygote中</span><br><span class="line">                PublishSocket(si.name, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        setpgid(0, getpid());</span><br><span class="line"></span><br><span class="line">        // As requested, set our gid, supplemental gids, and uid.</span><br><span class="line">        if (gid_) &#123;</span><br><span class="line">            if (setgid(gid_) != 0) &#123;</span><br><span class="line">                ERROR(&quot;setgid failed: %s\n&quot;, strerror(errno));</span><br><span class="line">                _exit(127);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!supp_gids_.empty()) &#123;</span><br><span class="line">            if (setgroups(supp_gids_.size(), &amp;supp_gids_[0]) != 0) &#123;</span><br><span class="line">                ERROR(&quot;setgroups failed: %s\n&quot;, strerror(errno));</span><br><span class="line">                _exit(127);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (uid_) &#123;</span><br><span class="line">            if (setuid(uid_) != 0) &#123;</span><br><span class="line">                ERROR(&quot;setuid failed: %s\n&quot;, strerror(errno));</span><br><span class="line">                _exit(127);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!seclabel_.empty()) &#123;</span><br><span class="line">            if (setexeccon(seclabel_.c_str()) &lt; 0) &#123;</span><br><span class="line">                ERROR(&quot;cannot setexeccon(&apos;%s&apos;): %s\n&quot;,</span><br><span class="line">                      seclabel_.c_str(), strerror(errno));</span><br><span class="line">                _exit(127);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::vector&lt;char*&gt; strs;</span><br><span class="line">        for (const auto&amp; s : args_) &#123;</span><br><span class="line">            strs.push_back(const_cast&lt;char*&gt;(s.c_str()));</span><br><span class="line">        &#125;</span><br><span class="line">        strs.push_back(nullptr);</span><br><span class="line">        // 执行app_process启动zygote</span><br><span class="line">        if (execve(args_[0].c_str(), (char**) &amp;strs[0], (char**) ENV) &lt; 0) &#123;</span><br><span class="line">            ERROR(&quot;cannot execve(&apos;%s&apos;): %s\n&quot;, args_[0].c_str(), strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _exit(127);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="app-process"><a href="#app-process" class="headerlink" title="app_process"></a>app_process</h1><p>app_process64/app_process32是system/bin下的可执行文件，对应frameworks/base/cmds/app_process/下的源码，app_process不仅可以用来启动Zygote进程还可以用来执行系统中的某个类(/system/bin/am就是通过app_process来实现的)。它的的Usage如下：</p>
<blockquote>
<p>app_process [java-options] cmd-dir start-class-name [options]<br>java-options: 以”-“开头，启动虚拟机时传递给虚拟机的参数。<br>cmd-dir: cmd的目录，/system/bin。<br>start-class-name: 需要启动的java类，需包含静态main()方法。<br>options: “--zygote”表示启动zygote进程，”--application”表示启动应用程序进程。</p>
</blockquote>
<p>下面从main函数开始分析，main()中主要是对参数解析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char* const argv[])</span><br><span class="line">&#123;</span><br><span class="line">    if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) &lt; 0) &#123;</span><br><span class="line">        // Older kernels don&apos;t understand PR_SET_NO_NEW_PRIVS and return</span><br><span class="line">        // EINVAL. Don&apos;t die on such kernels.</span><br><span class="line">        if (errno != EINVAL) &#123;</span><br><span class="line">            LOG_ALWAYS_FATAL(&quot;PR_SET_NO_NEW_PRIVS failed: %s&quot;, strerror(errno));</span><br><span class="line">            return 12;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建AppRuntime并保存参数，AppRuntime继承自AndroidRuntime，主要工作是创建加载ART虚拟机</span><br><span class="line">    AppRuntime runtime(argv[0], computeArgBlockSize(argc, argv));</span><br><span class="line"></span><br><span class="line">    // 过滤掉argv[0]</span><br><span class="line">    argc--;</span><br><span class="line">    argv++;</span><br><span class="line"></span><br><span class="line">    // runtime参数解析</span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; argc; i++) &#123;</span><br><span class="line">        if (argv[i][0] != &apos;-&apos;) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        if (argv[i][1] == &apos;-&apos; &amp;&amp; argv[i][2] == 0) &#123;</span><br><span class="line">            ++i; // Skip --.</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        runtime.addOption(strdup(argv[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // --zygote : 启动zygote.</span><br><span class="line">    // --start-system-server : 启动systemServer.</span><br><span class="line">    // --application : 启动application.</span><br><span class="line">    // --nice-name : 进程名</span><br><span class="line">    bool zygote = false;</span><br><span class="line">    bool startSystemServer = false;</span><br><span class="line">    bool application = false;</span><br><span class="line">    String8 niceName;</span><br><span class="line">    String8 className;</span><br><span class="line"></span><br><span class="line">    ++i;  // 跳过没有使用的参数&quot;parent dir&quot;，即/system/bin</span><br><span class="line">    while (i &lt; argc) &#123;</span><br><span class="line">        const char* arg = argv[i++];</span><br><span class="line">        if (strcmp(arg, &quot;--zygote&quot;) == 0) &#123;</span><br><span class="line">            zygote = true;</span><br><span class="line">            niceName = ZYGOTE_NICE_NAME;　// zygote的进程名为zygote64或zygote</span><br><span class="line">        &#125; else if (strcmp(arg, &quot;--start-system-server&quot;) == 0) &#123;</span><br><span class="line">            startSystemServer = true;</span><br><span class="line">        &#125; else if (strcmp(arg, &quot;--application&quot;) == 0) &#123;</span><br><span class="line">            application = true;</span><br><span class="line">        &#125; else if (strncmp(arg, &quot;--nice-name=&quot;, 12) == 0) &#123;</span><br><span class="line">            niceName.setTo(arg + 12);</span><br><span class="line">        &#125; else if (strncmp(arg, &quot;--&quot;, 2) != 0) &#123;</span><br><span class="line">            className.setTo(arg);</span><br><span class="line">            break;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            --i;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 准备执行参数</span><br><span class="line">    Vector&lt;String8&gt; args;</span><br><span class="line">    if (!className.isEmpty()) &#123;</span><br><span class="line">        // 指定执行class,非zygote模式</span><br><span class="line">        args.add(application ? String8(&quot;application&quot;) : String8(&quot;tool&quot;));</span><br><span class="line">        runtime.setClassNameAndArgs(className, argc - i, argv + i);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // zygote模式，创建/data/dalvik-cache/arm64,/data/dalvik-cache/arm*缓存目录</span><br><span class="line">        maybeCreateDalvikCache();</span><br><span class="line"></span><br><span class="line">        // 添加zygote参数，start-system-server</span><br><span class="line">        if (startSystemServer) &#123;</span><br><span class="line">            args.add(String8(&quot;start-system-server&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 添加zygote参数,--abi-list</span><br><span class="line">        // [ro.product.cpu.abilist64]: [arm64-v8a]</span><br><span class="line">        // [ro.product.cpu.abilist32]: [armeabi-v7a,armeabi]</span><br><span class="line">        char prop[PROP_VALUE_MAX];</span><br><span class="line">        if (property_get(ABI_LIST_PROPERTY, prop, NULL) == 0) &#123;</span><br><span class="line">            LOG_ALWAYS_FATAL(&quot;app_process: Unable to determine ABI list from property %s.&quot;,</span><br><span class="line">                ABI_LIST_PROPERTY);</span><br><span class="line">            return 11;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String8 abiFlag(&quot;--abi-list=&quot;);</span><br><span class="line">        abiFlag.append(prop);</span><br><span class="line">        args.add(abiFlag);</span><br><span class="line"></span><br><span class="line">        // 所有参数将传递给ZygoteInit.main()</span><br><span class="line">        for (; i &lt; argc; ++i) &#123;</span><br><span class="line">            args.add(String8(argv[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置进程名niceName</span><br><span class="line">    if (!niceName.isEmpty()) &#123;</span><br><span class="line">        runtime.setArgv0(niceName.string());</span><br><span class="line">        set_process_name(niceName.string());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (zygote) &#123;</span><br><span class="line">        // zygote模式执行ZygoteInit类</span><br><span class="line">        runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;, args, zygote);</span><br><span class="line">    &#125; else if (className) &#123;</span><br><span class="line">        //　非zygote模式执行RuntimeInit类</span><br><span class="line">        runtime.start(&quot;com.android.internal.os.RuntimeInit&quot;, args, zygote);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        fprintf(stderr, &quot;Error: no class name or --zygote supplied.\n&quot;);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(&quot;app_process: no class name or --zygote supplied.&quot;);</span><br><span class="line">        return 10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>app_main的main函数主要是对参数进行解析，并判断启动模式zygote或者application,而后进入到AndroidRuntime执行。</p>
<h1 id="AndroidRuntime"><a href="#AndroidRuntime" class="headerlink" title="AndroidRuntime"></a>AndroidRuntime</h1><p>接下来进入到AndroidRuntime::start中执行，主要工作是启动虚拟机java线程执行参数className中的main方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">void AndroidRuntime::start(const char* className, const Vector&lt;String8&gt;&amp; options, bool zygote)</span><br><span class="line">&#123;</span><br><span class="line">    // 启动时可以看到log信息 -&gt; “AndroidRuntime: &gt;&gt;&gt;&gt;&gt;&gt; START com.android.internal.os.ZygoteInit uid 0 &lt;&lt;&lt;&lt;&lt;&lt;”</span><br><span class="line">    ALOGD(&quot;&gt;&gt;&gt;&gt;&gt;&gt; START %s uid %d &lt;&lt;&lt;&lt;&lt;&lt;\n&quot;,</span><br><span class="line">            className != NULL ? className : &quot;(unknown)&quot;, getuid());</span><br><span class="line"></span><br><span class="line">    static const String8 startSystemServer(&quot;start-system-server&quot;);</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * &apos;startSystemServer == true&apos; means runtime is obsolete and not run from</span><br><span class="line">     * init.rc anymore, so we print out the boot start event here.</span><br><span class="line">     */</span><br><span class="line">    for (size_t i = 0; i &lt; options.size(); ++i) &#123;</span><br><span class="line">        if (options[i] == startSystemServer) &#123;</span><br><span class="line">           /* track our progress through the boot sequence */</span><br><span class="line">           const int LOG_BOOT_PROGRESS_START = 3000;</span><br><span class="line">           LOG_EVENT_LONG(LOG_BOOT_PROGRESS_START,  ns2ms(systemTime(SYSTEM_TIME_MONOTONIC)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置系统目录环境变量ANDROID_ROOT=/system</span><br><span class="line">    const char* rootDir = getenv(&quot;ANDROID_ROOT&quot;);</span><br><span class="line">    if (rootDir == NULL) &#123;</span><br><span class="line">        rootDir = &quot;/system&quot;;</span><br><span class="line">        if (!hasDir(&quot;/system&quot;)) &#123;</span><br><span class="line">            LOG_FATAL(&quot;No root directory specified, and /android does not exist.&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        setenv(&quot;ANDROID_ROOT&quot;, rootDir, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用JniInvocation启动虚拟机</span><br><span class="line">    JniInvocation jni_invocation;</span><br><span class="line">    jni_invocation.Init(NULL);</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    if (startVm(&amp;mJavaVM, &amp;env, zygote) != 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 调用AppRuntime的重载函数onVmCreated,zygote模式下直接返回</span><br><span class="line">    onVmCreated(env);</span><br><span class="line"></span><br><span class="line">    // 注册系统jni函数，将全局数组gRegJNI中的jni函数逐一注册</span><br><span class="line">    if (startReg(env) &lt; 0) &#123;</span><br><span class="line">        ALOGE(&quot;Unable to register all android natives\n&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 构建main()的String argv[]参数</span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line">    jstring classNameStr;</span><br><span class="line"></span><br><span class="line">    stringClass = env-&gt;FindClass(&quot;java/lang/String&quot;);</span><br><span class="line">    assert(stringClass != NULL);</span><br><span class="line">    strArray = env-&gt;NewObjectArray(options.size() + 1, stringClass, NULL);</span><br><span class="line">    assert(strArray != NULL);</span><br><span class="line">    classNameStr = env-&gt;NewStringUTF(className);</span><br><span class="line">    assert(classNameStr != NULL);</span><br><span class="line">    env-&gt;SetObjectArrayElement(strArray, 0, classNameStr);</span><br><span class="line"></span><br><span class="line">    for (size_t i = 0; i &lt; options.size(); ++i) &#123;</span><br><span class="line">        jstring optionsStr = env-&gt;NewStringUTF(options.itemAt(i).string());</span><br><span class="line">        assert(optionsStr != NULL);</span><br><span class="line">        env-&gt;SetObjectArrayElement(strArray, i + 1, optionsStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //将&quot;com.android.internal.os.ZygoteInit&quot;转换为&quot;com/android/internal/os/ZygoteInit&quot;</span><br><span class="line">    char* slashClassName = toSlashClassName(className);</span><br><span class="line">    jclass startClass = env-&gt;FindClass(slashClassName);</span><br><span class="line">    if (startClass == NULL) &#123;</span><br><span class="line">        ALOGE(&quot;JavaVM unable to locate class &apos;%s&apos;\n&quot;, slashClassName);</span><br><span class="line">        /* keep going */</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, &quot;main&quot;,</span><br><span class="line">            &quot;([Ljava/lang/String;)V&quot;);</span><br><span class="line">        if (startMeth == NULL) &#123;</span><br><span class="line">            ALOGE(&quot;JavaVM unable to find main() in &apos;%s&apos;\n&quot;, className);</span><br><span class="line">            /* keep going */</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          　// 执行com.android.internal.os.ZygoteInit或com.android.internal.os.RuntimeInit中的main()方法</span><br><span class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(slashClassName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>根据以上代码，先通过JNI invocation API创建加载虚拟机，然后执行ZygoteInit.java的静态main方法(启动虚拟机后即默认主线程)。创建加载虚拟机执行的是startVm()，下面是startVm()的具体实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">int AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv, bool zygote)</span><br><span class="line">&#123;</span><br><span class="line">    JavaVMInitArgs initArgs;</span><br><span class="line"></span><br><span class="line">    // 主要是通过addOption添加虚拟机启动参数,大多参数都是通过parseRuntimeOption从系统属性值中读取</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    /* 以下是通过logcat打印出来的虚拟机启动参数</span><br><span class="line">    01-06 13:44:08.556   757   757 I art     : option[0]=-Xzygote</span><br><span class="line">    01-06 13:44:08.557   757   757 I art     : option[1]=-Xstacktracefile:/data/anr/traces.txt</span><br><span class="line">    01-06 13:44:08.557   757   757 I art     : option[2]=exit</span><br><span class="line">    01-06 13:44:08.558   757   757 I art     : option[3]=vfprintf</span><br><span class="line">    01-06 13:44:08.558   757   757 I art     : option[4]=sensitiveThread</span><br><span class="line">    01-06 13:44:08.559   757   757 I art     : option[5]=-verbose:gc</span><br><span class="line">    01-06 13:44:08.560   757   757 I art     : option[6]=-Xms8m</span><br><span class="line">    01-06 13:44:08.560   757   757 I art     : option[7]=-Xmx512m</span><br><span class="line">    01-06 13:44:08.560   757   757 I art     : option[8]=-XX:HeapGrowthLimit=256m</span><br><span class="line">    01-06 13:44:08.560   757   757 I art     : option[9]=-XX:HeapMinFree=512k</span><br><span class="line">    01-06 13:44:08.561   757   757 I art     : option[10]=-XX:HeapMaxFree=8m</span><br><span class="line">    01-06 13:44:08.562   757   757 I art     : option[11]=-XX:HeapTargetUtilization=0.75</span><br><span class="line">    01-06 13:44:08.562   757   757 I art     : option[12]=-Xusejit:true</span><br><span class="line">    01-06 13:44:08.562   757   757 I art     : option[13]=-Xjitsaveprofilinginfo</span><br><span class="line">    01-06 13:44:08.563   757   757 I art     : option[14]=-agentlib:jdwp=transport=dt_android_adb,suspend=n,server=y</span><br><span class="line">    01-06 13:44:08.563   757   757 I art     : option[15]=-Xlockprofthreshold:500</span><br><span class="line">    01-06 13:44:08.563   757   757 I art     : option[16]=-Ximage-compiler-option</span><br><span class="line">    01-06 13:44:08.570   757   757 I art     : option[17]=--runtime-arg</span><br><span class="line">    01-06 13:44:08.571   757   757 I art     : option[18]=-Ximage-compiler-option</span><br><span class="line">    01-06 13:44:08.571   757   757 I art     : option[19]=-Xms64m</span><br><span class="line">    01-06 13:44:08.571   757   757 I art     : option[20]=-Ximage-compiler-option</span><br><span class="line">    01-06 13:44:08.571   757   757 I art     : option[21]=--runtime-arg</span><br><span class="line">    01-06 13:44:08.571   757   757 I art     : option[22]=-Ximage-compiler-option</span><br><span class="line">    01-06 13:44:08.571   757   757 I art     : option[23]=-Xmx64m</span><br><span class="line">    01-06 13:44:08.592   757   757 I art     : option[24]=-Ximage-compiler-option</span><br><span class="line">    01-06 13:44:08.592   757   757 I art     : option[25]=--image-classes=/system/etc/preloaded-classes</span><br><span class="line">    01-06 13:44:08.592   757   757 I art     : option[26]=-Ximage-compiler-option</span><br><span class="line">    01-06 13:44:08.592   757   757 I art     : option[27]=--compiled-classes=/system/etc/compiled-classes</span><br><span class="line">    01-06 13:44:08.593   757   757 I art     : option[28]=-Xcompiler-option</span><br><span class="line">    01-06 13:44:08.593   757   757 I art     : option[29]=--runtime-arg</span><br><span class="line">    01-06 13:44:08.593   757   757 I art     : option[30]=-Xcompiler-option</span><br><span class="line">    01-06 13:44:08.593   757   757 I art     : option[31]=-Xms64m</span><br><span class="line">    01-06 13:44:08.593   757   757 I art     : option[32]=-Xcompiler-option</span><br><span class="line">    01-06 13:44:08.593   757   757 I art     : option[33]=--runtime-arg</span><br><span class="line">    01-06 13:44:08.594   757   757 I art     : option[34]=-Xcompiler-option</span><br><span class="line">    01-06 13:44:08.594   757   757 I art     : option[35]=-Xmx512m</span><br><span class="line">    01-06 13:44:08.594   757   757 I art     : option[36]=-Ximage-compiler-option</span><br><span class="line">    01-06 13:44:08.594   757   757 I art     : option[37]=--instruction-set-variant=kryo</span><br><span class="line">    01-06 13:44:08.594   757   757 I art     : option[38]=-Xcompiler-option</span><br><span class="line">    01-06 13:44:08.594   757   757 I art     : option[39]=--instruction-set-variant=kryo</span><br><span class="line">    01-06 13:44:08.595   757   757 I art     : option[40]=-Ximage-compiler-option</span><br><span class="line">    01-06 13:44:08.595   757   757 I art     : option[41]=--instruction-set-features=default</span><br><span class="line">    01-06 13:44:08.595   757   757 I art     : option[42]=-Xcompiler-option</span><br><span class="line">    01-06 13:44:08.595   757   757 I art     : option[43]=--instruction-set-features=default</span><br><span class="line">    01-06 13:44:08.595   757   757 I art     : option[44]=-Duser.locale=zh-cn</span><br><span class="line">    01-06 13:44:08.595   757   757 I art     : option[45]=--cpu-abilist=arm64-v8a</span><br><span class="line">    01-06 13:44:08.596   757   757 I art     : option[46]=-Xfingerprint:TCL/london/london:7.0/London-V1.0.1.1C-11170539/jenkin11170539:userdebug/release-keys</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    initArgs.version = JNI_VERSION_1_4;</span><br><span class="line">    initArgs.options = mOptions.editArray();</span><br><span class="line">    initArgs.nOptions = mOptions.size();</span><br><span class="line">    initArgs.ignoreUnrecognized = JNI_FALSE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 通过JNI_CreateJavaVM创建加载虚拟机，其中JavaVM*整个进程只有一个，JNIEnv*每个线程一个,pEnv是保存jni接口的指针</span><br><span class="line">    if (JNI_CreateJavaVM(pJavaVM, pEnv, &amp;initArgs) &lt; 0) &#123;</span><br><span class="line">        ALOGE(&quot;JNI_CreateJavaVM failed\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="ZygoteInit"><a href="#ZygoteInit" class="headerlink" title="ZygoteInit"></a>ZygoteInit</h1><p>加载虚拟机后将调用到ZygoteInit的静态main方法对Zygote java层的初始化，下面继续分析ZygoteInit.main()的执行流程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String argv[]) &#123;</span><br><span class="line">    ......</span><br><span class="line">    try &#123;</span><br><span class="line">        ......</span><br><span class="line">        // 解析参数，根据参数决定是否启动SystemServer，获取abiList及socketName</span><br><span class="line">        boolean startSystemServer = false;</span><br><span class="line">        String socketName = &quot;zygote&quot;;</span><br><span class="line">        String abiList = null;</span><br><span class="line">        for (int i = 1; i &lt; argv.length; i++) &#123;</span><br><span class="line">            if (&quot;start-system-server&quot;.equals(argv[i])) &#123;</span><br><span class="line">                startSystemServer = true;</span><br><span class="line">            &#125; else if (argv[i].startsWith(ABI_LIST_ARG)) &#123;</span><br><span class="line">                abiList = argv[i].substring(ABI_LIST_ARG.length());</span><br><span class="line">            &#125; else if (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;</span><br><span class="line">                socketName = argv[i].substring(SOCKET_NAME_ARG.length());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new RuntimeException(&quot;Unknown command line argument: &quot; + argv[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (abiList == null) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;No ABI list supplied.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 注册zygote socket监听端口</span><br><span class="line">        registerZygoteSocket(socketName);</span><br><span class="line"></span><br><span class="line">        // 加载系统资源。zygote fork的子进程将继承zygote的虚拟机和加载的资源，以加快应用启动的速度。</span><br><span class="line">        preload();</span><br><span class="line">        ......</span><br><span class="line">        // 启动SystemServer进程</span><br><span class="line">        if (startSystemServer) &#123;</span><br><span class="line">            startSystemServer(abiList, socketName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 循环监听socket消息</span><br><span class="line">        Log.i(TAG, &quot;Accepting command socket connections&quot;);</span><br><span class="line">        runSelectLoop(abiList);</span><br><span class="line"></span><br><span class="line">        closeServerSocket();</span><br><span class="line">    &#125; catch (MethodAndArgsCaller caller) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">        Log.e(TAG, &quot;Zygote died with exception&quot;, ex);</span><br><span class="line">        closeServerSocket();</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ZygoteInit.main()主要工作是预加载系统类与资源，启动systemServer，注册并监听socket连接消息。其中注册并监听socket连接消息内容在 <strong>Android之Zygote-应用进程创建</strong> 分析，启动systemServer流程在 <strong>Android之SystemServer启动</strong> 中分析，下面分析preload预加载系统类与资源的过程。</p>
<p><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/android-zygote-proload.jpg?raw=true" alt="进程共享资源图解"><br></div><br>Linux中的进程通过系统调用fork产生后，其父子进程的内存映像(代码段，数据段，堆/栈)是共享的，只有子进程改写这些区域时才为子进程分配新的page(Copy On Write机制)，另外zygote fork子进程后并没有调用exec，即未替换掉zygote进程的代码段，数据段，堆栈，这样zygote fork出的子进程就可以共享它预加载的资源及类库了。<br>在preload中，zygote预加载系统常用类库及资源，以减短应用启动的时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static void preload() &#123;</span><br><span class="line">    ......</span><br><span class="line">    // 根据frameworks/base/preloaded-classes加载java类</span><br><span class="line">    preloadClasses();</span><br><span class="line">    ......</span><br><span class="line">    // 根据frameworks/base/core/res/res/values/array.xml中</span><br><span class="line">    // 的preloaded_drawables及preloaded_color_state_lists标签加载drawable及color资源</span><br><span class="line">    preloadResources();</span><br><span class="line">    ......</span><br><span class="line">    preloadOpenGL();</span><br><span class="line">    ......</span><br><span class="line">    // 加载libandroid.so，libcompiler_rt.so，libjnigraphics.so</span><br><span class="line">    preloadSharedLibraries();</span><br><span class="line">    preloadTextResources();</span><br><span class="line">    ......</span><br><span class="line">    WebViewFactory.prepareWebViewInZygote();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SystemServer进程的启动，及应用程序的创建在后面的博客中单独分析。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Binder之获取Service]]></title>
      <url>http://robinheztto.com/2016/04/18/android-binder-6/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Binder之注册Service]]></title>
      <url>http://robinheztto.com/2016/04/02/android-binder-5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>service组件在Server进程启动时会将service注册到Service Manager中。本篇以MediaPlayerService为例分析Service注册的过程。<br>相关代码在以下文件中：<br>frameworks/av/media/mediaserver/main_mediaserver.cpp<br>frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp<br>frameworks/native/libs/binder/IServiceManager.cpp</p>
</blockquote>
<div align="center"><br><img src="https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/android-binder-addservice.jpg?raw=true" alt=""><br></div>

<p>mediadrmserver进程的执行入口为frameworks/av/media/mediaserver/main_mediaserver.cpp的main()，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc __unused, char **argv __unused)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    sp&lt;ProcessState&gt; proc(ProcessState::self());</span><br><span class="line">    sp&lt;IServiceManager&gt; sm(defaultServiceManager());</span><br><span class="line">    .....</span><br><span class="line">    MediaPlayerService::instantiate();</span><br><span class="line">    ......</span><br><span class="line">    ProcessState::self()-&gt;startThreadPool();</span><br><span class="line">    IPCThreadState::self()-&gt;joinThreadPool();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先获取ProcessState对象和ServiceManager的代理对象，此流程在上篇博客中已有分析。先分析MediaPlayerService::instantiate()的过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void MediaPlayerService::instantiate() &#123;</span><br><span class="line">    defaultServiceManager()-&gt;addService(</span><br><span class="line">            String16(&quot;media.player&quot;), new MediaPlayerService());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>defaultServiceManager返回的是ServiceManager的代理对象BpServiceManager，通过BpServiceManager将新创建的MediaPlayerService的服务添加到ServiceManager。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/IServiceManager.cpp</span><br><span class="line"></span><br><span class="line">class BpServiceManager : public BpInterface&lt;IServiceManager&gt;</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    ......</span><br><span class="line">    virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,</span><br><span class="line">            bool allowIsolated)</span><br><span class="line">    &#123;</span><br><span class="line">        Parcel data, reply;</span><br><span class="line">        data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());</span><br><span class="line">        data.writeString16(name);</span><br><span class="line">        data.writeStrongBinder(service);</span><br><span class="line">        data.writeInt32(allowIsolated ? 1 : 0);</span><br><span class="line">        status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);</span><br><span class="line">        return err == NO_ERROR ? reply.readExceptionCode() : err;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>addService()中首先将进程间通信数据封装成Parcel数据，然后调用remote()-&gt;transact()将数据发送给驱动，remote()即BpBinder，下面看BpBinder::transact()的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/BpBinder.cpp</span><br><span class="line"></span><br><span class="line">status_t BpBinder::transact(</span><br><span class="line">    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags)</span><br><span class="line">&#123;</span><br><span class="line">    // Once a binder has died, it will never come back to life.</span><br><span class="line">    if (mAlive) &#123;</span><br><span class="line">        status_t status = IPCThreadState::self()-&gt;transact(</span><br><span class="line">            mHandle, code, data, reply, flags);</span><br><span class="line">        if (status == DEAD_OBJECT) mAlive = 0;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return DEAD_OBJECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/IPCThreadState.cpp</span><br><span class="line"></span><br><span class="line">status_t IPCThreadState::transact(int32_t handle,</span><br><span class="line">                                  uint32_t code, const Parcel&amp; data,</span><br><span class="line">                                  Parcel* reply, uint32_t flags)</span><br><span class="line">&#123;</span><br><span class="line">    status_t err = data.errorCheck();</span><br><span class="line"></span><br><span class="line">    flags |= TF_ACCEPT_FDS;</span><br><span class="line">    ......</span><br><span class="line">    if (err == NO_ERROR) &#123;</span><br><span class="line">        ......</span><br><span class="line">        err = writeTransactionData(BC_TRANSACTION, flags, handle, code, data, NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    if ((flags &amp; TF_ONE_WAY) == 0) &#123;</span><br><span class="line">        if (reply) &#123;</span><br><span class="line">            err = waitForResponse(reply);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Parcel fakeReply;</span><br><span class="line">            err = waitForResponse(&amp;fakeReply);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        err = waitForResponse(NULL, NULL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先检查Parcel对象中的进程数据是否正确，设置参数TF_ACCEPT_FDS位，即允许server在返回结果中携带文件描述符。然后通过writeTransactionData()向驱动程序发送BC_TRANSACTION命令的数据，flag TF_ONE_WAY位为0，表示是一个同步的进程间通信请求，需等待返回。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/IPCThreadState.cpp</span><br><span class="line"></span><br><span class="line">status_t IPCThreadState::writeTransactionData(int32_t cmd, uint32_t binderFlags,</span><br><span class="line">    int32_t handle, uint32_t code, const Parcel&amp; data, status_t* statusBuffer)</span><br><span class="line">&#123;</span><br><span class="line">    binder_transaction_data tr;</span><br><span class="line"></span><br><span class="line">    tr.target.ptr = 0; /* Don&apos;t pass uninitialized stack data to a remote process */</span><br><span class="line">    tr.target.handle = handle;</span><br><span class="line">    tr.code = code;</span><br><span class="line">    tr.flags = binderFlags;</span><br><span class="line">    tr.cookie = 0;</span><br><span class="line">    tr.sender_pid = 0;</span><br><span class="line">    tr.sender_euid = 0;</span><br><span class="line"></span><br><span class="line">    const status_t err = data.errorCheck();</span><br><span class="line">    if (err == NO_ERROR) &#123;</span><br><span class="line">        tr.data_size = data.ipcDataSize();</span><br><span class="line">        tr.data.ptr.buffer = data.ipcData();</span><br><span class="line">        tr.offsets_size = data.ipcObjectsCount()*sizeof(binder_size_t);</span><br><span class="line">        tr.data.ptr.offsets = data.ipcObjects();</span><br><span class="line">    &#125; else if (statusBuffer) &#123;</span><br><span class="line">        tr.flags |= TF_STATUS_CODE;</span><br><span class="line">        *statusBuffer = err;</span><br><span class="line">        tr.data_size = sizeof(status_t);</span><br><span class="line">        tr.data.ptr.buffer = reinterpret_cast&lt;uintptr_t&gt;(statusBuffer);</span><br><span class="line">        tr.offsets_size = 0;</span><br><span class="line">        tr.data.ptr.offsets = 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return (mLastError = err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mOut.writeInt32(cmd);</span><br><span class="line">    mOut.write(&amp;tr, sizeof(tr));</span><br><span class="line"></span><br><span class="line">    return NO_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>writeTransactionData()将Parcel数据封装成binder_transaction_data并写入mOut缓存中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/IPCThreadState.cpp</span><br><span class="line"></span><br><span class="line">status_t IPCThreadState::waitForResponse(Parcel *reply, status_t *acquireResult)</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t cmd;</span><br><span class="line">    int32_t err;</span><br><span class="line"></span><br><span class="line">    while (1) &#123;</span><br><span class="line">        if ((err=talkWithDriver()) &lt; NO_ERROR) break;</span><br><span class="line">        err = mIn.errorCheck();</span><br><span class="line">        if (err &lt; NO_ERROR) break;</span><br><span class="line">        if (mIn.dataAvail() == 0) continue;</span><br><span class="line"></span><br><span class="line">        cmd = (uint32_t)mIn.readInt32();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        switch (cmd) &#123;</span><br><span class="line">        case BR_TRANSACTION_COMPLETE:</span><br><span class="line">            if (!reply &amp;&amp; !acquireResult) goto finish;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case BR_DEAD_REPLY:</span><br><span class="line">            err = DEAD_OBJECT;</span><br><span class="line">            goto finish;</span><br><span class="line"></span><br><span class="line">        case BR_FAILED_REPLY:</span><br><span class="line">            err = FAILED_TRANSACTION;</span><br><span class="line">            goto finish;</span><br><span class="line"></span><br><span class="line">        case BR_ACQUIRE_RESULT:</span><br><span class="line">            &#123;</span><br><span class="line">                ALOG_ASSERT(acquireResult != NULL, &quot;Unexpected brACQUIRE_RESULT&quot;);</span><br><span class="line">                const int32_t result = mIn.readInt32();</span><br><span class="line">                if (!acquireResult) continue;</span><br><span class="line">                *acquireResult = result ? NO_ERROR : INVALID_OPERATION;</span><br><span class="line">            &#125;</span><br><span class="line">            goto finish;</span><br><span class="line"></span><br><span class="line">        case BR_REPLY:</span><br><span class="line">            &#123;</span><br><span class="line">                binder_transaction_data tr;</span><br><span class="line">                err = mIn.read(&amp;tr, sizeof(tr));</span><br><span class="line">                ALOG_ASSERT(err == NO_ERROR, &quot;Not enough command data for brREPLY&quot;);</span><br><span class="line">                if (err != NO_ERROR) goto finish;</span><br><span class="line"></span><br><span class="line">                if (reply) &#123;</span><br><span class="line">                    if ((tr.flags &amp; TF_STATUS_CODE) == 0) &#123;</span><br><span class="line">                        reply-&gt;ipcSetDataReference(</span><br><span class="line">                            reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),</span><br><span class="line">                            tr.data_size,</span><br><span class="line">                            reinterpret_cast&lt;const binder_size_t*&gt;(tr.data.ptr.offsets),</span><br><span class="line">                            tr.offsets_size/sizeof(binder_size_t),</span><br><span class="line">                            freeBuffer, this);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        err = *reinterpret_cast&lt;const status_t*&gt;(tr.data.ptr.buffer);</span><br><span class="line">                        freeBuffer(NULL,</span><br><span class="line">                            reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),</span><br><span class="line">                            tr.data_size,</span><br><span class="line">                            reinterpret_cast&lt;const binder_size_t*&gt;(tr.data.ptr.offsets),</span><br><span class="line">                            tr.offsets_size/sizeof(binder_size_t), this);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    freeBuffer(NULL,</span><br><span class="line">                        reinterpret_cast&lt;const uint8_t*&gt;(tr.data.ptr.buffer),</span><br><span class="line">                        tr.data_size,</span><br><span class="line">                        reinterpret_cast&lt;const binder_size_t*&gt;(tr.data.ptr.offsets),</span><br><span class="line">                        tr.offsets_size/sizeof(binder_size_t), this);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            goto finish;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            err = executeCommand(cmd);</span><br><span class="line">            if (err != NO_ERROR) goto finish;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">finish:</span><br><span class="line">    if (err != NO_ERROR) &#123;</span><br><span class="line">        if (acquireResult) *acquireResult = err;</span><br><span class="line">        if (reply) reply-&gt;setError(err);</span><br><span class="line">        mLastError = err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/IPCThreadState.cpp</span><br><span class="line"></span><br><span class="line">status_t IPCThreadState::talkWithDriver(bool doReceive)</span><br><span class="line">&#123;</span><br><span class="line">    if (mProcess-&gt;mDriverFD &lt;= 0) &#123;</span><br><span class="line">        return -EBADF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binder_write_read bwr;</span><br><span class="line"></span><br><span class="line">    // Is the read buffer empty?</span><br><span class="line">    const bool needRead = mIn.dataPosition() &gt;= mIn.dataSize();</span><br><span class="line"></span><br><span class="line">    // We don&apos;t want to write anything if we are still reading</span><br><span class="line">    // from data left in the input buffer and the caller</span><br><span class="line">    // has requested to read the next data.</span><br><span class="line">    const size_t outAvail = (!doReceive || needRead) ? mOut.dataSize() : 0;</span><br><span class="line"></span><br><span class="line">    bwr.write_size = outAvail;</span><br><span class="line">    bwr.write_buffer = (uintptr_t)mOut.data();</span><br><span class="line"></span><br><span class="line">    // This is what we&apos;ll read.</span><br><span class="line">    if (doReceive &amp;&amp; needRead) &#123;</span><br><span class="line">        bwr.read_size = mIn.dataCapacity();</span><br><span class="line">        bwr.read_buffer = (uintptr_t)mIn.data();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        bwr.read_size = 0;</span><br><span class="line">        bwr.read_buffer = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IF_LOG_COMMANDS() &#123;</span><br><span class="line">        TextOutput::Bundle _b(alog);</span><br><span class="line">        if (outAvail != 0) &#123;</span><br><span class="line">            alog &lt;&lt; &quot;Sending commands to driver: &quot; &lt;&lt; indent;</span><br><span class="line">            const void* cmds = (const void*)bwr.write_buffer;</span><br><span class="line">            const void* end = ((const uint8_t*)cmds)+bwr.write_size;</span><br><span class="line">            alog &lt;&lt; HexDump(cmds, bwr.write_size) &lt;&lt; endl;</span><br><span class="line">            while (cmds &lt; end) cmds = printCommand(alog, cmds);</span><br><span class="line">            alog &lt;&lt; dedent;</span><br><span class="line">        &#125;</span><br><span class="line">        alog &lt;&lt; &quot;Size of receive buffer: &quot; &lt;&lt; bwr.read_size</span><br><span class="line">            &lt;&lt; &quot;, needRead: &quot; &lt;&lt; needRead &lt;&lt; &quot;, doReceive: &quot; &lt;&lt; doReceive &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Return immediately if there is nothing to do.</span><br><span class="line">    if ((bwr.write_size == 0) &amp;&amp; (bwr.read_size == 0)) return NO_ERROR;</span><br><span class="line"></span><br><span class="line">    bwr.write_consumed = 0;</span><br><span class="line">    bwr.read_consumed = 0;</span><br><span class="line">    status_t err;</span><br><span class="line">    do &#123;</span><br><span class="line">        IF_LOG_COMMANDS() &#123;</span><br><span class="line">            alog &lt;&lt; &quot;About to read/write, write size = &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">#if defined(__ANDROID__)</span><br><span class="line">        if (ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= 0)</span><br><span class="line">            err = NO_ERROR;</span><br><span class="line">        else</span><br><span class="line">            err = -errno;</span><br><span class="line">#else</span><br><span class="line">        err = INVALID_OPERATION;</span><br><span class="line">#endif</span><br><span class="line">        if (mProcess-&gt;mDriverFD &lt;= 0) &#123;</span><br><span class="line">            err = -EBADF;</span><br><span class="line">        &#125;</span><br><span class="line">        IF_LOG_COMMANDS() &#123;</span><br><span class="line">            alog &lt;&lt; &quot;Finished read/write, write size = &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (err == -EINTR);</span><br><span class="line"></span><br><span class="line">    IF_LOG_COMMANDS() &#123;</span><br><span class="line">        alog &lt;&lt; &quot;Our err: &quot; &lt;&lt; (void*)(intptr_t)err &lt;&lt; &quot;, write consumed: &quot;</span><br><span class="line">            &lt;&lt; bwr.write_consumed &lt;&lt; &quot; (of &quot; &lt;&lt; mOut.dataSize()</span><br><span class="line">                        &lt;&lt; &quot;), read consumed: &quot; &lt;&lt; bwr.read_consumed &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (err &gt;= NO_ERROR) &#123;</span><br><span class="line">        if (bwr.write_consumed &gt; 0) &#123;</span><br><span class="line">            if (bwr.write_consumed &lt; mOut.dataSize())</span><br><span class="line">                mOut.remove(0, bwr.write_consumed);</span><br><span class="line">            else</span><br><span class="line">                mOut.setDataSize(0);</span><br><span class="line">        &#125;</span><br><span class="line">        if (bwr.read_consumed &gt; 0) &#123;</span><br><span class="line">            mIn.setDataSize(bwr.read_consumed);</span><br><span class="line">            mIn.setDataPosition(0);</span><br><span class="line">        &#125;</span><br><span class="line">        IF_LOG_COMMANDS() &#123;</span><br><span class="line">            TextOutput::Bundle _b(alog);</span><br><span class="line">            alog &lt;&lt; &quot;Remaining data size: &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;</span><br><span class="line">            alog &lt;&lt; &quot;Received commands from driver: &quot; &lt;&lt; indent;</span><br><span class="line">            const void* cmds = mIn.data();</span><br><span class="line">            const void* end = mIn.data() + mIn.dataSize();</span><br><span class="line">            alog &lt;&lt; HexDump(cmds, mIn.dataSize()) &lt;&lt; endl;</span><br><span class="line">            while (cmds &lt; end) cmds = printReturnCommand(alog, cmds);</span><br><span class="line">            alog &lt;&lt; dedent;</span><br><span class="line">        &#125;</span><br><span class="line">        return NO_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Binder之Service Manager代理对象]]></title>
      <url>http://robinheztto.com/2016/03/28/android-binder-4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Service组件在启动时需要将自己注册到Server Manager，Client组件在使用Service的服务前需要从Service Manager获取到Service的代理对象，所以Server Manager以一个特殊的service形式存在。Service Manager运行在一个独立的进程当中，Client组件或Service组件在请求Service Manager服务前，首先得获取到Service Manager的代理对象，本篇主要分析Service Manager代理对象获取的流程。</p>
<p>相关的源码在以下文件中：<br>frameworks/native/include/binder/IServiceManager.h<br>frameworks/native/libs/binder/IServiceManager.cpp<br>frameworks/native/libs/binder/Static.cpp<br>frameworks/native/libs/binder/ProcessState.cpp<br>frameworks/native/libs/binder/BpBinder.cpp<br>frameworks/native/libs/binder/IPCThreadState.cpp<br>frameworks/native/include/binder/IInterface.h</p>
</blockquote>
<p>Frameworks层libbinder提供defaultServiceManager接口用来获取Service Manager代理对象。下图是defaultServiceManager的执行流程。<br><img src="https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/android-defaultServiceManager.jpg?raw=true" alt="defaultServiceManager执行流程"><br>接下来按照上图的流程进行分析。首先看一下IServiceManager的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/IServiceManager.h</span><br><span class="line"></span><br><span class="line">class IServiceManager : public IInterface</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    DECLARE_META_INTERFACE(ServiceManager);</span><br><span class="line"></span><br><span class="line">    virtual sp&lt;IBinder&gt;         getService( const String16&amp; name) const = 0;</span><br><span class="line"></span><br><span class="line">    virtual sp&lt;IBinder&gt;         checkService( const String16&amp; name) const = 0;</span><br><span class="line"></span><br><span class="line">    virtual status_t            addService( const String16&amp; name,</span><br><span class="line">                                            const sp&lt;IBinder&gt;&amp; service,</span><br><span class="line">                                            bool allowIsolated = false) = 0;</span><br><span class="line"></span><br><span class="line">    virtual Vector&lt;String16&gt;    listServices() = 0;</span><br><span class="line"></span><br><span class="line">    enum &#123;</span><br><span class="line">        GET_SERVICE_TRANSACTION = IBinder::FIRST_CALL_TRANSACTION,</span><br><span class="line">        CHECK_SERVICE_TRANSACTION,</span><br><span class="line">        ADD_SERVICE_TRANSACTION,</span><br><span class="line">        LIST_SERVICES_TRANSACTION,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>IServiceManager中定义了getService，checkService，addService，listServices四个成员函数，即Service Manager提供给client用来获取/注册服务的的接口，client获取到Service Manager代理对象后，就能通过这些接口获取注册到Service Manager中服务的信息。下面开始分析如何通过defaultServiceManager()获取Service Manager代理对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; defaultServiceManager()在frameworks/native/libs/binder/IServiceManager.cpp</span><br><span class="line"></span><br><span class="line">sp&lt;IServiceManager&gt; defaultServiceManager()</span><br><span class="line">&#123;</span><br><span class="line">    if (gDefaultServiceManager != NULL) return gDefaultServiceManager;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        AutoMutex _l(gDefaultServiceManagerLock);</span><br><span class="line">        while (gDefaultServiceManager == NULL) &#123;</span><br><span class="line">            gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(</span><br><span class="line">                ProcessState::self()-&gt;getContextObject(NULL));</span><br><span class="line">            if (gDefaultServiceManager == NULL)</span><br><span class="line">                sleep(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return gDefaultServiceManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>gDefaultServiceManager是指向Service Manager代理对象BpServiceManager的强指针，一个进程只存在一个BpServiceManager代理对象，defaultServiceManager()中通过gDefaultServiceManager判断是否已经创建过Service Manager代理对象，如果已经创建过，则直接返回其指针gDefaultServiceManager，否则为获取当前进程的Service Manager代理对象并保存在gDefaultServiceManager中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/Static.cpp</span><br><span class="line"></span><br><span class="line">Mutex gDefaultServiceManagerLock;</span><br><span class="line">sp&lt;IServiceManager&gt; gDefaultServiceManager;</span><br></pre></td></tr></table></figure></p>
<p>defaultServiceManager()中的gDefaultServiceManager的获取即：<br><code>gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(ProcessState::self()-&gt;getContextObject(NULL));</code><br>首先看ProcessState::self()的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/ProcessState.cpp</span><br><span class="line"></span><br><span class="line">sp&lt;ProcessState&gt; ProcessState::self()</span><br><span class="line">&#123;</span><br><span class="line">    Mutex::Autolock _l(gProcessMutex);</span><br><span class="line">    if (gProcess != NULL) &#123;</span><br><span class="line">        return gProcess;</span><br><span class="line">    &#125;</span><br><span class="line">    gProcess = new ProcessState;</span><br><span class="line">    return gProcess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ProcessState::self()即返回ProcessState的对象，每个进程只存在一个ProcessState对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/Static.cpp</span><br><span class="line"></span><br><span class="line">Mutex gProcessMutex;</span><br><span class="line">sp&lt;ProcessState&gt; gProcess;</span><br></pre></td></tr></table></figure></p>
<p>继续看new ProcessState的过程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/ProcessState.cpp</span><br><span class="line"></span><br><span class="line">#define BINDER_VM_SIZE ((1*1024*1024) - (4096 *2))</span><br><span class="line">#define DEFAULT_MAX_BINDER_THREADS 15</span><br><span class="line"></span><br><span class="line">ProcessState::ProcessState()</span><br><span class="line">    : mDriverFD(open_driver())</span><br><span class="line">    , mVMStart(MAP_FAILED)</span><br><span class="line">    , mThreadCountLock(PTHREAD_MUTEX_INITIALIZER)</span><br><span class="line">    , mThreadCountDecrement(PTHREAD_COND_INITIALIZER)</span><br><span class="line">    , mExecutingThreadsCount(0)</span><br><span class="line">    , mMaxThreads(DEFAULT_MAX_BINDER_THREADS)</span><br><span class="line">    , mStarvationStartTimeMs(0)</span><br><span class="line">    , mManagesContexts(false)</span><br><span class="line">    , mBinderContextCheckFunc(NULL)</span><br><span class="line">    , mBinderContextUserData(NULL)</span><br><span class="line">    , mThreadPoolStarted(false)</span><br><span class="line">    , mThreadPoolSeq(1)</span><br><span class="line">&#123;</span><br><span class="line">    if (mDriverFD &gt;= 0) &#123;</span><br><span class="line">        // mmap the binder, providing a chunk of virtual address space to receive transactions.</span><br><span class="line">        mVMStart = mmap(0, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, 0);</span><br><span class="line">        if (mVMStart == MAP_FAILED) &#123;</span><br><span class="line">            // *sigh*</span><br><span class="line">            ALOGE(&quot;Using /dev/binder failed: unable to mmap transaction memory.\n&quot;);</span><br><span class="line">            close(mDriverFD);</span><br><span class="line">            mDriverFD = -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int open_driver()</span><br><span class="line">&#123;</span><br><span class="line">    int fd = open(&quot;/dev/binder&quot;, O_RDWR | O_CLOEXEC);</span><br><span class="line">    if (fd &gt;= 0) &#123;</span><br><span class="line">        int vers = 0;</span><br><span class="line">        status_t result = ioctl(fd, BINDER_VERSION, &amp;vers);</span><br><span class="line">        if (result == -1) &#123;</span><br><span class="line">            ALOGE(&quot;Binder ioctl to obtain version failed: %s&quot;, strerror(errno));</span><br><span class="line">            close(fd);</span><br><span class="line">            fd = -1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (result != 0 || vers != BINDER_CURRENT_PROTOCOL_VERSION) &#123;</span><br><span class="line">            ALOGE(&quot;Binder driver protocol does not match user space protocol!&quot;);</span><br><span class="line">            close(fd);</span><br><span class="line">            fd = -1;</span><br><span class="line">        &#125;</span><br><span class="line">        size_t maxThreads = DEFAULT_MAX_BINDER_THREADS;</span><br><span class="line">        result = ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);</span><br><span class="line">        if (result == -1) &#123;</span><br><span class="line">            ALOGE(&quot;Binder ioctl to set max threads failed: %s&quot;, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ALOGW(&quot;Opening &apos;/dev/binder&apos; failed: %s\n&quot;, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    return fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ProcessState()的构造函数中主要执行的是对/dev/binder的操作，打开/dev/binder并将fd保存在mDriverFD中，通过ioctl设置binder通信线程池最大线程数为BINDER_SET_MAX_THREADS 15个，mmap映射BINDER_VM_SIZE 1016kb大小缓冲区。open，mmap在驱动章节已分析过，下面是ioctl BINDER_SET_MAX_THREADS的流程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; kernel/drivers/staging/android/binder.c</span><br><span class="line"></span><br><span class="line">static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)</span><br><span class="line">&#123;</span><br><span class="line">	int ret;</span><br><span class="line">	struct binder_proc *proc = filp-&gt;private_data;</span><br><span class="line">	struct binder_thread *thread;</span><br><span class="line">	unsigned int size = _IOC_SIZE(cmd);</span><br><span class="line">	void __user *ubuf = (void __user *)arg;</span><br><span class="line">    ......</span><br><span class="line">	binder_lock(__func__);</span><br><span class="line">	thread = binder_get_thread(proc);</span><br><span class="line">	if (thread == NULL) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		goto err;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	switch (cmd) &#123;</span><br><span class="line">    ......</span><br><span class="line">	case BINDER_SET_MAX_THREADS:</span><br><span class="line">		if (copy_from_user(&amp;proc-&gt;max_threads, ubuf, sizeof(proc-&gt;max_threads))) &#123;</span><br><span class="line">			ret = -EINVAL;</span><br><span class="line">			goto err;</span><br><span class="line">		&#125;</span><br><span class="line">		break;</span><br><span class="line">    .....</span><br><span class="line">	return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>binder_ioctl BINDER_SET_MAX_THREADS即设置proc-&gt;max_threads。继续看ProcessState::self()-&gt;getContextObject(NULL)的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/ProcessState.cpp</span><br><span class="line"></span><br><span class="line">sp&lt;IBinder&gt; ProcessState::getContextObject(const sp&lt;IBinder&gt;&amp; /*caller*/)</span><br><span class="line">&#123;</span><br><span class="line">    return getStrongProxyForHandle(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>getContextObject返回的是sp<ibinder>对象，即返回的是Service Manager的BpBinder对象，直接通过getStrongProxyForHandle(0)实现，Service Manager作为一个特殊的Service组件，它对应的句柄值是０。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/ProcessState.cpp</span><br><span class="line"></span><br><span class="line">sp&lt;IBinder&gt; ProcessState::getStrongProxyForHandle(int32_t handle)</span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;IBinder&gt; result;</span><br><span class="line"></span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line"></span><br><span class="line">    handle_entry* e = lookupHandleLocked(handle);</span><br><span class="line"></span><br><span class="line">    if (e != NULL) &#123;</span><br><span class="line">        IBinder* b = e-&gt;binder;</span><br><span class="line">        if (b == NULL || !e-&gt;refs-&gt;attemptIncWeak(this)) &#123;</span><br><span class="line">            if (handle == 0) &#123;</span><br><span class="line">                Parcel data;</span><br><span class="line">                status_t status = IPCThreadState::self()-&gt;transact(</span><br><span class="line">                        0, IBinder::PING_TRANSACTION, data, NULL, 0);</span><br><span class="line">                if (status == DEAD_OBJECT)</span><br><span class="line">                   return NULL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            b = new BpBinder(handle);</span><br><span class="line">            e-&gt;binder = b;</span><br><span class="line">            if (b) e-&gt;refs = b-&gt;getWeakRefs();</span><br><span class="line">            result = b;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result.force_set(b);</span><br><span class="line">            e-&gt;refs-&gt;decWeak(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></ibinder></p>
<p>每个ProcessState中都维护一个了handle_entry类型的BpBinder代理对象列表，以句柄值为索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class ProcessState : public virtual RefBase</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">            ......</span><br><span class="line"></span><br><span class="line">            struct handle_entry &#123;</span><br><span class="line">                IBinder* binder;</span><br><span class="line">                RefBase::weakref_type* refs;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            handle_entry*       lookupHandleLocked(int32_t handle);</span><br><span class="line"></span><br><span class="line">            ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>getStrongProxyForHandle()通过lookupHandleLocked()根据句柄值在mHandleToObject中查找对应的handle_entry，如果不存在，则新建handle_entry并保存在mHandleToObject中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ProcessState::handle_entry* ProcessState::lookupHandleLocked(int32_t handle)</span><br><span class="line">&#123;</span><br><span class="line">    const size_t N=mHandleToObject.size();</span><br><span class="line">    if (N &lt;= (size_t)handle) &#123;</span><br><span class="line">        handle_entry e;</span><br><span class="line">        e.binder = NULL;</span><br><span class="line">        e.refs = NULL;</span><br><span class="line">        status_t err = mHandleToObject.insertAt(e, N, handle+1-N);</span><br><span class="line">        if (err &lt; NO_ERROR) return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    return &amp;mHandleToObject.editItemAt(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>找到handle_entry后判断handle_entry-&gt;binder是否存在，如果不存在，则根据句柄值handle创建新的BpBinder对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/BpBinder.cpp</span><br><span class="line"></span><br><span class="line">BpBinder::BpBinder(int32_t handle)</span><br><span class="line">    : mHandle(handle)</span><br><span class="line">    , mAlive(1)</span><br><span class="line">    , mObitsSent(0)</span><br><span class="line">    , mObituaries(NULL)</span><br><span class="line">&#123;</span><br><span class="line">    extendObjectLifetime(OBJECT_LIFETIME_WEAK);</span><br><span class="line">    IPCThreadState::self()-&gt;incWeakHandle(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>将句柄handle保存到私有成员mHandle中，并通过IPCThreadState增加Service Manager实体的引用计数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/IPCThreadState.cpp</span><br><span class="line"></span><br><span class="line">IPCThreadState* IPCThreadState::self()</span><br><span class="line">&#123;</span><br><span class="line">    if (gHaveTLS) &#123;</span><br><span class="line">restart:</span><br><span class="line">        const pthread_key_t k = gTLS;</span><br><span class="line">        IPCThreadState* st = (IPCThreadState*)pthread_getspecific(k);</span><br><span class="line">        if (st) return st;</span><br><span class="line">        return new IPCThreadState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (gShutdown) &#123;</span><br><span class="line">        ALOGW(&quot;Calling IPCThreadState::self() during shutdown is dangerous, expect a crash.\n&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;gTLSMutex);</span><br><span class="line">    if (!gHaveTLS) &#123;</span><br><span class="line">        int key_create_value = pthread_key_create(&amp;gTLS, threadDestructor);</span><br><span class="line">        if (key_create_value != 0) &#123;</span><br><span class="line">            pthread_mutex_unlock(&amp;gTLSMutex);</span><br><span class="line">            ALOGW(&quot;IPCThreadState::self() unable to create TLS key, expect a crash: %s\n&quot;,</span><br><span class="line">                    strerror(key_create_value));</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        gHaveTLS = true;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;gTLSMutex);</span><br><span class="line">    goto restart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>IPCThreadState::self中获取IPCThreadState对象。若该对象已经存在，则直接返回，否则新建IPCThreadState对象。<br>至此，<code>ProcessState::self()-&gt;getContextObject(NULL))</code>执行完成，它返回的是Service Manager的Bpbinder对象，即<code>gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(Bpbinder(0))</code>，继续看interface_cast<iservicemanager>()的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/IInterface.h</span><br><span class="line"></span><br><span class="line">template&lt;typename INTERFACE&gt;</span><br><span class="line">inline sp&lt;INTERFACE&gt; interface_cast(const sp&lt;IBinder&gt;&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">    return INTERFACE::asInterface(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></iservicemanager></p>
<p>即IServiceManager::asInterface(Bpbinder(0))，但asInterface并未直接在IServiceManager中定义，而是通过宏 <strong>DECLARE_META_INTERFACE(ServiceManager)</strong>, <strong>IMPLEMENT_META_INTERFACE(ServiceManager, “android.os.IServiceManager”)</strong> 来实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/IInterface.h</span><br><span class="line"></span><br><span class="line">#define DECLARE_META_INTERFACE(INTERFACE)                               \</span><br><span class="line">    static const android::String16 descriptor;                          \</span><br><span class="line">    static android::sp&lt;I##INTERFACE&gt; asInterface(                       \</span><br><span class="line">            const android::sp&lt;android::IBinder&gt;&amp; obj);                  \</span><br><span class="line">    virtual const android::String16&amp; getInterfaceDescriptor() const;    \</span><br><span class="line">    I##INTERFACE();                                                     \</span><br><span class="line">    virtual ~I##INTERFACE();                                            \</span><br><span class="line"></span><br><span class="line">#define IMPLEMENT_META_INTERFACE(INTERFACE, NAME)                       \</span><br><span class="line">    const android::String16 I##INTERFACE::descriptor(NAME);             \</span><br><span class="line">    const android::String16&amp;                                            \</span><br><span class="line">            I##INTERFACE::getInterfaceDescriptor() const &#123;              \</span><br><span class="line">        return I##INTERFACE::descriptor;                                \</span><br><span class="line">    &#125;                                                                   \</span><br><span class="line">    android::sp&lt;I##INTERFACE&gt; I##INTERFACE::asInterface(                \</span><br><span class="line">            const android::sp&lt;android::IBinder&gt;&amp; obj)                   \</span><br><span class="line">    &#123;                                                                   \</span><br><span class="line">        android::sp&lt;I##INTERFACE&gt; intr;                                 \</span><br><span class="line">        if (obj != NULL) &#123;                                              \</span><br><span class="line">            intr = static_cast&lt;I##INTERFACE*&gt;(                          \</span><br><span class="line">                obj-&gt;queryLocalInterface(                               \</span><br><span class="line">                        I##INTERFACE::descriptor).get());               \</span><br><span class="line">            if (intr == NULL) &#123;                                         \</span><br><span class="line">                intr = new Bp##INTERFACE(obj);                          \</span><br><span class="line">            &#125;                                                           \</span><br><span class="line">        &#125;                                                               \</span><br><span class="line">        return intr;                                                    \</span><br><span class="line">    &#125;                                                                   \</span><br><span class="line">    I##INTERFACE::I##INTERFACE() &#123; &#125;                                    \</span><br><span class="line">    I##INTERFACE::~I##INTERFACE() &#123; &#125;                                   \</span><br></pre></td></tr></table></figure></p>
<p>将INTERFACE以ServiceManager替换展开如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#define DECLARE_META_INTERFACE(ServiceManager)                               \</span><br><span class="line">    static const android::String16 descriptor;                          \</span><br><span class="line">    static android::sp&lt;IServiceManager&gt; asInterface(                       \</span><br><span class="line">            const android::sp&lt;android::IBinder&gt;&amp; obj);                  \</span><br><span class="line">    virtual const android::String16&amp; getInterfaceDescriptor() const;    \</span><br><span class="line">    IServiceManager;                                                     \</span><br><span class="line">    virtual ~IServiceManager();                                            \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define IMPLEMENT_META_INTERFACE(ServiceManager, &quot;android.os.IServiceManager&quot;)                       \</span><br><span class="line">    const android::String16 IServiceManager::descriptor(&quot;android.os.IServiceManager&quot;);             \</span><br><span class="line">    const android::String16&amp;                                            \</span><br><span class="line">            IServiceManager::getInterfaceDescriptor() const &#123;              \</span><br><span class="line">        return IServiceManager::descriptor;                                \</span><br><span class="line">    &#125;                                                                   \</span><br><span class="line">    android::sp&lt;IServiceManager&gt; IServiceManager::asInterface(                \</span><br><span class="line">            const android::sp&lt;android::IBinder&gt;&amp; obj)                   \</span><br><span class="line">    &#123;                                                                   \</span><br><span class="line">        android::sp&lt;IServiceManager&gt; intr;                                 \</span><br><span class="line">        if (obj != NULL) &#123;                                              \</span><br><span class="line">            intr = static_cast&lt;IServiceManager*&gt;(                          \</span><br><span class="line">                obj-&gt;queryLocalInterface(                               \</span><br><span class="line">                        IServiceManager::descriptor).get());               \</span><br><span class="line">            if (intr == NULL) &#123;                                         \</span><br><span class="line">                intr = new BpServiceManager(obj);                          \</span><br><span class="line">            &#125;                                                           \</span><br><span class="line">        &#125;                                                               \</span><br><span class="line">        return intr;                                                    \</span><br><span class="line">    &#125;                                                                   \</span><br><span class="line">    IServiceManager::IServiceManager() &#123; &#125;                                    \</span><br><span class="line">    IServiceManager::~IServiceManager() &#123; &#125;                                   \</span><br></pre></td></tr></table></figure></p>
<p>IServiceManager::asInterface()的实现如下，asInterface()即根据Bpbinder对象获取IServiceManager。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android::sp&lt;IServiceManager&gt; IServiceManager::asInterface(const android::sp&lt;android::IBinder&gt;&amp; obj)              </span><br><span class="line">&#123;                                                                </span><br><span class="line">    android::sp&lt;IServiceManager&gt; intr;                                </span><br><span class="line">    if (obj != NULL) &#123;                                              </span><br><span class="line">        intr = static_cast&lt;IServiceManager*&gt;(                          </span><br><span class="line">            obj-&gt;queryLocalInterface(                               </span><br><span class="line">                    IServiceManager::descriptor).get());               </span><br><span class="line">        if (intr == NULL) &#123;                                         </span><br><span class="line">            intr = new BpServiceManager(obj);                          </span><br><span class="line">        &#125;                                                           </span><br><span class="line">    &#125;                                                               </span><br><span class="line">    return intr;                                                    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 参数obj即BpBinder(0)，obj-&gt;queryLocalInterface(“android.os.IServiceManager”)查找名称为”android.os.IServiceManager”的本地接口，queryLocalInterface()的实现在BpBinder的父类IBinder中，现在IServiceManager接口还没创建，intr=NULL，根据BpBinder创建一个BpServiceManager，即gDefaultServiceManager = new BpServiceManager(new BpBinder(0))。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/libs/binder/IServiceManager.cpp</span><br><span class="line"></span><br><span class="line"> BpServiceManager(const sp&lt;IBinder&gt;&amp; impl)</span><br><span class="line">    : BpInterface&lt;IServiceManager&gt;(impl)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/IInterface.h</span><br><span class="line"></span><br><span class="line">template&lt;typename INTERFACE&gt;</span><br><span class="line">inline BpInterface&lt;INTERFACE&gt;::BpInterface(const sp&lt;IBinder&gt;&amp; remote)</span><br><span class="line">    : BpRefBase(remote)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/Binder.h</span><br><span class="line"></span><br><span class="line">class BpRefBase : public virtual RefBase</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">private:</span><br><span class="line">    ......</span><br><span class="line">    IBinder* const          mRemote;</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p> 由上可知BpServiceManager继承于BpInterface，而BpInterface又继承于BpRefBase，最后BpBinder(0)即mRemote对象。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Binder之进程间通信库]]></title>
      <url>http://robinheztto.com/2016/03/28/android-binder-3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>为了方便对Binder驱动的操作及上层调用，Binder通信的细节及与驱动交互的过程都被封装到了libbinder库中。libbinder相关的源码位于frameworks/native/libs/binder下，本篇分析libbinder库中的基础类。</p>
</blockquote>
<h1 id="RefBase"><a href="#RefBase" class="headerlink" title="RefBase"></a>RefBase</h1><p>RefBase在system/core/include/utils/RefBase.h中定义，它是一个公共父类，声明了引用计数操作相关的接口。继承RefBase的子类能通过强指针与弱指针维护它们的生命周期。</p>
<h1 id="ProcessState"><a href="#ProcessState" class="headerlink" title="ProcessState"></a>ProcessState</h1><p>每个进程间通信的进程都有一个ProcessState对象，它负责与binder驱动建立联系。ProcessState对象通过静态成员函数self()来获取，mDriverFD保存了打开设备文件/dev/binder的句柄值，mVMStart保存映射的内核缓冲区对应用户空间的起始地址。其中mHandleToObject是一个Vector矢量数组，保存着server的句柄即及其对应的BpBinder对象(server的句柄即Server在Binder驱动中的Binder引用的描述，0对应Service Manager，BpBinder即binder的代理类)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/ProcessState.h</span><br><span class="line"></span><br><span class="line">class ProcessState : public virtual RefBase</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    static  sp&lt;ProcessState&gt;    self();</span><br><span class="line">            ......</span><br><span class="line">            sp&lt;IBinder&gt;         getContextObject(const sp&lt;IBinder&gt;&amp; caller);</span><br><span class="line">            ......</span><br><span class="line">            sp&lt;IBinder&gt;         getContextObject(const String16&amp; name,</span><br><span class="line">                                                 const sp&lt;IBinder&gt;&amp; caller);</span><br><span class="line">            void                startThreadPool();</span><br><span class="line">            ......</span><br><span class="line">private:</span><br><span class="line">            ......</span><br><span class="line">            struct handle_entry &#123;</span><br><span class="line">                IBinder* binder;</span><br><span class="line">                RefBase::weakref_type* refs;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            handle_entry*       lookupHandleLocked(int32_t handle);</span><br><span class="line"></span><br><span class="line">            int                 mDriverFD;</span><br><span class="line">            void*               mVMStart;</span><br><span class="line">            ......</span><br><span class="line">            size_t              mMaxThreads;</span><br><span class="line">            ......</span><br><span class="line">            Vector&lt;handle_entry&gt;mHandleToObject;</span><br><span class="line">            ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="IPCThreadState"><a href="#IPCThreadState" class="headerlink" title="IPCThreadState"></a>IPCThreadState</h1><p>每个Binder通信的进程都有一个binder线程池，每个线程都对应一个IPCThreadState对象，它负责与驱动的交互，收发进程间通信数据。IPCThreadState对象通过静态成员函数self()获取，mProcess指向ProcessState对象(每个进程中只存在一个ProcessState对象)。transact()函数负责向驱动发送进程间通信数据，最后通过talkWithDriver()与驱动交互。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/IPCThreadState.h</span><br><span class="line"></span><br><span class="line">class IPCThreadState</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    static  IPCThreadState*     self();</span><br><span class="line">            ......</span><br><span class="line">            status_t            transact(int32_t handle,</span><br><span class="line">                                         uint32_t code, const Parcel&amp; data,</span><br><span class="line">                                         Parcel* reply, uint32_t flags);</span><br><span class="line">            ......</span><br><span class="line">private:</span><br><span class="line">            ......</span><br><span class="line">            status_t            talkWithDriver(bool doReceive=true);</span><br><span class="line">            ......</span><br><span class="line">            const   sp&lt;ProcessState&gt;    mProcess;</span><br><span class="line">            const   pid_t               mMyThreadId;</span><br><span class="line">            Parcel              mIn;</span><br><span class="line">            Parcel              mOut;</span><br><span class="line">            ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="IBinder"><a href="#IBinder" class="headerlink" title="IBinder"></a>IBinder</h1><p>IBinder是一个基础类，BpBinder与BBinder都继承于它，其中成员函数remoteBinder()用于获取远程Binder BpBinder，localBinder()用于获取本地Binder BBinder。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/IBinder.h</span><br><span class="line"></span><br><span class="line">class IBinder : public virtual RefBase</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual sp&lt;IInterface&gt;  queryLocalInterface(const String16&amp; descriptor);</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">    virtual status_t        transact(   uint32_t code,</span><br><span class="line">                                        const Parcel&amp; data,</span><br><span class="line">                                        Parcel* reply,</span><br><span class="line">                                        uint32_t flags = 0) = 0;</span><br><span class="line">    ......</span><br><span class="line">    virtual BBinder*        localBinder();</span><br><span class="line">    virtual BpBinder*       remoteBinder();</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="BBinder"><a href="#BBinder" class="headerlink" title="BBinder"></a>BBinder</h1><p>BBinder，本地Binder，它有一个非常重要的成员函数onTransact()，Server收到进程间通信请求后，会调用onTransact()进行分发处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/Binder.h</span><br><span class="line"></span><br><span class="line">class BBinder : public IBinder</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    ......</span><br><span class="line">    virtual BBinder*    localBinder();</span><br><span class="line">protected:</span><br><span class="line">    virtual status_t    onTransact( uint32_t code,</span><br><span class="line">                                    const Parcel&amp; data,</span><br><span class="line">                                    Parcel* reply,</span><br><span class="line">                                    uint32_t flags = 0);</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="BpBinder"><a href="#BpBinder" class="headerlink" title="BpBinder"></a>BpBinder</h1><p>BpBinder，远程Binder，它也有一个非常重要的成员函数transact()，BpBinder的transact()会调用IPCThreadState的transact()进行处理。BpBinder中有一成员mHandle，用于保存Server在Binder驱动中的Binder引用的句柄，通过这个句柄就可以与驱动中的binder引用建立联系，其中0代表ServiceManager的binder引用的句柄。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/BpBinder.h</span><br><span class="line"></span><br><span class="line">class BpBinder : public IBinder</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">                        BpBinder(int32_t handle);</span><br><span class="line">    inline  int32_t     handle() const &#123; return mHandle; &#125;</span><br><span class="line">    ......</span><br><span class="line">    virtual status_t    transact(   uint32_t code,</span><br><span class="line">                                    const Parcel&amp; data,</span><br><span class="line">                                    Parcel* reply,</span><br><span class="line">                                    uint32_t flags = 0);</span><br><span class="line">    ......</span><br><span class="line">private:</span><br><span class="line">    const   int32_t             mHandle;</span><br><span class="line">    .....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="BpRefBase"><a href="#BpRefBase" class="headerlink" title="BpRefBase"></a>BpRefBase</h1><p>BpRefBase中有一重要的成员mRemote，它指向BpBinder对象，并可通过成员函数remote()获取。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/Binder.h</span><br><span class="line"></span><br><span class="line">class BpRefBase : public virtual RefBase</span><br><span class="line">&#123;</span><br><span class="line">protected:</span><br><span class="line">                            BpRefBase(const sp&lt;IBinder&gt;&amp; o);</span><br><span class="line">    ......</span><br><span class="line">    inline  IBinder*        remote()                &#123; return mRemote; &#125;</span><br><span class="line">    inline  IBinder*        remote() const          &#123; return mRemote; &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    ......</span><br><span class="line">    IBinder* const          mRemote;</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="IInterface"><a href="#IInterface" class="headerlink" title="IInterface"></a>IInterface</h1><p>IInterface在frameworks/native/include/binder/IInterface.h中定义，它也是一个公共父类。</p>
<h1 id="BnInterface"><a href="#BnInterface" class="headerlink" title="BnInterface"></a>BnInterface</h1><p>BnInterface是一个模板类，同时继承了BBinder和INTERFACE，本地服务通过继承BpInterface来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/IInterface.h</span><br><span class="line"></span><br><span class="line">template&lt;typename INTERFACE&gt;</span><br><span class="line">class BnInterface : public INTERFACE, public BBinder</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual sp&lt;IInterface&gt;      queryLocalInterface(const String16&amp; _descriptor);</span><br><span class="line">    virtual const String16&amp;     getInterfaceDescriptor() const;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    virtual IBinder*            onAsBinder();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="BpInterface"><a href="#BpInterface" class="headerlink" title="BpInterface"></a>BpInterface</h1><p>BpInterface也是一个模板类，同时继承了BpRefBase和INTERFACE，服务代理通过继承BpInterface来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; frameworks/native/include/binder/IInterface.h</span><br><span class="line"></span><br><span class="line">template&lt;typename INTERFACE&gt;</span><br><span class="line">class BpInterface : public INTERFACE, public BpRefBase</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">                                BpInterface(const sp&lt;IBinder&gt;&amp; remote);</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    virtual IBinder*            onAsBinder();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Binder之Service Manager]]></title>
      <url>http://robinheztto.com/2016/03/25/android-binder-2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>servicemanager是Binder进程间通信的核心组件之一，负责管理service组件并向client提供service代理对象。servicemanager运行在独立的进程中，service或client组件也需要与servicemanager进行进程间通信，所以servicemanager也可以看成一个特殊的service组件。</p>
<p>源码位于以下文件中：<br>frameworks/native/cmds/servicemanager/service_manager.c<br>frameworks/native/cmds/servicemanager/binder.c<br>frameworks/native/cmds/servicemanager/binder.h</p>
</blockquote>
<h1 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h1><p>servicemanager是由Init进程通过解析Initrc启动的，它的启动脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">service servicemanager /system/bin/servicemanager</span><br><span class="line">    class core</span><br><span class="line">    user system</span><br><span class="line">    group system</span><br><span class="line">    critical</span><br><span class="line">    onrestart restart healthd</span><br><span class="line">    onrestart restart zygote</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart surfaceflinger</span><br><span class="line">    onrestart restart drm</span><br><span class="line"></span><br><span class="line">on boot</span><br><span class="line">    .......</span><br><span class="line">    class_start core</span><br></pre></td></tr></table></figure>
<p>servicemanager服务定义在<code>class core</code>中，Init执行<code>on boot</code>阶段时会通过<code>class_start core</code>启动包括servicemanager在内的系统核心服务。其中<code>user system</code>与<code>group system</code>指定servicemanager以system的身份运行。critical表明servicemanager是系统的关键服务,关键服务如果退出4次以上，系统将重启至recovery。最后的<code>onrestart</code>表示servicemanager退出后需要重新启动healthd，zygote，media，surfaceflinger，drm进程。</p>
<h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><p>servicemanager的源码位于frameworks/native/cmds/servicemanager下,启动入口是service_manager.c的main()函数,下图是servicemanager的大致启动流程.</p>
<p><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/binder_service_manager.jpg?raw=true" alt="service_manager"><br></div><br>下面从main()开始分析servicemanager的启动过程.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct binder_state *bs;</span><br><span class="line"></span><br><span class="line">    bs = binder_open(128*1024);</span><br><span class="line">    if (!bs) &#123;</span><br><span class="line">        ALOGE(&quot;failed to open binder driver\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (binder_become_context_manager(bs)) &#123;</span><br><span class="line">        ALOGE(&quot;cannot become context manager (%s)\n&quot;, strerror(errno));</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    binder_loop(bs, svcmgr_handler);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>整个启动过程分成三步，首先binder_open打开/dev/binder并mmap映射到本进程地址空间，然后调用binder_become_context_manager注册成为整个binder通信系统的管理者，最后在binder_loop中循环等待并处理client的请求。下面逐步进行分析。</p>
<h2 id="binder-open"><a href="#binder-open" class="headerlink" title="binder_open"></a>binder_open</h2><p>首先看一下binder_state结构体，它在binder.c中定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct binder_state</span><br><span class="line">&#123;</span><br><span class="line">    int fd;  // 打开/dev/binder的文件描述符</span><br><span class="line">    void *mapped; // mmap的起始地址</span><br><span class="line">    size_t mapsize; // mmap的大小</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>binder_state主要用来保存binder open及ioctl操作的信息。下面看binder_open的实现，binder_open也在binder.c中实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">struct binder_state *binder_open(size_t mapsize)</span><br><span class="line">&#123;</span><br><span class="line">    struct binder_state *bs;</span><br><span class="line">    struct binder_version vers;</span><br><span class="line"></span><br><span class="line">    bs = malloc(sizeof(*bs));</span><br><span class="line">    if (!bs) &#123;</span><br><span class="line">        errno = ENOMEM;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bs-&gt;fd = open(&quot;/dev/binder&quot;, O_RDWR | O_CLOEXEC);</span><br><span class="line">    if (bs-&gt;fd &lt; 0) &#123;</span><br><span class="line">        fprintf(stderr,&quot;binder: cannot open device (%s)\n&quot;,</span><br><span class="line">                strerror(errno));</span><br><span class="line">        goto fail_open;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ((ioctl(bs-&gt;fd, BINDER_VERSION, &amp;vers) == -1) ||</span><br><span class="line">        (vers.protocol_version != BINDER_CURRENT_PROTOCOL_VERSION)) &#123;</span><br><span class="line">        fprintf(stderr,</span><br><span class="line">                &quot;binder: kernel driver version (%d) differs from user space version (%d)\n&quot;,</span><br><span class="line">                vers.protocol_version, BINDER_CURRENT_PROTOCOL_VERSION);</span><br><span class="line">        goto fail_open;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bs-&gt;mapsize = mapsize;</span><br><span class="line">    bs-&gt;mapped = mmap(NULL, mapsize, PROT_READ, MAP_PRIVATE, bs-&gt;fd, 0);</span><br><span class="line">    if (bs-&gt;mapped == MAP_FAILED) &#123;</span><br><span class="line">        fprintf(stderr,&quot;binder: cannot map device (%s)\n&quot;,</span><br><span class="line">                strerror(errno));</span><br><span class="line">        goto fail_map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return bs;</span><br><span class="line"></span><br><span class="line">fail_map:</span><br><span class="line">    close(bs-&gt;fd);</span><br><span class="line">fail_open:</span><br><span class="line">    free(bs);</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>binder_open主要完成的是打开/dev/binder并映射到本进程的地址空间，对应的信息保存在binder_state中，（open　mmap分别会调到driver层的binder_open与binder_mmap，binder_open与binder_mmap的具体实现可参考上篇）。其中mmap，第一个参数是映射内存的起始地址，NULL代表让系统自动选定地址，mapsize大小是128*1024B，即为servicemanager分配了128K内核缓冲区。PROT_READ表示映射区域是可读的，MAP_PRIVATE表示建立一个写入时拷贝的私有映射，即当进程中对该内存区域进行写入时，是写入到映射的拷贝中。</p>
<h2 id="binder-become-context-manager"><a href="#binder-become-context-manager" class="headerlink" title="binder_become_context_manager"></a>binder_become_context_manager</h2><p>binder_become_context_manager同样在binder.c中实现，通过调用该函数使servicemanager注册成为Binder的上下文管理者。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int binder_become_context_manager(struct binder_state *bs)</span><br><span class="line">&#123;</span><br><span class="line">    return ioctl(bs-&gt;fd, BINDER_SET_CONTEXT_MGR, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在drivers/staging/android/uapi/binder.h中定义</span><br><span class="line">#define BINDER_SET_CONTEXT_MGR      _IOW(&apos;b&apos;, 7, __s32)</span><br></pre></td></tr></table></figure></p>
<p>binder_become_context_manager通过ioctl设置BINDER_SET_CONTEXT_MGR，由于servicemanager作为一个特殊的service,BINDER_SET_CONTEXT_MGR的参数设置为０。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)</span><br><span class="line">&#123;</span><br><span class="line">	int ret;</span><br><span class="line">	struct binder_proc *proc = filp-&gt;private_data;</span><br><span class="line">	struct binder_thread *thread;</span><br><span class="line">	unsigned int size = _IOC_SIZE(cmd);</span><br><span class="line">	void __user *ubuf = (void __user *)arg;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">	binder_lock(__func__);</span><br><span class="line">  // 从proc获取对应当前线程的binder_thread，没有则创建并关联到proc</span><br><span class="line">	thread = binder_get_thread(proc);</span><br><span class="line">	if (thread == NULL) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		goto err;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	switch (cmd) &#123;</span><br><span class="line">  ......</span><br><span class="line">	case BINDER_SET_CONTEXT_MGR:</span><br><span class="line">    // 已经存在binder上下文管理者的binder实体，说明已经注册，出错返回</span><br><span class="line">		if (binder_context_mgr_node != NULL) &#123;</span><br><span class="line">			pr_err(&quot;BINDER_SET_CONTEXT_MGR already set\n&quot;);</span><br><span class="line">			ret = -EBUSY;</span><br><span class="line">			goto err;</span><br><span class="line">		&#125;</span><br><span class="line">		ret = security_binder_set_context_mgr(proc-&gt;tsk);</span><br><span class="line">		if (ret &lt; 0)</span><br><span class="line">			goto err;</span><br><span class="line">		if (uid_valid(binder_context_mgr_uid)) &#123;</span><br><span class="line">			if (!uid_eq(binder_context_mgr_uid, current-&gt;cred-&gt;euid)) &#123;</span><br><span class="line">				pr_err(&quot;BINDER_SET_CONTEXT_MGR bad uid %d != %d\n&quot;,</span><br><span class="line">				       from_kuid(&amp;init_user_ns, current-&gt;cred-&gt;euid),</span><br><span class="line">				       from_kuid(&amp;init_user_ns, binder_context_mgr_uid));</span><br><span class="line">				ret = -EPERM;</span><br><span class="line">				goto err;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; else</span><br><span class="line">      // binder_context_mgr_uid设置为当前进程的有效euid</span><br><span class="line">			binder_context_mgr_uid = current-&gt;cred-&gt;euid;</span><br><span class="line">    // 创建binder上下文管理者的binder实体，并设置binder_context_mgr_node</span><br><span class="line">		binder_context_mgr_node = binder_new_node(proc, 0, 0);</span><br><span class="line">		if (binder_context_mgr_node == NULL) &#123;</span><br><span class="line">			ret = -ENOMEM;</span><br><span class="line">			goto err;</span><br><span class="line">		&#125;</span><br><span class="line">    // 增加引用计数，防止驱动将其释放</span><br><span class="line">		binder_context_mgr_node-&gt;local_weak_refs++;</span><br><span class="line">		binder_context_mgr_node-&gt;local_strong_refs++;</span><br><span class="line">		binder_context_mgr_node-&gt;has_strong_ref = 1;</span><br><span class="line">		binder_context_mgr_node-&gt;has_weak_ref = 1;</span><br><span class="line">		break;</span><br><span class="line">    ......</span><br><span class="line">	&#125;</span><br><span class="line">	ret = 0;</span><br><span class="line">err:</span><br><span class="line">	if (thread)</span><br><span class="line">    // 清除thread-&gt;looper上的BINDER_LOOPER_STATE_NEED_RETURN状态</span><br><span class="line">		thread-&gt;looper &amp;= ~BINDER_LOOPER_STATE_NEED_RETURN;</span><br><span class="line">	binder_unlock(__func__);</span><br><span class="line">	wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; 2);</span><br><span class="line">err_unlocked:</span><br><span class="line">	trace_binder_ioctl_done(ret);</span><br><span class="line">	return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>首先通过binder_get_thread获取当前线程对应的binder_thread，即在红黑树proc-&gt;threads中以pid为关键字遍历，如果没有则创建一个.</li>
<li>检查binder_context_mgr_node是否为NULL，防止重复注册.</li>
<li>然后设置binder_context_mgr_uid为当前uid，并通过binder_new_node新建binder实体并赋值给binder_context_mgr_node.新建Binder实体后并增加其引用计数防止驱动将其释放.最后清除thread BINDER_LOOPER_STATE_NEED_RETURN状态返回.下面是binder_new_node的实现：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">static struct binder_node *binder_new_node(struct binder_proc *proc,</span><br><span class="line">					   binder_uintptr_t ptr,</span><br><span class="line">					   binder_uintptr_t cookie)</span><br><span class="line">&#123;</span><br><span class="line">	struct rb_node **p = &amp;proc-&gt;nodes.rb_node;</span><br><span class="line">	struct rb_node *parent = NULL;</span><br><span class="line">	struct binder_node *node;</span><br><span class="line"></span><br><span class="line">	while (*p) &#123;</span><br><span class="line">		parent = *p;</span><br><span class="line">		node = rb_entry(parent, struct binder_node, rb_node);</span><br><span class="line"></span><br><span class="line">		if (ptr &lt; node-&gt;ptr)</span><br><span class="line">			p = &amp;(*p)-&gt;rb_left;</span><br><span class="line">		else if (ptr &gt; node-&gt;ptr)</span><br><span class="line">			p = &amp;(*p)-&gt;rb_right;</span><br><span class="line">		else</span><br><span class="line">			return NULL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	node = kzalloc_preempt_disabled(sizeof(*node));</span><br><span class="line">	if (node == NULL)</span><br><span class="line">		return NULL;</span><br><span class="line">	binder_stats_created(BINDER_STAT_NODE);</span><br><span class="line">	rb_link_node(&amp;node-&gt;rb_node, parent, p);</span><br><span class="line">	rb_insert_color(&amp;node-&gt;rb_node, &amp;proc-&gt;nodes);</span><br><span class="line">	node-&gt;debug_id = ++binder_last_id;</span><br><span class="line">	node-&gt;proc = proc;</span><br><span class="line">	node-&gt;ptr = ptr;</span><br><span class="line">	node-&gt;cookie = cookie;</span><br><span class="line">	node-&gt;work.type = BINDER_WORK_NODE;</span><br><span class="line">	INIT_LIST_HEAD(&amp;node-&gt;work.entry);</span><br><span class="line">	INIT_LIST_HEAD(&amp;node-&gt;async_todo);</span><br><span class="line">	return node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>binder_new_node()有三个参数，proc即当前进程在kernel中的上下文描述binder_proc，ptr与cookie用来描述binder本地对象，由于是service manager，对应的binder本地对象地址值为0．binder_new_node根据ptr在proc的node红黑书中索引，如果找到已经创建的binder_node实体返回NULL，没有找到则创建binder_node实体对象.</p>
<h2 id="biner-loop"><a href="#biner-loop" class="headerlink" title="biner_loop"></a>biner_loop</h2><p>打开binder设备，映射到进程地址空间并成为进程间通信上下文管理者后，servicemanager将进入到无限循环中等待client的请求.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void binder_loop(struct binder_state *bs, binder_handler func)</span><br><span class="line">&#123;</span><br><span class="line">    int res;</span><br><span class="line">    struct binder_write_read bwr;</span><br><span class="line">    uint32_t readbuf[32];</span><br><span class="line"></span><br><span class="line">    bwr.write_size = 0;</span><br><span class="line">    bwr.write_consumed = 0;</span><br><span class="line">    bwr.write_buffer = 0;</span><br><span class="line"></span><br><span class="line">    // 通过ioctl BC_ENTER_LOOPER将自己注册为binder线程，以便binder驱动分发请求</span><br><span class="line">    readbuf[0] = BC_ENTER_LOOPER;</span><br><span class="line">    binder_write(bs, readbuf, sizeof(uint32_t));</span><br><span class="line"></span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        bwr.read_size = sizeof(readbuf);</span><br><span class="line">        bwr.read_consumed = 0;</span><br><span class="line">        bwr.read_buffer = (uintptr_t) readbuf;</span><br><span class="line"></span><br><span class="line">        res = ioctl(bs-&gt;fd, BINDER_WRITE_READ, &amp;bwr);</span><br><span class="line"></span><br><span class="line">        if (res &lt; 0) &#123;</span><br><span class="line">            ALOGE(&quot;binder_loop: ioctl failed (%s)\n&quot;, strerror(errno));</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = binder_parse(bs, 0, (uintptr_t) readbuf, bwr.read_consumed, func);</span><br><span class="line">        if (res == 0) &#123;</span><br><span class="line">            ALOGE(&quot;binder_loop: unexpected reply?!\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        if (res &lt; 0) &#123;</span><br><span class="line">            ALOGE(&quot;binder_loop: io error %d %s\n&quot;, res, strerror(errno));</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>binder_loop中先通过ioctl BC_ENTER_LOOPER注册binder线程，然后在无限循环中ioctl BINDER_WRITE_READ等待请求数据，并通过binder_parse处理client请求</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Binder之Binder Driver]]></title>
      <url>http://robinheztto.com/2016/03/20/android-binder-1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>binder驱动源码位于kernel的drivers/staging/android/目录下，包括binder.c与uapi/binder.h，主要负责通信数据传递等</p>
</blockquote>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>在分析驱动之前，首先需要了解binder驱动中所定义的数据结构。数据结构可以分成二类看，一类是内部使用的，在binder.c中定义，另一类是内外部都使用，在binder.h中定义。</p>
<h2 id="binder-node"><a href="#binder-node" class="headerlink" title="binder_node"></a>binder_node</h2><p>binder_node在binder.c中定义，属于binder driver内部数据结构，它是binder实体对象，代表着service组件或ServiceManager在内核中的描述，可以通过Binder实体找到用户空间的Server对象．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">struct binder_node &#123;</span><br><span class="line">	int debug_id;</span><br><span class="line">	struct binder_work work;</span><br><span class="line">	union &#123;</span><br><span class="line">		struct rb_node rb_node;　// Binder实体还在使用，该节点链接到proc-&gt;nodes</span><br><span class="line">		struct hlist_node dead_node;　// Binder实体所属的进程已销毁，但被其它进程所引用，将该Binder实体通过dead_node保存到全局哈希表中</span><br><span class="line">	&#125;;</span><br><span class="line">	struct binder_proc *proc;　// Binder实体所在的进程</span><br><span class="line">	struct hlist_head refs;　// Binder实体的引用所组成的的哈希链表</span><br><span class="line">	int internal_strong_refs;</span><br><span class="line">	int local_weak_refs;</span><br><span class="line">	int local_strong_refs;</span><br><span class="line">	binder_uintptr_t ptr;</span><br><span class="line">	binder_uintptr_t cookie;</span><br><span class="line">	unsigned has_strong_ref:1;</span><br><span class="line">	unsigned pending_strong_ref:1;</span><br><span class="line">	unsigned has_weak_ref:1;</span><br><span class="line">	unsigned pending_weak_ref:1;</span><br><span class="line">	unsigned has_async_transaction:1;</span><br><span class="line">	unsigned accept_fds:1;</span><br><span class="line">	unsigned min_priority:8;</span><br><span class="line">	struct list_head async_todo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>binder_node是描述Binder实体的数据结构，Binder驱动会为每个Server创建一个Binder实体。</p>
<ol>
<li><strong>union {<br>struct rb_node rb_node;<br>struct hlist_node dead_node;<br>};</strong><br>binder_node未销毁时，rb_node链接到proc-&gt;nodes红黑树上.<br>binder_node销毁后，dead_node加入到全局的死亡hash链表中.</li>
<li><strong>struct binder_proc *proc;</strong>　binder实体(服务)所在的宿主进程（进程上下文信息）.</li>
<li><strong>struct hlist_head refs;</strong> binder实体引用的hash list,所有该binder实体的引用都保存在该hash list中.</li>
<li><strong>binder_uintptr_t ptr;</strong> 描述用户空间的service組件，Binder实体对应的service在用户空间的本地Binder的引用</li>
<li><strong>binder_uintptr_t cookie;</strong> 描述用户空间的service組件，Binder实体对应的service在用户空间的本地Binder地址</li>
</ol>
<h2 id="binder-ref"><a href="#binder-ref" class="headerlink" title="binder_ref"></a>binder_ref</h2><p>binder_ref在binder.c中定义，属于binder driver内部数据结构，它是Client组件在内核中的描述，通过binder引用可以找到其在内核中的binder实体，进而找到用户空间的server对象．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct binder_ref &#123;</span><br><span class="line">	int debug_id;</span><br><span class="line">	struct rb_node rb_node_desc;　// 关联binder_proc-&gt;refs_by_desc</span><br><span class="line">	struct rb_node rb_node_node;　 // 关联binder_proc-&gt;refs_by_node</span><br><span class="line">	struct hlist_node node_entry;　// 关联binder_node-&gt;refs</span><br><span class="line">	struct binder_proc *proc;　// Binder引用所属的宿主进程</span><br><span class="line">	struct binder_node *node;　// Binder引用对应的Binder实体</span><br><span class="line">	uint32_t desc;</span><br><span class="line">	int strong;</span><br><span class="line">	int weak;</span><br><span class="line">	struct binder_ref_death *death;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>binder_ref是描述Binder引用的数据结构，Binder驱动会为每个Client创建一个Binder引用。</p>
<ol>
<li><strong>struct rb_node rb_node_desc;</strong>    以句柄值作为关键字关联到binder_proc-&gt;refs_by_desc红黑树</li>
<li><strong>struct rb_node rb_node_node;</strong>　以binder实体对象地址作为关键字关联到binder_proc-&gt;refs_by_node红黑树</li>
<li><strong>struct hlist_node node_entry;</strong>    binder_node的引用节点，关联到binder_node-&gt;refs</li>
<li><strong>struct binder_proc *proc;</strong> 引用所在的宿主进程.</li>
<li><strong>struct binder_node *node;</strong>    引用所对应的binder_node实体.</li>
<li><strong>uint32_t desc;</strong>    Binder引用的句柄值，Binder驱动为binder引用分配的一个唯一的int型整数（进程范围内唯一）,通过该值可以在binder_proc-&gt;refs_by_desc中找到Binder引用，进而可以找到该Binder引用对应的Binder实体．</li>
</ol>
<h2 id="binder-proc"><a href="#binder-proc" class="headerlink" title="binder_proc"></a>binder_proc</h2><p>binder_proc在binder.c中定义，属于binder driver内部数据结构，它是binder通信的进程在在内核中的描述.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">struct binder_proc &#123;</span><br><span class="line">	struct hlist_node proc_node;</span><br><span class="line">	struct rb_root threads; // 进程内所有线程的rbtree</span><br><span class="line">	struct rb_root nodes;　// 进程内所有binder实体的rbtree</span><br><span class="line">	struct rb_root refs_by_desc;　// 进程内所有binder引用的rbtree，以desc排序</span><br><span class="line">	struct rb_root refs_by_node;　// 进程内所有binder引用的rbtree，以binder_node排序</span><br><span class="line">	int pid;　// 进程id</span><br><span class="line">	struct vm_area_struct *vma;　// 用户空间虚拟地址</span><br><span class="line">	struct mm_struct *vma_vm_mm;</span><br><span class="line">	struct task_struct *tsk;　// 进程控制块</span><br><span class="line">	struct files_struct *files;</span><br><span class="line">	struct hlist_node deferred_work_node;</span><br><span class="line">	int deferred_work;</span><br><span class="line">	void *buffer; // 进程映射的物理内存内核空间中的起始位置</span><br><span class="line">	ptrdiff_t user_buffer_offset; // 内核虚拟地址与用户空间虚拟地址的偏移</span><br><span class="line"></span><br><span class="line">	struct list_head buffers;</span><br><span class="line">	struct rb_root free_buffers;</span><br><span class="line">	struct rb_root allocated_buffers;</span><br><span class="line">	size_t free_async_space;</span><br><span class="line"></span><br><span class="line">	struct page **pages;　// 物理page</span><br><span class="line">	size_t buffer_size;</span><br><span class="line">	uint32_t buffer_free;</span><br><span class="line">	struct list_head todo;　 // 进程的TODO事件队列</span><br><span class="line">	wait_queue_head_t wait; // 线程等待队列</span><br><span class="line">	struct binder_stats stats;</span><br><span class="line">	struct list_head delivered_death;</span><br><span class="line">	int max_threads;　// 最大线程数</span><br><span class="line">	int requested_threads;</span><br><span class="line">	int requested_threads_started;</span><br><span class="line">	int ready_threads;</span><br><span class="line">	long default_priority;</span><br><span class="line">	struct dentry *debugfs_entry;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><strong>struct hlist_node proc_node;</strong> 全局哈希链表binder_procs的节点，所有创建的binder_proc都被加入到该链表</li>
<li><strong>struct rb_root threads;</strong>    binder_thread红黑树，关联binder_thread-&gt;rb_node</li>
<li><strong>struct rb_root nodes;</strong>    binder_node红黑树，关联binder_node-&gt;rb_node</li>
<li><strong>struct rb_root refs_by_desc;</strong>　以binder_ref描述句柄为关键字的红黑树，关联binder_ref-&gt;rb_node_desc</li>
<li><strong>struct rb_root refs_by_node;</strong>    以binder_ref关联的实体地址为关键字的红黑树，关联binder_ref-&gt;rb_node</li>
<li><strong>int pid;</strong>　进程id</li>
<li><strong>struct vm_area_struct *vma;</strong> 进程虚拟地址空间</li>
<li><strong>struct task_struct *tsk;</strong>　进程task_struct控制块</li>
<li><strong>void *buffer;</strong>　进程在内核虚拟内存中的起始地址</li>
<li><strong>ptrdiff_t user_buffer_offset;</strong>　内核虚拟地址和用户虚拟地址之间的偏移，通过该偏移可计算另一个虚拟空间地址</li>
<li><strong>struct list_head todo;</strong>　进程的待处理事务队列</li>
<li><strong>wait_queue_head_t wait;</strong>　等待队列</li>
</ol>
<h2 id="binder-thread"><a href="#binder-thread" class="headerlink" title="binder_thread"></a>binder_thread</h2><p>binder_thread在binder.c中定义，属于binder driver内部数据结构，它是使用binder通信的线程在内核中的描述.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct binder_thread &#123;</span><br><span class="line">	struct binder_proc *proc;　// 线程所属的宿主进程</span><br><span class="line">	struct rb_node rb_node;　// 关联binder_proc-&gt;threads</span><br><span class="line">	int pid;　 // 线程id</span><br><span class="line">	int looper;　// 线程状态</span><br><span class="line">	struct binder_transaction *transaction_stack;　// 事务栈</span><br><span class="line">	struct list_head todo;　// 待处理的事务链表</span><br><span class="line">	uint32_t return_error; /* Write failed, return error code in read buf */</span><br><span class="line">	uint32_t return_error2; /* Write failed, return error code in read */</span><br><span class="line">	wait_queue_head_t wait;　// 等待队列</span><br><span class="line">	struct binder_stats stats;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><strong>struct binder_proc *proc;</strong>　指向所在进程的binder_proc</li>
<li><strong>struct rb_node rb_node;</strong>    关联到红黑树binder_proc-&gt;threads</li>
<li><strong>int pid;</strong>    进程id</li>
<li><strong>int looper;</strong> 线程状态</li>
<li><strong>struct binder_transaction *transaction_stack;</strong> 正在处理的事务栈</li>
<li><strong>struct list_head todo;</strong> 待处理的事务链表</li>
<li><strong>wait_queue_head_t wait;</strong> 等待队列</li>
</ol>
<h2 id="binder-buffer"><a href="#binder-buffer" class="headerlink" title="binder_buffer"></a>binder_buffer</h2><p>binder_buffer在binder.c中定义，属于binder driver内部数据结构，它用来描述binder进程在内核中分配的内核缓冲区.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct binder_buffer &#123;</span><br><span class="line">	struct list_head entry;　// 关联binder_proc-&gt;buffers</span><br><span class="line">	struct rb_node rb_node;　// 关联binder_proc-&gt;free_buffers或binder_proc-&gt;allocated_buffers</span><br><span class="line">	unsigned free:1;</span><br><span class="line">	unsigned allow_user_free:1;</span><br><span class="line">	unsigned async_transaction:1;</span><br><span class="line">	unsigned debug_id:29;</span><br><span class="line"></span><br><span class="line">	struct binder_transaction *transaction;</span><br><span class="line"></span><br><span class="line">	struct binder_node *target_node;</span><br><span class="line">	size_t data_size;</span><br><span class="line">	size_t offsets_size;</span><br><span class="line">	uint8_t data[0];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><strong>struct list_head entry;</strong>　关联到binder_proc-&gt;buffers链表，从而对内存进行管理</li>
<li><strong>struct rb_node rb_node;</strong>    关联到binder_proc-&gt;free_buffers或binder_proc-&gt;allocated_buffers红黑树，从而对已有内存和空闲内存进行管理</li>
<li><strong>unsigned free:1;</strong>　该块内存是否空闲</li>
<li><strong>struct binder_transaction *transaction;</strong> 正在处理的事务</li>
<li><strong>struct binder_node *target_node;</strong> 正在使用该块内存的binder实体对象</li>
</ol>
<h2 id="binder-write-read"><a href="#binder-write-read" class="headerlink" title="binder_write_read"></a>binder_write_read</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct binder_write_read &#123;</span><br><span class="line">	binder_size_t		write_size;	/* bytes to write */</span><br><span class="line">	binder_size_t		write_consumed;	/* bytes consumed by driver */</span><br><span class="line">	binder_uintptr_t	write_buffer;</span><br><span class="line">	binder_size_t		read_size;	/* bytes to read */</span><br><span class="line">	binder_size_t		read_consumed;	/* bytes consumed by driver */</span><br><span class="line">	binder_uintptr_t	read_buffer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="flat-binder-object"><a href="#flat-binder-object" class="headerlink" title="flat_binder_object"></a>flat_binder_object</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * This is the flattened representation of a Binder object for transfer</span><br><span class="line"> * between processes.  The &apos;offsets&apos; supplied as part of a binder transaction</span><br><span class="line"> * contains offsets into the data where these structures occur.  The Binder</span><br><span class="line"> * driver takes care of re-writing the structure type and data as it moves</span><br><span class="line"> * between processes.</span><br><span class="line"> */</span><br><span class="line">struct flat_binder_object &#123;</span><br><span class="line">	/* 8 bytes for large_flat_header. */</span><br><span class="line">	__u32		type;</span><br><span class="line">	__u32		flags;</span><br><span class="line"></span><br><span class="line">	/* 8 bytes of data. */</span><br><span class="line">	union &#123;</span><br><span class="line">		binder_uintptr_t	binder;	/* local object */</span><br><span class="line">		__u32			handle;	/* remote object */</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	/* extra data associated with local object */</span><br><span class="line">	binder_uintptr_t	cookie;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="驱动分析"><a href="#驱动分析" class="headerlink" title="驱动分析"></a>驱动分析</h1><h2 id="binder-init"><a href="#binder-init" class="headerlink" title="binder_init"></a>binder_init</h2><p>binder_init是binder驱动的初始化入口，在分析binder_init之前，先看一下kernel include/linux/init.h中device_initcall的实现．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define device_initcall(fn)		__define_initcall(fn, 6)</span><br><span class="line"></span><br><span class="line">//宏定义##表示字符串连接</span><br><span class="line">#define __define_initcall(fn, id) \</span><br><span class="line">	static initcall_t __initcall_##fn##id __used \</span><br><span class="line">	__attribute__((__section__(&quot;.initcall&quot; #id &quot;.init&quot;))) = fn</span><br><span class="line"></span><br><span class="line">typedef int (*initcall_t)(void);</span><br><span class="line"></span><br><span class="line">device_initcall(binder_init);</span><br></pre></td></tr></table></figure></p>
<p>device_initcall(binder_init)即把binder_init的函数指针__initcall_binder_init6存放在initcall6.init section中，在kernel分级初始化时会调到该section的函数进行binder device初始化．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">static const struct file_operations binder_fops = &#123;</span><br><span class="line">	.owner = THIS_MODULE,</span><br><span class="line">	.poll = binder_poll,</span><br><span class="line">	.unlocked_ioctl = binder_ioctl,</span><br><span class="line">	.compat_ioctl = binder_ioctl,</span><br><span class="line">	.mmap = binder_mmap,</span><br><span class="line">	.open = binder_open,</span><br><span class="line">	.flush = binder_flush,</span><br><span class="line">	.release = binder_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static struct miscdevice binder_miscdev = &#123;</span><br><span class="line">	.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">	.name = &quot;binder&quot;,</span><br><span class="line">	.fops = &amp;binder_fops</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static int __init binder_init(void)</span><br><span class="line">&#123;</span><br><span class="line">	int ret;</span><br><span class="line"></span><br><span class="line">	binder_deferred_workqueue = create_singlethread_workqueue(&quot;binder&quot;);</span><br><span class="line">	if (!binder_deferred_workqueue)</span><br><span class="line">		return -ENOMEM;</span><br><span class="line"></span><br><span class="line">	......</span><br><span class="line">	ret = misc_register(&amp;binder_miscdev);</span><br><span class="line">	......</span><br><span class="line">	return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>binder_init主要是注册并创建misc设备节点/dev/binder，并关联binder_fops到binder的file_operations．</p>
<h2 id="binder-open"><a href="#binder-open" class="headerlink" title="binder_open"></a>binder_open</h2><p>用户空间系统调用open最终会调到binder驱动中的binder_open．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static int binder_open(struct inode *nodp, struct file *filp)</span><br><span class="line">&#123;</span><br><span class="line">	struct binder_proc *proc;</span><br><span class="line">	.......</span><br><span class="line">	proc = kzalloc(sizeof(*proc), GFP_KERNEL);</span><br><span class="line">	if (proc == NULL)</span><br><span class="line">		return -ENOMEM;</span><br><span class="line">	get_task_struct(current);　// 获取当前进程控制快current</span><br><span class="line">	proc-&gt;tsk = current;</span><br><span class="line">	INIT_LIST_HEAD(&amp;proc-&gt;todo);　</span><br><span class="line">	init_waitqueue_head(&amp;proc-&gt;wait);</span><br><span class="line">	proc-&gt;default_priority = task_nice(current);</span><br><span class="line"></span><br><span class="line">	binder_lock(__func__);</span><br><span class="line"></span><br><span class="line">	binder_stats_created(BINDER_STAT_PROC);</span><br><span class="line">	hlist_add_head(&amp;proc-&gt;proc_node, &amp;binder_procs);</span><br><span class="line">	proc-&gt;pid = current-&gt;group_leader-&gt;pid;</span><br><span class="line">	INIT_LIST_HEAD(&amp;proc-&gt;delivered_death);</span><br><span class="line">	filp-&gt;private_data = proc;</span><br><span class="line"></span><br><span class="line">	binder_unlock(__func__);</span><br><span class="line">	.......</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>binder_open创建了binder_proc并加入到binder_procs全局哈希链表binder_procs。其中binder_proc的task成员被初始化为当前进程的task_struct current，并根据current初始化default_priority，pid，初始化wait及todo队列。最后将创建的binder_proc保存到filp-&gt;private_data中，执行其他的file　operations的操作时就可以根据filp指针获取binder_proc。</p>
<h2 id="binder-mmap"><a href="#binder-mmap" class="headerlink" title="binder_mmap"></a>binder_mmap</h2><p>binder_mmap主要完成binder进程用户虚拟地址空间与内核虚拟地址空间的映射与分配.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">static int binder_mmap(struct file *filp, struct vm_area_struct *vma)</span><br><span class="line">&#123;</span><br><span class="line">	int ret;</span><br><span class="line"></span><br><span class="line">	struct vm_struct *area;</span><br><span class="line">	struct binder_proc *proc = filp-&gt;private_data;</span><br><span class="line">	const char *failure_string;</span><br><span class="line">	struct binder_buffer *buffer;</span><br><span class="line"></span><br><span class="line">	if (proc-&gt;tsk != current)</span><br><span class="line">		return -EINVAL;</span><br><span class="line"></span><br><span class="line">	// 最多分配４M缓存区</span><br><span class="line">	if ((vma-&gt;vm_end - vma-&gt;vm_start) &gt; SZ_4M)</span><br><span class="line">		vma-&gt;vm_end = vma-&gt;vm_start + SZ_4M;</span><br><span class="line"></span><br><span class="line">	// 分配的缓存区只可读，不可写也不能拷贝</span><br><span class="line">	if (vma-&gt;vm_flags &amp; FORBIDDEN_MMAP_FLAGS) &#123;</span><br><span class="line">		ret = -EPERM;</span><br><span class="line">		failure_string = &quot;bad vm_flags&quot;;</span><br><span class="line">		goto err_bad_arg;</span><br><span class="line">	&#125;</span><br><span class="line">	vma-&gt;vm_flags = (vma-&gt;vm_flags | VM_DONTCOPY) &amp; ~VM_MAYWRITE;</span><br><span class="line"></span><br><span class="line">	mutex_lock(&amp;binder_mmap_lock);</span><br><span class="line">	if (proc-&gt;buffer) &#123;</span><br><span class="line">		ret = -EBUSY;</span><br><span class="line">		failure_string = &quot;already mapped&quot;;</span><br><span class="line">		goto err_already_mapped;</span><br><span class="line">	&#125;</span><br><span class="line">	// 在内核地址空间分配一块vma-&gt;vm_end - vma-&gt;vm_start大小的空间</span><br><span class="line">	area = get_vm_area(vma-&gt;vm_end - vma-&gt;vm_start, VM_IOREMAP);</span><br><span class="line">	if (area == NULL) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		failure_string = &quot;get_vm_area&quot;;</span><br><span class="line">		goto err_get_vm_area_failed;</span><br><span class="line">	&#125;</span><br><span class="line">	// 内核空间缓存地址proc-&gt;buffer，用户空间地址vma-&gt;vm_start，proc-&gt;user_buffer_offset是二个地址间的偏移</span><br><span class="line">	proc-&gt;buffer = area-&gt;addr;</span><br><span class="line">	proc-&gt;user_buffer_offset = vma-&gt;vm_start - (uintptr_t)proc-&gt;buffer;</span><br><span class="line">	mutex_unlock(&amp;binder_mmap_lock);</span><br><span class="line"></span><br><span class="line">	proc-&gt;pages = kzalloc(sizeof(proc-&gt;pages[0]) * ((vma-&gt;vm_end - vma-&gt;vm_start) / PAGE_SIZE), GFP_KERNEL);</span><br><span class="line">	if (proc-&gt;pages == NULL) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		failure_string = &quot;alloc page array&quot;;</span><br><span class="line">		goto err_alloc_pages_failed;</span><br><span class="line">	&#125;</span><br><span class="line">	proc-&gt;buffer_size = vma-&gt;vm_end - vma-&gt;vm_start;</span><br><span class="line"></span><br><span class="line">	vma-&gt;vm_ops = &amp;binder_vm_ops;</span><br><span class="line">	vma-&gt;vm_private_data = proc;</span><br><span class="line"></span><br><span class="line">	/* binder_update_page_range assumes preemption is disabled */</span><br><span class="line">	preempt_disable();</span><br><span class="line">	// 为用户/内核虚拟地址空间分配物理页面并映射</span><br><span class="line">	ret = binder_update_page_range(proc, 1, proc-&gt;buffer, proc-&gt;buffer + PAGE_SIZE, vma);</span><br><span class="line">	preempt_enable_no_resched();</span><br><span class="line">	if (ret) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		failure_string = &quot;alloc small buf&quot;;</span><br><span class="line">		goto err_alloc_small_buf_failed;</span><br><span class="line">	&#125;</span><br><span class="line">	buffer = proc-&gt;buffer;</span><br><span class="line">	// 分配的binder_buffer加入到proc-&gt;buffers进行管理</span><br><span class="line">	INIT_LIST_HEAD(&amp;proc-&gt;buffers);</span><br><span class="line">	list_add(&amp;buffer-&gt;entry, &amp;proc-&gt;buffers);</span><br><span class="line">	buffer-&gt;free = 1;</span><br><span class="line">	binder_insert_free_buffer(proc, buffer);</span><br><span class="line">	proc-&gt;free_async_space = proc-&gt;buffer_size / 2;</span><br><span class="line">	barrier();</span><br><span class="line">	proc-&gt;files = get_files_struct(current);</span><br><span class="line">	proc-&gt;vma = vma;</span><br><span class="line">	proc-&gt;vma_vm_mm = vma-&gt;vm_mm;</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>首先判断proc-&gt;tsk是否对应当前进程，不是则退出．然后限制mmap的用户空间vm_area_struct最大为４M,即biner驱动最多分配４M内核空间来进行进程间通信．</li>
<li>设置vma-&gt;vm_flags标志为只读，即分配的空间不可写</li>
<li>根据proc-&gt;buffer是否为null判断是否重复mmap,然后调用get_vm_area根据vma来分配内核空间地址，并设置起始地址proc-&gt;buffer，与用户空间地址偏移proc-&gt;user_buffer_offset</li>
<li>调用binder_update_page_rang为用户/内核虚拟地址空间分配对应的物理页面，同一块物理内存分别映射到内核虚拟地址空间和用户虚拟内存空间.</li>
<li>分配内存后，初始化binder_buffer相关数据结构</li>
</ol>
<h2 id="binder-ioctl"><a href="#binder-ioctl" class="headerlink" title="binder_ioctl"></a>binder_ioctl</h2><p>binder_ioctl支持的命令在binder.h中定义，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define BINDER_WRITE_READ		_IOWR(&apos;b&apos;, 1, struct binder_write_read)　//收发Binder IPC数据</span><br><span class="line">#define	BINDER_SET_IDLE_TIMEOUT		_IOW(&apos;b&apos;, 3, __s64)	//Not Used</span><br><span class="line">#define	BINDER_SET_MAX_THREADS		_IOW(&apos;b&apos;, 5, __u32)	//设置Binder线程最大个数</span><br><span class="line">#define	BINDER_SET_IDLE_PRIORITY	_IOW(&apos;b&apos;, 6, __s32) //Not Used</span><br><span class="line">#define	BINDER_SET_CONTEXT_MGR		_IOW(&apos;b&apos;, 7, __s32)	//设置Service Manager</span><br><span class="line">#define	BINDER_THREAD_EXIT		_IOW(&apos;b&apos;, 8, __s32) //Not Used</span><br><span class="line">#define BINDER_VERSION			_IOWR(&apos;b&apos;, 9, struct binder_version)	//获取Binder版本信息</span><br></pre></td></tr></table></figure></p>
<p>binder_ioctl的实现在后面根据具体的业务逻辑具体分析。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Binder之概述]]></title>
      <url>http://robinheztto.com/2016/03/19/android-binder-0/</url>
      <content type="html"><![CDATA[<h1 id="Binder简介"><a href="#Binder简介" class="headerlink" title="Binder简介"></a>Binder简介</h1><p>在Android系统中，应用程序是由组件(Acyiviy/Service/Broadcast Receiver/Content Provider)组成的，组件可以运行在一个进程中，也可以分别运行在不同进程中。同样，在Android系统中的各类系统服务也可以运行在一个进程或多个进程中，运行在不同进程的应用程序组件或系统服务间的通信都是通过Binder来进行.</p>
<p>Android是基于Linux内核开发的，Linux系统中传统的IPC机制有Pipe，ShareMemory，Singal，Message，Socket等，但Android并未完全采用这些传统的进程间通信机制，而是引入了Binder作为主要的IPC机制。Binder是在<a href="http://www.angryredplanet.com/~hackbod/openbinder/docs/html/BinderIPCMechanism.html" target="_blank" rel="external">OpebBinder</a>的基础上实现的，OpenBinder是一套开源的系统IPC机制，最初是由 Be Inc开发，后来由Palm, Inc公司负责开发，Google对其改造后应用到了Android系统上。</p>
<p>Binder相比其他的IPC机制有什么优势?</p>
<ol>
<li>基于Client-Server的通信方式。APP通过调用不同的service server就可以非常方便的完成很多功能。</li>
<li>高效率。Binder中数据传输只需要一次拷贝(只需将数据通过驱动发送到目标进程的内核虚拟缓存区，而使用Binder通信用户空间缓存区与内核空间的缓存区映射到同一物理内存的，所以只需要一次拷贝),节省时间的同时也节省了空间。</li>
<li>面向对象的RPC调用，模糊了进程边界，淡化进程间通信过程。在Android的C++/java面向对象语言环境中，Binder更加符合面向对象思想，Binder的实体位于一个进程中，而引用却可以分布在各个进程中，通过Binder引用调用就像本地调用一样，这种通信方式更加适合Android组件化的思想。</li>
<li>安全性。Android为每个安装的应用程序分配了UID，Binder能依据调用进程的UID/PID来进行权限控制，而传统IPC需要上层协议来验证权限保证安全性。</li>
</ol>
<h1 id="Binder机制"><a href="#Binder机制" class="headerlink" title="Binder机制"></a>Binder机制</h1><p>Binder采用的是CS通信方式，对于提供服务的进程即server进程，请求服务的进程即client进程。同一个server进程可能存在多个service组件，同时同一个clent进程可以请求多个service组件。<br>如下图所示，Binder的通信涉及到4个角色，分别是Client，Service，Service Mananger与Binder Driver。<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/Binder-model.jpg?raw=true" alt="Binder进程间通信机制"><br>Client，Service，Service Mananger都运行在用户空间独立的进程中，由于用户进程地址空间是独立且不能相互访问，而内核空间却是是全局共享，所以可以通过内核空间的缓冲区进行数据的中转。如下图示Client，Service，Service Mananger通过SystemCall(open,mmap,ioctl)访问/dev/binder，通过Binder driver间接建立与用户空间其他进程的通信通道。</p>
<h1 id="Binder分析"><a href="#Binder分析" class="headerlink" title="Binder分析"></a>Binder分析</h1><ol>
<li><a href="http://www.hesstudio.cn/2016/09/06/android-binder-1/" target="_blank" rel="external">Android Binder之Binder Driver</a></li>
<li><a href="http://www.hesstudio.cn/2016/09/15/android-binder-2/" target="_blank" rel="external">Android Binder之Service Manager</a></li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://blog.csdn.net/universus/article/details/6211589" target="_blank" rel="external">Android Binder设计与实现 - 设计篇</a></li>
<li><a href="http://item.jd.com/11104739.html" target="_blank" rel="external">Android系统源代码情景分析</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Init]]></title>
      <url>http://robinheztto.com/2016/02/02/android-init/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Init进程是Kernel启动后在用户空间创建的第一个用户级进程，它的pid为1。其他所有的用户进程都是由其直接或间接fork产生的.</p>
<div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/boot-flow.jpg?raw=true" alt="Android系统启动"><br></div><br>Init调用流程如下图示,从汇编代码kernel/arch/arm/kernel/head-common.S <code>b    start_kernel</code>进入到C环境kernel/init/main.c <code>start_kernel</code>执行.最后在run_init_process()中通过do_execve创建Init进程.<br><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/android_init_flow.jpg?raw=true" alt="Kernel init flow"><br></div>

<p>kernel_init()中的execute_command即/init，run_init_process通过execve()系统调用来启动init进程。如果没有定义execute_command，则在/sbin，/etc，/bin查找，否则Kernel Panic.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">static int __ref kernel_init(void *unused)</span><br><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  if (execute_command) &#123;</span><br><span class="line">    ret = run_init_process(execute_command);</span><br><span class="line">    if (!ret)</span><br><span class="line">      return 0;</span><br><span class="line">    pr_err(&quot;Failed to execute %s (error %d).  Attempting defaults...\n&quot;,</span><br><span class="line">      execute_command, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  if (!try_to_run_init_process(&quot;/sbin/init&quot;) ||</span><br><span class="line">	    !try_to_run_init_process(&quot;/etc/init&quot;) ||</span><br><span class="line">	    !try_to_run_init_process(&quot;/bin/init&quot;) ||</span><br><span class="line">	    !try_to_run_init_process(&quot;/bin/sh&quot;))</span><br><span class="line">		return 0;</span><br><span class="line"></span><br><span class="line">	panic(&quot;No working init found.  Try passing init= option to kernel. &quot;</span><br><span class="line">	      &quot;See Linux Documentation/init.txt for guidance.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Android中的Init进程与Linux中有所不同,它主要实现以下的四大功能：</p>
<ul>
<li>解析执行init.rc文件</li>
<li>创建设备节点</li>
<li>创建关键的daemon进程并处理子进程的终止</li>
<li>属性服务</li>
</ul>
<h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><blockquote>
<p>Init的源码主要集中在system/core/init/</p>
</blockquote>
<p>下面从init.cpp的main()开始逐段来分析init进程的执行流程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//根据执行的文件名argv[0]判断是否是执行ueventd</span><br><span class="line">if (!strcmp(basename(argv[0]), &quot;ueventd&quot;)) &#123;</span><br><span class="line">    return ueventd_main(argc, argv);</span><br><span class="line">&#125;</span><br><span class="line">//根据执行的文件名argv[0]判断是否是执行watchdogd</span><br><span class="line">if (!strcmp(basename(argv[0]), &quot;watchdogd&quot;)) &#123;</span><br><span class="line">    return watchdogd_main(argc, argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Clear the umask.</span><br><span class="line">umask(0);</span><br><span class="line"></span><br><span class="line">// 初始化PATH环境变量 PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin</span><br><span class="line">add_environment(&quot;PATH&quot;, _PATH_DEFPATH);　</span><br><span class="line"></span><br><span class="line">// 根据argc，argv[1]判断是否是first_stage（first_stage运行在kernel domain）.</span><br><span class="line">bool is_first_stage = (argc == 1) || (strcmp(argv[1], &quot;--second-stage&quot;) != 0);</span><br><span class="line"></span><br><span class="line">// mount并创建相关内存文件系统及目录</span><br><span class="line">if (is_first_stage) &#123;</span><br><span class="line">    mount(&quot;tmpfs&quot;, &quot;/dev&quot;, &quot;tmpfs&quot;, MS_NOSUID, &quot;mode=0755&quot;);</span><br><span class="line">    mkdir(&quot;/dev/pts&quot;, 0755);</span><br><span class="line">    mkdir(&quot;/dev/socket&quot;, 0755);</span><br><span class="line">    mount(&quot;devpts&quot;, &quot;/dev/pts&quot;, &quot;devpts&quot;, 0, NULL);</span><br><span class="line">    #define MAKE_STR(x) __STRING(x)</span><br><span class="line">    mount(&quot;proc&quot;, &quot;/proc&quot;, &quot;proc&quot;, 0, &quot;hidepid=2,gid=&quot; MAKE_STR(AID_READPROC));</span><br><span class="line">    mount(&quot;sysfs&quot;, &quot;/sys&quot;, &quot;sysfs&quot;, 0, NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>首先根据执行参数basename(argv[0])判断是否是执行ueventd或watchdogd(ueventd与watchdogd功能代码在init中实现),通过system/core/init/Android.mk可以知道,/sbin/ueventd与/sbin/watchdogd实际上都链接到init.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Create symlinks</span><br><span class="line">LOCAL_POST_INSTALL_CMD := $(hide) mkdir -p $(TARGET_ROOT_OUT)/sbin; \</span><br><span class="line">    ln -sf ../init $(TARGET_ROOT_OUT)/sbin/ueventd; \</span><br><span class="line">    ln -sf ../init $(TARGET_ROOT_OUT)/sbin/watchdogd</span><br></pre></td></tr></table></figure>
</li>
<li><p>umask(0) 即设置创建文件的属性默认为0777.</p>
</li>
<li>is_first_stage是用来判断init是在内核空间还是在用户空间启动,is_first_stage为true意味着init是运行在kernel domain，因为selinux的相关设置需要在内核空间下.</li>
<li>如果是在内核启动,创建/dev，/proc，/sys目录并mount相应的虚拟内存文件系统</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">open_devnull_stdio();</span><br><span class="line">klog_init();</span><br><span class="line">klog_set_level(KLOG_NOTICE_LEVEL);</span><br></pre></td></tr></table></figure>
<ol>
<li><p>open_devnull_stdio();屏蔽标准输入/输出/错误,即无法通过stdin/stdout/stderr输出，如下代码所示,通过dup2()复制文件描述符，重定向stdin,stdout,stderr到/sys/fs/selinux/null或/dev/__null__上.(一般daemon进程都会有类似的屏蔽操作)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># ls /proc/1/fd -al</span><br><span class="line">lrwx------ 1 root root 64 1970-01-04 07:34 0 -&gt; /sys/fs/selinux/null</span><br><span class="line">lrwx------ 1 root root 64 1970-01-04 07:34 1 -&gt; /sys/fs/selinux/null</span><br><span class="line">lrwx------ 1 root root 64 1970-01-04 07:34 2 -&gt; /sys/fs/selinux/null</span><br><span class="line"></span><br><span class="line">void open_devnull_stdio(void)</span><br><span class="line">&#123;</span><br><span class="line">    // Try to avoid the mknod() call if we can. Since SELinux makes</span><br><span class="line">    // a /dev/null replacement available for free, let&apos;s use it.</span><br><span class="line">    int fd = open(&quot;/sys/fs/selinux/null&quot;, O_RDWR);</span><br><span class="line">    if (fd == -1) &#123;</span><br><span class="line">        // OOPS, /sys/fs/selinux/null isn&apos;t available, likely because</span><br><span class="line">        // /sys/fs/selinux isn&apos;t mounted. Fall back to mknod.</span><br><span class="line">        static const char *name = &quot;/dev/__null__&quot;;</span><br><span class="line">        if (mknod(name, S_IFCHR | 0600, (1 &lt;&lt; 8) | 3) == 0) &#123;</span><br><span class="line">            fd = open(name, O_RDWR);</span><br><span class="line">            unlink(name);</span><br><span class="line">        &#125;</span><br><span class="line">        if (fd == -1) &#123;</span><br><span class="line">            exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dup2(fd, 0);</span><br><span class="line">    dup2(fd, 1);</span><br><span class="line">    dup2(fd, 2);</span><br><span class="line">    if (fd &gt; 2) &#123;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>klog_init,创建kmsg设备节点,printk打印的log可以通过cat /proc/kmsg或者dmesg输出.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void klog_init(void) &#123;</span><br><span class="line">    if (klog_fd &gt;= 0) return; /* Already initialized */</span><br><span class="line"></span><br><span class="line">    klog_fd = open(&quot;/dev/kmsg&quot;, O_WRONLY | O_CLOEXEC);</span><br><span class="line">    if (klog_fd &gt;= 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static const char* name = &quot;/dev/__kmsg__&quot;;</span><br><span class="line">    if (mknod(name, S_IFCHR | 0600, (1 &lt;&lt; 8) | 11) == 0) &#123;</span><br><span class="line">        klog_fd = open(name, O_WRONLY | O_CLOEXEC);</span><br><span class="line">        unlink(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>klog_set_level设置log等级</p>
</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (!is_first_stage) &#123;</span><br><span class="line">    // Indicate that booting is in progress to background fw loaders, etc.</span><br><span class="line">    close(open(&quot;/dev/.booting&quot;, O_WRONLY | O_CREAT | O_CLOEXEC, 0000));</span><br><span class="line"></span><br><span class="line">    property_init();</span><br><span class="line"></span><br><span class="line">    // If arguments are passed both on the command line and in DT,</span><br><span class="line">    // properties set in DT always have priority over the command-line ones.</span><br><span class="line">    process_kernel_dt();</span><br><span class="line">    process_kernel_cmdline();</span><br><span class="line"></span><br><span class="line">    // Propagate the kernel variables to internal variables</span><br><span class="line">    // used by init as well as the current required properties.</span><br><span class="line">    export_kernel_boot_props();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>创建/dev/.booting，用来标志是否处于初始化过程中。如下init.rc代码片段所示，在late-init阶段，将触发firmware_mounts_complete，删除掉/dev/.booting</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Indicate to fw loaders that the relevant mounts are up.</span><br><span class="line">on firmware_mounts_complete</span><br><span class="line">    rm /dev/.booting</span><br><span class="line"></span><br><span class="line"># Mount filesystems and start core system services.</span><br><span class="line">on late-init</span><br><span class="line">    ......</span><br><span class="line">    # Remove a file to wake up anything waiting for firmware.</span><br><span class="line">    trigger firmware_mounts_complete</span><br><span class="line">    .......</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用property_init()初始化属性系统，在后面属性服务中详细描述.</p>
</li>
<li><p>调用process_kernel_dt()处理设置ro.boot.android,ro.boot.firmware二个属性.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">static void process_kernel_dt() &#123;</span><br><span class="line">    static const char android_dir[] = &quot;/proc/device-tree/firmware/android&quot;;</span><br><span class="line"></span><br><span class="line">    std::string file_name = android::base::StringPrintf(&quot;%s/compatible&quot;, android_dir);</span><br><span class="line"></span><br><span class="line">    std::string dt_file;</span><br><span class="line">    android::base::ReadFileToString(file_name, &amp;dt_file);</span><br><span class="line">    if (!dt_file.compare(&quot;android,firmware&quot;)) &#123;</span><br><span class="line">        ERROR(&quot;firmware/android is not compatible with &apos;android,firmware&apos;\n&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::unique_ptr&lt;DIR, int(*)(DIR*)&gt;dir(opendir(android_dir), closedir);</span><br><span class="line">    if (!dir) return;</span><br><span class="line"></span><br><span class="line">    struct dirent *dp;</span><br><span class="line">    while ((dp = readdir(dir.get())) != NULL) &#123;</span><br><span class="line">        if (dp-&gt;d_type != DT_REG || !strcmp(dp-&gt;d_name, &quot;compatible&quot;) || !strcmp(dp-&gt;d_name, &quot;name&quot;)) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        file_name = android::base::StringPrintf(&quot;%s/%s&quot;, android_dir, dp-&gt;d_name);</span><br><span class="line"></span><br><span class="line">        android::base::ReadFileToString(file_name, &amp;dt_file);</span><br><span class="line">        std::replace(dt_file.begin(), dt_file.end(), &apos;,&apos;, &apos;.&apos;);</span><br><span class="line"></span><br><span class="line">        std::string property_name = android::base::StringPrintf(&quot;ro.boot.%s&quot;, dp-&gt;d_name);</span><br><span class="line">        property_set(property_name.c_str(), dt_file.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用process_kernel_cmdline()读取/proc/cmdline文件,并设置cmdline文件中以androidboot.开头对应ro.boot.的属性值.例如<code>androidboot.hardware=qcom -&gt; [ro.boot.hardware]: [qcom]</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">static void process_kernel_cmdline() &#123;</span><br><span class="line">    // Don&apos;t expose the raw commandline to unprivileged processes.</span><br><span class="line">    chmod(&quot;/proc/cmdline&quot;, 0440);</span><br><span class="line"></span><br><span class="line">    // The first pass does the common stuff, and finds if we are in qemu.</span><br><span class="line">    // The second pass is only necessary for qemu to export all kernel params</span><br><span class="line">    // as properties.</span><br><span class="line">    import_kernel_cmdline(false, import_kernel_nv);</span><br><span class="line">    if (qemu[0]) import_kernel_cmdline(true, import_kernel_nv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void import_kernel_nv(const std::string&amp; key, const std::string&amp; value, bool for_emulator) &#123;</span><br><span class="line">    if (key.empty()) return;</span><br><span class="line"></span><br><span class="line">    if (for_emulator) &#123;</span><br><span class="line">        // In the emulator, export any kernel option with the &quot;ro.kernel.&quot; prefix.</span><br><span class="line">        property_set(android::base::StringPrintf(&quot;ro.kernel.%s&quot;, key.c_str()).c_str(), value.c_str());</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (key == &quot;qemu&quot;) &#123;</span><br><span class="line">        strlcpy(qemu, value.c_str(), sizeof(qemu));</span><br><span class="line">    &#125; else if (android::base::StartsWith(key, &quot;androidboot.&quot;)) &#123;</span><br><span class="line">        property_set(android::base::StringPrintf(&quot;ro.boot.%s&quot;, key.c_str() + 12).c_str(),</span><br><span class="line">                     value.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用export_kernel_boot_props设置boot相关的属性.即根据设置prop_map中src_prop设置dst_prop的值.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static void export_kernel_boot_props() &#123;</span><br><span class="line">    struct &#123;</span><br><span class="line">        const char *src_prop;</span><br><span class="line">        const char *dst_prop;</span><br><span class="line">        const char *default_value;</span><br><span class="line">    &#125; prop_map[] = &#123;</span><br><span class="line">        &#123; &quot;ro.boot.serialno&quot;,   &quot;ro.serialno&quot;,   &quot;&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.mode&quot;,       &quot;ro.bootmode&quot;,   &quot;unknown&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.baseband&quot;,   &quot;ro.baseband&quot;,   &quot;unknown&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.bootloader&quot;, &quot;ro.bootloader&quot;, &quot;unknown&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.hardware&quot;,   &quot;ro.hardware&quot;,   &quot;unknown&quot;, &#125;,</span><br><span class="line">        &#123; &quot;ro.boot.revision&quot;,   &quot;ro.revision&quot;,   &quot;0&quot;, &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    for (size_t i = 0; i &lt; ARRAY_SIZE(prop_map); i++) &#123;</span><br><span class="line">        std::string value = property_get(prop_map[i].src_prop);</span><br><span class="line">        property_set(prop_map[i].dst_prop, (!value.empty()) ? value.c_str() : prop_map[i].default_value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">selinux_initialize(is_first_stage);</span><br><span class="line"></span><br><span class="line">// If we&apos;re in the kernel domain, re-exec init to transition to the init domain now</span><br><span class="line">// that the SELinux policy has been loaded.</span><br><span class="line">if (is_first_stage) &#123;</span><br><span class="line">    if (restorecon(&quot;/init&quot;) == -1) &#123;</span><br><span class="line">        ERROR(&quot;restorecon failed: %s\n&quot;, strerror(errno));</span><br><span class="line">        security_failure();</span><br><span class="line">    &#125;</span><br><span class="line">    char* path = argv[0];</span><br><span class="line">    char* args[] = &#123; path, const_cast&lt;char*&gt;(&quot;--second-stage&quot;), nullptr &#125;;</span><br><span class="line">    // 初始化selinux后，在user domain执行init --second-stage</span><br><span class="line">    if (execv(path, args) == -1) &#123;</span><br><span class="line">        ERROR(&quot;execv(\&quot;%s\&quot;) failed: %s\n&quot;, path, strerror(errno));</span><br><span class="line">        security_failure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NOTICE(&quot;Running restorecon...\n&quot;);</span><br><span class="line">restorecon(&quot;/dev&quot;);</span><br><span class="line">restorecon(&quot;/dev/socket&quot;);</span><br><span class="line">restorecon(&quot;/dev/__properties__&quot;);</span><br><span class="line">restorecon(&quot;/property_contexts&quot;);</span><br><span class="line">restorecon_recursive(&quot;/sys&quot;);</span><br></pre></td></tr></table></figure>
<p>在kernel domaind调用selinux_initialize对selinux进行初始化,然后通过execv重新执行init –second-stage。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">epoll_fd = epoll_create1(EPOLL_CLOEXEC);</span><br><span class="line">if (epoll_fd == -1) &#123;</span><br><span class="line">    ERROR(&quot;epoll_create1 failed: %s\n&quot;, strerror(errno));</span><br><span class="line">    exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal_handler_init();</span><br><span class="line"></span><br><span class="line">property_load_boot_defaults();</span><br><span class="line">export_oem_lock_status();</span><br><span class="line">start_property_service();</span><br></pre></td></tr></table></figure>
<ol>
<li>epoll_create1创建epoll实例处理子进程退出及属性服务事件（EPOLL_CLOEXEC标志与open的O_CLOEXEC标志类似，即进程被替换时会关闭文件描述符），epoll_fd对应关联/proc/1/fd/下<code>eventpoll</code>的fd。</li>
<li>signal_handler_init()子进程信号处理,后面单独分析</li>
<li>初始化default属性并启动服务系统,后面单独分析</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">const BuiltinFunctionMap function_map;</span><br><span class="line">Action::set_function_map(&amp;function_map);</span><br><span class="line"></span><br><span class="line">Parser&amp; parser = Parser::GetInstance();</span><br><span class="line">//ServiceParser解析`service section`</span><br><span class="line">parser.AddSectionParser(&quot;service&quot;,std::make_unique&lt;ServiceParser&gt;());</span><br><span class="line">//ActionParser解析`action section`</span><br><span class="line">parser.AddSectionParser(&quot;on&quot;, std::make_unique&lt;ActionParser&gt;());</span><br><span class="line">//ImportParser解析`import rc`</span><br><span class="line">parser.AddSectionParser(&quot;import&quot;, std::make_unique&lt;ImportParser&gt;());</span><br><span class="line">//开始解析init.rc</span><br><span class="line">parser.ParseConfig(&quot;/init.rc&quot;);</span><br><span class="line"></span><br><span class="line">ActionManager&amp; am = ActionManager::GetInstance();</span><br><span class="line"></span><br><span class="line">am.QueueEventTrigger(&quot;early-init&quot;);</span><br><span class="line"></span><br><span class="line">// Queue an action that waits for coldboot done so we know ueventd has set up all of /dev...</span><br><span class="line">am.QueueBuiltinAction(wait_for_coldboot_done_action, &quot;wait_for_coldboot_done&quot;);</span><br><span class="line">// ... so that we can start queuing up actions that require stuff from /dev.</span><br><span class="line">am.QueueBuiltinAction(mix_hwrng_into_linux_rng_action, &quot;mix_hwrng_into_linux_rng&quot;);</span><br><span class="line">am.QueueBuiltinAction(set_mmap_rnd_bits_action, &quot;set_mmap_rnd_bits&quot;);</span><br><span class="line">am.QueueBuiltinAction(keychord_init_action, &quot;keychord_init&quot;);</span><br><span class="line">am.QueueBuiltinAction(console_init_action, &quot;console_init&quot;);</span><br><span class="line"></span><br><span class="line">// Trigger all the boot actions to get us started.</span><br><span class="line">am.QueueEventTrigger(&quot;init&quot;);</span><br><span class="line"></span><br><span class="line">// Repeat mix_hwrng_into_linux_rng in case /dev/hw_random or /dev/random</span><br><span class="line">// wasn&apos;t ready immediately after wait_for_coldboot_done</span><br><span class="line">am.QueueBuiltinAction(mix_hwrng_into_linux_rng_action, &quot;mix_hwrng_into_linux_rng&quot;);</span><br><span class="line"></span><br><span class="line">// Don&apos;t mount filesystems or start core system services in charger mode.</span><br><span class="line">std::string bootmode = property_get(&quot;ro.bootmode&quot;);</span><br><span class="line">if (bootmode == &quot;charger&quot;) &#123;　 // 是否是关机充电模式</span><br><span class="line">    am.QueueEventTrigger(&quot;charger&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    am.QueueEventTrigger(&quot;late-init&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Run all property triggers based on current state of the properties.</span><br><span class="line">am.QueueBuiltinAction(queue_property_triggers_action, &quot;queue_property_triggers&quot;);</span><br></pre></td></tr></table></figure>
<ol>
<li>根据action,service,import解析/init.rc,其中ServiceParser，ActionParser，ImportParser都继承自SectionParse，根据不同的keryword解析initrc文件，将service与action项分别加入到service<em>与action</em>表中。</li>
<li>通过QueueEventTrigger，QueueBuiltinAction把对应的action放到trigger<em>queue</em>表中。</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">while (true) &#123;</span><br><span class="line">    //判断是否有事件需要处理</span><br><span class="line">    if (!waiting_for_exec) &#123;</span><br><span class="line">        //依次执行每个action中command</span><br><span class="line">        am.ExecuteOneCommand();</span><br><span class="line">        //重启退出的进程</span><br><span class="line">        restart_processes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int timeout = -1;</span><br><span class="line">    //有进程需要重启则等待该进程重启</span><br><span class="line">    if (process_needs_restart) &#123;</span><br><span class="line">        timeout = (process_needs_restart - gettime()) * 1000;</span><br><span class="line">        if (timeout &lt; 0)</span><br><span class="line">            timeout = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //还有action要处理则不等待</span><br><span class="line">    if (am.HasMoreCommands()) &#123;</span><br><span class="line">        timeout = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bootchart_sample(&amp;timeout);</span><br><span class="line"></span><br><span class="line">    epoll_event ev;</span><br><span class="line">    //等待epoll_event事件到来，等待timeout时间</span><br><span class="line">    int nr = TEMP_FAILURE_RETRY(epoll_wait(epoll_fd, &amp;ev, 1, timeout));</span><br><span class="line">    if (nr == -1) &#123;</span><br><span class="line">        ERROR(&quot;epoll_wait failed: %s\n&quot;, strerror(errno));</span><br><span class="line">    &#125; else if (nr == 1) &#123;</span><br><span class="line">        //epoll_event事件到来，执行对应处理函数</span><br><span class="line">        ((void (*)()) ev.data.ptr)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>while循环不断调用ExecuteOneCommand函数时，将按照trigger表的顺序，依次取出action链表中与trigger匹配的action。每次均执行一个action中的一个command对应函数（一个action可能携带多个command）。当一个action所有的command均执行完毕后，再执行下一个action。当一个trigger对应的action均执行完毕后，再执行下一个trigger对应action。</p>
<h1 id="子进程信号处理"><a href="#子进程信号处理" class="headerlink" title="子进程信号处理"></a>子进程信号处理</h1><p>由于Init进程是系统的1号进程，其他用户进程都是由其直接或间接生成，所以init进程的作用之一就是处理子进程的退出。进程在退出时内核会发出SIGCHLD信号，父进程收到该信号就可以处理子进程的退出从而防止子进程变成僵尸进程。另外，当进程退出时，该进程下所有的子进程都将变成init的子进程，由init负责对他们退出的处理。下面从signal_handler_init()分析Init对子进程退出的处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void signal_handler_init() &#123;</span><br><span class="line">    int s[2];</span><br><span class="line">    // 创建一对连接的socket</span><br><span class="line">    if (socketpair(AF_UNIX, SOCK_STREAM | SOCK_NONBLOCK | SOCK_CLOEXEC, 0, s) == -1) &#123;</span><br><span class="line">        ERROR(&quot;socketpair failed: %s\n&quot;, strerror(errno));</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signal_write_fd = s[0];</span><br><span class="line">    signal_read_fd = s[1];</span><br><span class="line"></span><br><span class="line">    // 注册SIGCHLD的处理函数</span><br><span class="line">    struct sigaction act;</span><br><span class="line">    memset(&amp;act, 0, sizeof(act));</span><br><span class="line">    act.sa_handler = SIGCHLD_handler;</span><br><span class="line">    act.sa_flags = SA_NOCLDSTOP;</span><br><span class="line">    sigaction(SIGCHLD, &amp;act, 0);</span><br><span class="line"></span><br><span class="line">    // 处理函数，处理子进程的退出</span><br><span class="line">    ServiceManager::GetInstance().ReapAnyOutstandingChildren();</span><br><span class="line"></span><br><span class="line">    // 将signal_read_fd注册到epoll_fd上的的epoll可读事件</span><br><span class="line">    register_epoll_handler(signal_read_fd, handle_signal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>为了同时处理多个信号，通过socket来通信，socketpair创建一对已连接的本地socket，signal_write_fd端写，signal_read_fd端读。</li>
<li><p>sigaction注册SIGCHLD信号的处理函数SIGCHLD_handler(SA_NOCLDSTOP标志只有当子进程结束才接收SIGCHLD信号)，即收到SIGCHLD信号后往signal_write_fd中写入”1”，触发signal_read_fd上的epoll处理事件handle_signal</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static void SIGCHLD_handler(int) &#123;</span><br><span class="line">    if (TEMP_FAILURE_RETRY(write(signal_write_fd, &quot;1&quot;, 1)) == -1) &#123;</span><br><span class="line">        ERROR(&quot;write(signal_write_fd) failed: %s\n&quot;, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ReapAnyOutstandingChildren()处理子进程的退出，下面具体分析</p>
</li>
<li>register_epoll_handler注册signal_read_fd到epoll_fd上，并关联EPOLLIN读事件，epoll_fd上的事件在main()中循环处理<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void register_epoll_handler(int fd, void (*fn)()) &#123;</span><br><span class="line">    epoll_event ev;</span><br><span class="line">    ev.events = EPOLLIN;</span><br><span class="line">    ev.data.ptr = reinterpret_cast&lt;void*&gt;(fn);</span><br><span class="line">    if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd, &amp;ev) == -1) &#123;</span><br><span class="line">        ERROR(&quot;epoll_ctl failed: %s\n&quot;, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void handle_signal() &#123;</span><br><span class="line">    // Clear outstanding requests.</span><br><span class="line">    char buf[32];</span><br><span class="line">    read(signal_read_fd, buf, sizeof(buf));</span><br><span class="line"></span><br><span class="line">    ServiceManager::GetInstance().ReapAnyOutstandingChildren();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>最终，在ServiceManager的ReapAnyOutstandingChildren()来处理子进程的退出.下面具体分析ReapAnyOutstandingChildren</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">void ServiceManager::ReapAnyOutstandingChildren() &#123;</span><br><span class="line">    while (ReapOneProcess()) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bool ServiceManager::ReapOneProcess() &#123;</span><br><span class="line">    int status;</span><br><span class="line">    // 等待子进程结束避免成为僵尸进程(第一个参数-1表示等待任意子进程结束，最后一个参数WNOHANG表示非阻塞)</span><br><span class="line">    pid_t pid = TEMP_FAILURE_RETRY(waitpid(-1, &amp;status, WNOHANG));</span><br><span class="line">    // 无子进程退出，返回false结束循环</span><br><span class="line">    if (pid == 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">        //执行失败，返回false结束循环</span><br><span class="line">    &#125; else if (pid == -1) &#123;</span><br><span class="line">        ERROR(&quot;waitpid failed: %s\n&quot;, strerror(errno));</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 根据pid在services_中查找对应的service</span><br><span class="line">    Service* svc = FindServiceByPid(pid);</span><br><span class="line"></span><br><span class="line">    std::string name;</span><br><span class="line">    if (svc) &#123;</span><br><span class="line">        name = android::base::StringPrintf(&quot;Service &apos;%s&apos; (pid %d)&quot;,</span><br><span class="line">                                           svc-&gt;name().c_str(), pid);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        name = android::base::StringPrintf(&quot;Untracked pid %d&quot;, pid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 输出相关信息</span><br><span class="line">    if (WIFEXITED(status)) &#123;</span><br><span class="line">        NOTICE(&quot;%s exited with status %d\n&quot;, name.c_str(), WEXITSTATUS(status));</span><br><span class="line">    &#125; else if (WIFSIGNALED(status)) &#123;</span><br><span class="line">        NOTICE(&quot;%s killed by signal %d\n&quot;, name.c_str(), WTERMSIG(status));</span><br><span class="line">    &#125; else if (WIFSTOPPED(status)) &#123;</span><br><span class="line">        NOTICE(&quot;%s stopped by signal %d\n&quot;, name.c_str(), WSTOPSIG(status));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        NOTICE(&quot;%s state changed&quot;, name.c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 不是服务进程，处理到此结束，直接退出</span><br><span class="line">    if (!svc) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 服务进程，svc-&gt;Reap()进一步处理</span><br><span class="line">    if (svc-&gt;Reap()) &#123;</span><br><span class="line">        waiting_for_exec = false;</span><br><span class="line">        RemoveService(*svc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>while循环中调用ReapOneProcess处理</li>
<li>waitpid()等待子进程退出结束(WNOHANG标志没有子进程死亡立即返回)，以获取子进程结束信息清除zombie</li>
<li>对于一般子进程,waitpid后处理结束.但如果退出的是服务进程的话,那么会通过svc-&gt;Reap()对其进一步处理</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">bool Service::Reap() &#123;</span><br><span class="line">   //kill未定义SVC_ONESHOT或定义了SVC_RESTART标志的service的子进程</span><br><span class="line">   if (!(flags_ &amp; SVC_ONESHOT) || (flags_ &amp; SVC_RESTART)) &#123;</span><br><span class="line">       NOTICE(&quot;Service &apos;%s&apos; (pid %d) killing any children in process group\n&quot;,</span><br><span class="line">              name_.c_str(), pid_);</span><br><span class="line">        kill(-pid_, SIGKILL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 清除创建的socket</span><br><span class="line">    for (const auto&amp; si : sockets_) &#123;</span><br><span class="line">        std::string tmp = StringPrintf(ANDROID_SOCKET_DIR &quot;/%s&quot;, si.name.c_str());</span><br><span class="line">        unlink(tmp.c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (flags_ &amp; SVC_EXEC) &#123;</span><br><span class="line">        INFO(&quot;SVC_EXEC pid %d finished...\n&quot;, pid_);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pid_ = 0;</span><br><span class="line">    flags_ &amp;= (~SVC_RUNNING);</span><br><span class="line"></span><br><span class="line">    // Oneshot processes go into the disabled state on exit,</span><br><span class="line">    //未定义SVC_ONESHOT与SVC_RESTART的service，标志置为SVC_DISABLED，不再启动</span><br><span class="line">    if ((flags_ &amp; SVC_ONESHOT) &amp;&amp; !(flags_ &amp; SVC_RESTART)) &#123;</span><br><span class="line">        flags_ |= SVC_DISABLED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Disabled and reset processes do not get restarted automatically.</span><br><span class="line">    if (flags_ &amp; (SVC_DISABLED | SVC_RESET))  &#123;</span><br><span class="line">        NotifyStateChange(&quot;stopped&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time_t now = gettime();</span><br><span class="line">    // 定义SVC_CRITICAL且没有定义SVC_RESTART的service重启超过４次进入recovery</span><br><span class="line">    if ((flags_ &amp; SVC_CRITICAL) &amp;&amp; !(flags_ &amp; SVC_RESTART)) &#123;</span><br><span class="line">        if (time_crashed_ + CRITICAL_CRASH_WINDOW &gt;= now) &#123;</span><br><span class="line">            if (++nr_crashed_ &gt; CRITICAL_CRASH_THRESHOLD) &#123;</span><br><span class="line">                ERROR(&quot;critical process &apos;%s&apos; exited %d times in %d minutes; &quot;</span><br><span class="line">                      &quot;rebooting into recovery mode\n&quot;, name_.c_str(),</span><br><span class="line">                      CRITICAL_CRASH_THRESHOLD, CRITICAL_CRASH_WINDOW / 60);</span><br><span class="line">                android_reboot(ANDROID_RB_RESTART2, 0, &quot;recovery&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            time_crashed_ = now;</span><br><span class="line">            nr_crashed_ = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flags_ &amp;= (~SVC_RESTART);</span><br><span class="line">    flags_ |= SVC_RESTARTING;</span><br><span class="line"></span><br><span class="line">    //执行当前service中所有onrestart命令</span><br><span class="line">    onrestart_.ExecuteAllCommands();</span><br><span class="line"></span><br><span class="line">    NotifyStateChange(&quot;restarting&quot;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reap()中主要是对service进程的flag进行分析,来判断是否需要重启该service进程,定义了SVC_ONESHOT的服务进程不会重启,状态改为stopped.定义了SVC_CRITICAL与SVC_RESTART的关键服务如果重启超过4次,系统将reboot到recovery.服务进程在重启前将移除其创建的socket(/dev/socket/),杀死其所有子进程,并通过NotifyStateChange改变其状态为restarting(即设置init.svc.属性状态),并执行initrc中该服务定义的onrestart命令.</p>
<h1 id="属性服务"><a href="#属性服务" class="headerlink" title="属性服务"></a>属性服务</h1><p>Android的属性是以字符串键值形式保存的系统的关键值(可通过adb shell getprop打印所有的prop),在Android系统中，很多系统模块/应用的功能都是通过属性来控制的,属性设置也是通过Init进行管理管理理.<br>下面从void property_init开始分析属性服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">// system/core/init/property_service.cpp</span><br><span class="line">// property_init创建一块用于存储属性的共享内存</span><br><span class="line">void property_init() &#123;</span><br><span class="line">    if (__system_property_area_init()) &#123;</span><br><span class="line">        ERROR(&quot;Failed to initialize property area\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// bionic/libc/include/sys/_system_properties.h</span><br><span class="line"></span><br><span class="line">#define PROP_FILENAME &quot;/dev/__properties__&quot;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">** Initialize the area to be used to store properties.  Can</span><br><span class="line">** only be done by a single process that has write access to</span><br><span class="line">** the property area.</span><br><span class="line">*/</span><br><span class="line">int __system_property_area_init();</span><br><span class="line"></span><br><span class="line">// bionic/libc/bionic/system_properties.cpp</span><br><span class="line"></span><br><span class="line">static char property_filename[PROP_FILENAME_MAX] = PROP_FILENAME;</span><br><span class="line"></span><br><span class="line">int __system_property_area_init()</span><br><span class="line">&#123;</span><br><span class="line">    free_and_unmap_contexts();</span><br><span class="line">    mkdir(property_filename, S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH);</span><br><span class="line">    if (!initialize_properties()) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    bool open_failed = false;</span><br><span class="line">    bool fsetxattr_failed = false;</span><br><span class="line">    list_foreach(contexts, [&amp;fsetxattr_failed, &amp;open_failed](context_node* l) &#123;</span><br><span class="line">        if (!l-&gt;open(true, &amp;fsetxattr_failed)) &#123;</span><br><span class="line">            open_failed = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    if (open_failed || !map_system_property_area(true, &amp;fsetxattr_failed)) &#123;</span><br><span class="line">        free_and_unmap_contexts();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    initialized = true;</span><br><span class="line">    return fsetxattr_failed ? -2 : 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int __system_property_area_init()</span><br><span class="line">&#123;</span><br><span class="line">    return map_prop_area_rw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int map_prop_area_rw()</span><br><span class="line">&#123;</span><br><span class="line">    /* dev is a tmpfs that we can use to carve a shared workspace</span><br><span class="line">     * out of, so let&apos;s do that...</span><br><span class="line">     */</span><br><span class="line">    const int fd = open(property_filename,</span><br><span class="line">                        O_RDWR | O_CREAT | O_NOFOLLOW | O_CLOEXEC | O_EXCL, 0444);</span><br><span class="line"></span><br><span class="line">    if (fd &lt; 0) &#123;</span><br><span class="line">        if (errno == EACCES) &#123;</span><br><span class="line">            /* for consistency with the case where the process has already</span><br><span class="line">             * mapped the page in and segfaults when trying to write to it</span><br><span class="line">             */</span><br><span class="line">            abort();</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ftruncate(fd, PA_SIZE) &lt; 0) &#123;</span><br><span class="line">        close(fd);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pa_size = PA_SIZE;</span><br><span class="line">    pa_data_size = pa_size - sizeof(prop_area);</span><br><span class="line">    compat_mode = false;</span><br><span class="line"></span><br><span class="line">    void *const memory_area = mmap(NULL, pa_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);</span><br><span class="line">    if (memory_area == MAP_FAILED) &#123;</span><br><span class="line">        close(fd);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prop_area *pa = new(memory_area) prop_area(PROP_AREA_MAGIC, PROP_AREA_VERSION);</span><br><span class="line"></span><br><span class="line">    /* plug into the lib property services */</span><br><span class="line">    __system_property_area__ = pa;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>property_init主要是分配一块共享的内存区域(/dev/<strong>properties</strong>)存储属性值 //TODO</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bionic/libc/include/sys/_system_properties.h:90:#define PROP_PATH_RAMDISK_DEFAULT  &quot;/default.prop&quot;</span><br><span class="line"></span><br><span class="line">property_load_boot_defaults();</span><br></pre></td></tr></table></figure>
<p>property_load_boot_defaults中读取并初始化/default.prop文件中的属性值,接着调用start_property_service()启动属性服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void start_property_service() &#123;</span><br><span class="line">    property_set_fd = create_socket(PROP_SERVICE_NAME, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK,</span><br><span class="line">                                    0666, 0, 0, NULL);</span><br><span class="line">    if (property_set_fd == -1) &#123;</span><br><span class="line">        ERROR(&quot;start_property_service socket creation failed: %s\n&quot;, strerror(errno));</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen(property_set_fd, 8);</span><br><span class="line"></span><br><span class="line">    register_epoll_handler(property_set_fd, handle_property_set_fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>start_property_service中创建并监听属性服务的socket，并加入到property_set_fd上的epoll事件监听中,其他进程属性设置的请求都将通过handle_property_set_fd来处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">static void handle_property_set_fd()</span><br><span class="line">&#123;</span><br><span class="line">    prop_msg msg;</span><br><span class="line">    int s;</span><br><span class="line">    int r;</span><br><span class="line">    struct ucred cr;</span><br><span class="line">    struct sockaddr_un addr;</span><br><span class="line">    socklen_t addr_size = sizeof(addr);</span><br><span class="line">    socklen_t cr_size = sizeof(cr);</span><br><span class="line">    char * source_ctx = NULL;</span><br><span class="line">    struct pollfd ufds[1];</span><br><span class="line">    const int timeout_ms = 2 * 1000;  /* Default 2 sec timeout for caller to send property. */</span><br><span class="line">    int nr;</span><br><span class="line"></span><br><span class="line">    if ((s = accept(property_set_fd, (struct sockaddr *) &amp;addr, &amp;addr_size)) &lt; 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Check socket options here */</span><br><span class="line">    if (getsockopt(s, SOL_SOCKET, SO_PEERCRED, &amp;cr, &amp;cr_size) &lt; 0) &#123;</span><br><span class="line">        close(s);</span><br><span class="line">        ERROR(&quot;Unable to receive socket options\n&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ufds[0].fd = s;</span><br><span class="line">    ufds[0].events = POLLIN;</span><br><span class="line">    ufds[0].revents = 0;</span><br><span class="line">    nr = TEMP_FAILURE_RETRY(poll(ufds, 1, timeout_ms));</span><br><span class="line">    if (nr == 0) &#123;</span><br><span class="line">        ERROR(&quot;sys_prop: timeout waiting for uid=%d to send property message.\n&quot;, cr.uid);</span><br><span class="line">        close(s);</span><br><span class="line">        return;</span><br><span class="line">    &#125; else if (nr &lt; 0) &#123;</span><br><span class="line">        ERROR(&quot;sys_prop: error waiting for uid=%d to send property message: %s\n&quot;, cr.uid, strerror(errno));</span><br><span class="line">        close(s);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = TEMP_FAILURE_RETRY(recv(s, &amp;msg, sizeof(msg), MSG_DONTWAIT));</span><br><span class="line">    if(r != sizeof(prop_msg)) &#123;</span><br><span class="line">        ERROR(&quot;sys_prop: mis-match msg size received: %d expected: %zu: %s\n&quot;,</span><br><span class="line">              r, sizeof(prop_msg), strerror(errno));</span><br><span class="line">        close(s);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch(msg.cmd) &#123;</span><br><span class="line">    case PROP_MSG_SETPROP:</span><br><span class="line">        msg.name[PROP_NAME_MAX-1] = 0;</span><br><span class="line">        msg.value[PROP_VALUE_MAX-1] = 0;</span><br><span class="line"></span><br><span class="line">        if (!is_legal_property_name(msg.name, strlen(msg.name))) &#123;</span><br><span class="line">            ERROR(&quot;sys_prop: illegal property name. Got: \&quot;%s\&quot;\n&quot;, msg.name);</span><br><span class="line">            close(s);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        getpeercon(s, &amp;source_ctx);</span><br><span class="line"></span><br><span class="line">        if(memcmp(msg.name,&quot;ctl.&quot;,4) == 0) &#123;</span><br><span class="line">            // Keep the old close-socket-early behavior when handling</span><br><span class="line">            // ctl.* properties.</span><br><span class="line">            close(s);</span><br><span class="line">            if (check_control_mac_perms(msg.value, source_ctx, &amp;cr)) &#123;</span><br><span class="line">                handle_control_message((char*) msg.name + 4, (char*) msg.value);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ERROR(&quot;sys_prop: Unable to %s service ctl [%s] uid:%d gid:%d pid:%d\n&quot;,</span><br><span class="line">                        msg.name + 4, msg.value, cr.uid, cr.gid, cr.pid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (check_mac_perms(msg.name, source_ctx, &amp;cr)) &#123;</span><br><span class="line">                property_set((char*) msg.name, (char*) msg.value);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ERROR(&quot;sys_prop: permission denied uid:%d  name:%s\n&quot;,</span><br><span class="line">                      cr.uid, msg.name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Note: bionic&apos;s property client code assumes that the</span><br><span class="line">            // property server will not close the socket until *AFTER*</span><br><span class="line">            // the property is written to memory.</span><br><span class="line">            close(s);</span><br><span class="line">        &#125;</span><br><span class="line">        freecon(source_ctx);</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        close(s);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>handle_property_set_fd()接收子进程请求并设置相关的属性值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Init.rc语法]]></title>
      <url>http://robinheztto.com/2016/02/01/android-init-language/</url>
      <content type="html"><![CDATA[<blockquote>
<p>译自system/core/init/readme.txt</p>
</blockquote>
<h1 id="Android-init-rc语法"><a href="#Android-init-rc语法" class="headerlink" title="Android init.rc语法"></a>Android init.rc语法</h1><p>Android init.rc包含四种类型的声明，分别是 <strong>Actions</strong>，<strong>Commands</strong>，<strong>Services</strong>，和 <strong>Options</strong>。<br>其语法规则如下：</p>
<ul>
<li><p>init.rc所有的语句都是以行为单位，行间使用空格分隔符号，类似C语言，使用”\”续行，类似shell脚本以”#”进行行注释。</p>
</li>
<li><p>Actions和Services默认声明一个新的section，所有该section下的command与options都属于它，在section前申明的command和options将会被其忽略。</p>
</li>
<li><p>Actions与Services的命名是唯一的,重复的定义被视为无效。</p>
</li>
</ul>
<h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>Action是由一系列命令组成并由”on”开头的语句,通过trigger来决定什么时候执行(“on”后面跟的字符串即为ation的trigger).当trigger事件发生时，如果action不在to-be-executed中，将被加入到to-be-executed的队尾等待执行。</p>
<p>在to-be-executed队列中的每个action按FIFO顺序执行，同样action中的command也是按定义的先后顺序依次执行。init除了执行action的command，还负责设备节点的创建及销毁，属性设置，进程重启等工作。</p>
<p>Actions的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on &lt;trigger&gt;</span><br><span class="line">   &lt;command&gt;</span><br><span class="line">   &lt;command&gt;</span><br><span class="line">   &lt;command&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><p>services,以“service”字符串开头，由init进程启动并且可以在退出时重启(可选)，services的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*</span><br><span class="line">   &lt;option&gt;</span><br><span class="line">   &lt;option&gt;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>options是services的可选项，它决定service的执行行为.</p>
<ul>
<li>critical<br>表示关键的service，如果service 4分钟内异常退出4次将会重启进入recovery模式。</li>
<li>disabled<br>指定disable的service，不能通过class service(class_start)启动，只有通过<code>start service_name</code>启动时才能启动</li>
<li>setenv &lt;&lt;name&gt; &lt;value&gt;<br>service启动时设置环境变量值</li>
<li>socket &lt;name&gt; &lt;type&gt; &lt;perm&gt; [ &lt;user&gt; [ &lt;group&gt; [ &lt;seclabel&gt; ] ] ]<br>为要启动的进程创建名为/dev/socket/&lt;name&gt;的socket,&lt;type&gt;可选”dgram”或”stream”,&lt;user&gt; [ &lt;group&gt;默认为0.</li>
<li>user &lt;username&gt;<br>在service启动时为其设置user，默认为root</li>
<li>group &lt;groupname&gt; [ &lt;groupname&gt; ]*<br>在service启动时为其设置group，默认为root</li>
<li>seclabel &lt;seclabel&gt;<br>SELinux security context</li>
<li>oneshot<br>定义oneshot的service，退出后不再重启</li>
<li>class &lt;name&gt;<br>指服务所属的class，同一class的服务可以同时启动或停止.默认为default</li>
<li>onrestart<br>服务重启时执行命令</li>
</ul>
<h2 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h2><p>Triggers是on后面的字符串，匹配某类事件的发生来执行action。</p>
<ul>
<li><p>boot<br>init执行后触发的第一个trigger.</p>
</li>
<li><p>&lt;name&gt;=&lt;value&gt;<br>设置属性值时触发Trigger</p>
</li>
</ul>
<h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><p>Commands即Action或Services onrestart中所执行的命令,下面是常用的命令。</p>
<ul>
<li><p>bootchart_init<br> 启动bootcharting</p>
</li>
<li><p>chmod &lt;octal-mode&gt; &lt;path&gt;<br>chmod权限</p>
</li>
<li><p>chown &lt;owner&gt; &lt;group&gt; &lt;path&gt;<br> chown用户/组</p>
</li>
<li><p>class_start &lt;serviceclass&gt;<br>启动serviceclass下所有未启动的服务服务,disable的除外</p>
</li>
<li><p>class_stop &lt;serviceclass&gt;<br>停止serviceclass下所有已启动的服务服务,disable的除外</p>
</li>
<li><p>class_reset &lt;serviceclass&gt;<br> Stop all services of the specified class if they are<br> currently running, without disabling them. They can be restarted<br> later using class_start.</p>
</li>
<li><p>copy &lt;src&gt; &lt;dst&gt;<br> copy操作</p>
</li>
<li><p>domainname &lt;name&gt;<br> 设置domain name.</p>
</li>
<li><p>enable &lt;servicename&gt;<br>enable服务，该服务可以随class service启动或停止</p>
</li>
<li><p>exec [ &lt;seclabel&gt; [&lt;user&gt; [ &lt;group&gt; ]<em> ] ] – &lt;command&gt; [ &lt;argument&gt; ]</em><br>fork并执行command，将阻塞init直到执行完毕</p>
</li>
<li><p>export &lt;name&gt; &lt;value&gt;<br>export环境变量值</p>
</li>
<li><p>hostname &lt;name&gt;<br> 设置hostname.</p>
</li>
<li><p>ifup &lt;interface&gt;<br>启用网络接口</p>
</li>
<li><p>import &lt;filename&gt;<br>import其他initrc文件</p>
</li>
<li><p>insmod &lt;path&gt;<br>加载指定驱动模块</p>
</li>
<li><p>load_all_props<br> Loads properties from /system, /vendor, et cetera.<br> This is included in the default init.rc.</p>
</li>
<li><p>load_persist_props<br> Loads persistent properties when /data has been decrypted.<br> This is included in the default init.rc.</p>
</li>
<li><p>loglevel &lt;level&gt;<br>设置log级别</p>
</li>
<li><p>mkdir &lt;path&gt; [mode] [owner] [group]<br>创建dir</p>
</li>
<li><p>mount_all &lt;fstab&gt;<br>mount所有fstab.</p>
</li>
<li><p>mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [ &lt;flag&gt; ]* [&lt;options&gt;]<br>mount文件系统到执行目录</p>
</li>
<li><p>powerctl<br> Internal implementation detail used to respond to changes to the<br> “sys.powerctl” system property, used to implement rebooting.</p>
</li>
<li><p>restart &lt;service&gt;<br>restart服务</p>
</li>
<li><p>restorecon &lt;path&gt; [ &lt;path&gt; ]*<br>重新存储&lt;path&gt;到由file_contexts配置的安全上下文.</p>
</li>
<li><p>restorecon_recursive &lt;path&gt; [ &lt;path&gt; ]*<br> Recursively restore the directory tree named by &lt;path&gt; to the<br> security contexts specified in the file_contexts configuration.</p>
</li>
<li><p>rm &lt;path&gt;<br>rm文件</p>
</li>
<li><p>rmdir &lt;path&gt;<br>rmdir</p>
</li>
<li><p>setprop &lt;name&gt; &lt;value&gt;<br>设置属性</p>
</li>
<li><p>setrlimit &lt;resource&gt; &lt;cur&gt; &lt;max&gt;<br>设置进程占用的资源大小，包括可打开文件数目，大小</p>
</li>
<li><p>start &lt;service&gt;<br> 启动服务</p>
</li>
<li><p>stop &lt;service&gt;<br>停止服务</p>
</li>
<li><p>swapon_all &lt;fstab&gt;<br> Calls fs_mgr_swapon_all on the given fstab file.</p>
</li>
<li><p>symlink &lt;target&gt; &lt;path&gt;<br>创建连接到target的path符号链接</p>
</li>
<li><p>sysclktz &lt;mins_west_of_gmt&gt;<br> Set the system clock base (0 if system clock ticks in GMT)</p>
</li>
<li><p>trigger &lt;event&gt;<br>trigger的事件</p>
</li>
<li><p>verity_load_state<br> Internal implementation detail used to load dm-verity state.</p>
</li>
<li><p>verity_update_state &lt;mount_point&gt;<br> Internal implementation detail used to update dm-verity state and<br> set the partition.&lt;mount_point&gt;.verified properties used by adb remount<br> because fs_mgr can’t set them directly itself.</p>
</li>
<li><p>wait &lt;path&gt; [ &lt;timeout&gt; ]<br> Poll文件，默认timeout为5s</p>
</li>
<li><p>write &lt;path&gt; &lt;content&gt;<br>打开指定文件并写入字符串</p>
</li>
</ul>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>Init进程运行过程中,以下的属性值会随时更新(可通过adb shell getprop查看)：</p>
<ul>
<li><p>init.action<br>当前执行的action</p>
</li>
<li><p>init.command<br>将被执行的命令</p>
</li>
<li><p>init.svc.&lt;name&gt;<br>服务的运行状态(“stopped”, “running”, “restarting”)</p>
</li>
</ul>
<hr>
<h1 id="Android-Init-Language"><a href="#Android-Init-Language" class="headerlink" title="Android Init Language"></a>Android Init Language</h1><p>The Android Init Language consists of four broad classes of statements,<br>which are Actions, Commands, Services, and Options.</p>
<p>All of these are line-oriented, consisting of tokens separated by<br>whitespace.  The c-style backslash escapes may be used to insert<br>whitespace into a token.  Double quotes may also be used to prevent<br>whitespace from breaking text into multiple tokens.  The backslash,<br>when it is the last character on a line, may be used for line-folding.</p>
<p>Lines which start with a # (leading whitespace allowed) are comments.</p>
<p>Actions and Services implicitly declare a new section.  All commands<br>or options belong to the section most recently declared.  Commands<br>or options before the first section are ignored.</p>
<p>Actions and Services have unique names.  If a second Action or Service<br>is declared with the same name as an existing one, it is ignored as<br>an error.  (??? should we override instead)</p>
<h2 id="Actions-1"><a href="#Actions-1" class="headerlink" title="Actions"></a>Actions</h2><p>Actions are named sequences of commands.  Actions have a trigger which<br>is used to determine when the action should occur.  When an event<br>occurs which matches an action’s trigger, that action is added to<br>the tail of a to-be-executed queue (unless it is already on the<br>queue).</p>
<p>Each action in the queue is dequeued in sequence and each command in<br>that action is executed in sequence.  Init handles other activities<br>(device creation/destruction, property setting, process restarting)<br>“between” the execution of the commands in activities.</p>
<p>Actions take the form of:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on &lt;trigger&gt;</span><br><span class="line">   &lt;command&gt;</span><br><span class="line">   &lt;command&gt;</span><br><span class="line">   &lt;command&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Services-1"><a href="#Services-1" class="headerlink" title="Services"></a>Services</h2><p>Services are programs which init launches and (optionally) restarts<br>when they exit.  Services take the form of:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*</span><br><span class="line">   &lt;option&gt;</span><br><span class="line">   &lt;option&gt;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p>
<h2 id="Options-1"><a href="#Options-1" class="headerlink" title="Options"></a>Options</h2><p>Options are modifiers to services.  They affect how and when init<br>runs the service.</p>
<p>critical<br>  This is a device-critical service. If it exits more than four times in<br>  four minutes, the device will reboot into recovery mode.</p>
<p>disabled<br>  This service will not automatically start with its class.<br>  It must be explicitly started by name.</p>
<p>setenv &lt;name&gt; &lt;value&gt;<br>  Set the environment variable &lt;name&gt; to &lt;value&gt; in the launched process.</p>
<p>socket &lt;name&gt; &lt;type&gt; &lt;perm&gt; [ &lt;user&gt; [ &lt;group&gt; [ &lt;seclabel&gt; ] ] ]<br>  Create a unix domain socket named /dev/socket/&lt;name&gt; and pass<br>  its fd to the launched process.  &lt;type&gt; must be “dgram”, “stream” or “seqpacket”.<br>  User and group default to 0.<br>  ‘seclabel’ is the SELinux security context for the socket.<br>  It defaults to the service security context, as specified by seclabel or<br>  computed based on the service executable file security context.</p>
<p>user &lt;username&gt;<br>  Change to username before exec’ing this service.<br>  Currently defaults to root.  (??? probably should default to nobody)<br>  Currently, if your process requires linux capabilities then you cannot use<br>  this command. You must instead request the capabilities in-process while<br>  still root, and then drop to your desired uid.</p>
<p>group &lt;groupname&gt; [ &lt;groupname&gt; ]*<br>  Change to groupname before exec’ing this service.  Additional<br>  groupnames beyond the (required) first one are used to set the<br>  supplemental groups of the process (via setgroups()).<br>  Currently defaults to root.  (??? probably should default to nobody)</p>
<p>seclabel &lt;seclabel&gt;<br>  Change to ‘seclabel’ before exec’ing this service.<br>  Primarily for use by services run from the rootfs, e.g. ueventd, adbd.<br>  Services on the system partition can instead use policy-defined transitions<br>  based on their file security context.<br>  If not specified and no transition is defined in policy, defaults to the init context.</p>
<p>oneshot<br>  Do not restart the service when it exits.</p>
<p>class &lt;name&gt;<br>  Specify a class name for the service.  All services in a<br>  named class may be started or stopped together.  A service<br>  is in the class “default” if one is not specified via the<br>  class option.</p>
<p>onrestart<br>  Execute a Command (see below) when service restarts.</p>
<p>writepid &lt;file…&gt;<br>  Write the child’s pid to the given files when it forks. Meant for<br>  cgroup/cpuset usage.</p>
<h2 id="Triggers-1"><a href="#Triggers-1" class="headerlink" title="Triggers"></a>Triggers</h2><p>Triggers are strings which can be used to match certain kinds<br>of events and used to cause an action to occur.</p>
<p>boot<br>   This is the first trigger that will occur when init starts<br>   (after /init.conf is loaded)</p>
<p>&lt;name&gt;=&lt;value&gt;<br>   Triggers of this form occur when the property &lt;name&gt; is set<br>   to the specific value &lt;value&gt;.</p>
<p>   One can also test multiple properties to execute a group<br>   of commands. For example:</p>
<p>   on property:test.a=1 &amp;&amp; property:test.b=1<br>       setprop test.c 1</p>
<p>   The above stub sets test.c to 1 only when<br>   both test.a=1 and test.b=1</p>
<h2 id="Commands-1"><a href="#Commands-1" class="headerlink" title="Commands"></a>Commands</h2><p>bootchart_init<br>   Start bootcharting if configured (see below).<br>   This is included in the default init.rc.</p>
<p>chmod &lt;octal-mode&gt; &lt;path&gt;<br>   Change file access permissions.</p>
<p>chown &lt;owner&gt; &lt;group&gt; &lt;path&gt;<br>   Change file owner and group.</p>
<p>class_start &lt;serviceclass&gt;<br>   Start all services of the specified class if they are<br>   not already running.</p>
<p>class_stop &lt;serviceclass&gt;<br>   Stop and disable all services of the specified class if they are<br>   currently running.</p>
<p>class_reset &lt;serviceclass&gt;<br>   Stop all services of the specified class if they are<br>   currently running, without disabling them. They can be restarted<br>   later using class_start.</p>
<p>copy &lt;src&gt; &lt;dst&gt;<br>   Copies a file. Similar to write, but useful for binary/large<br>   amounts of data.</p>
<p>domainname &lt;name&gt;<br>   Set the domain name.</p>
<p>enable &lt;servicename&gt;<br>   Turns a disabled service into an enabled one as if the service did not<br>   specify disabled.<br>   If the service is supposed to be running, it will be started now.<br>   Typically used when the bootloader sets a variable that indicates a specific<br>   service should be started when needed. E.g.<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on property:ro.boot.myfancyhardware=1</span><br><span class="line">  enable my_fancy_service_for_my_fancy_hardware</span><br></pre></td></tr></table></figure></p>
<p>exec [ &lt;seclabel&gt; [ &lt;user&gt; [ &lt;group&gt; ]<em> ] ] – &lt;command&gt; [ &lt;argument&gt; ]</em><br>   Fork and execute command with the given arguments. The command starts<br>   after “–” so that an optional security context, user, and supplementary<br>   groups can be provided. No other commands will be run until this one<br>   finishes. &lt;seclabel&gt; can be a - to denote default.</p>
<p>export &lt;name&gt; &lt;value&gt;<br>   Set the environment variable &lt;name&gt; equal to &lt;value&gt; in the<br>   global environment (which will be inherited by all processes<br>   started after this command is executed)</p>
<p>hostname &lt;name&gt;<br>   Set the host name.</p>
<p>ifup &lt;interface&gt;<br>   Bring the network interface &lt;interface&gt; online.</p>
<p>import &lt;filename&gt;<br>   Parse an init config file, extending the current configuration.</p>
<p>insmod &lt;path&gt;<br>   Install the module at &lt;path&gt;</p>
<p>load_all_props<br>   Loads properties from /system, /vendor, et cetera.<br>   This is included in the default init.rc.</p>
<p>load_persist_props<br>   Loads persistent properties when /data has been decrypted.<br>   This is included in the default init.rc.</p>
<p>loglevel &lt;level&gt;<br>   Sets the kernel log level to level. Properties are expanded within &lt;level&gt;.</p>
<p>mkdir &lt;path&gt; [mode] [owner] [group]<br>   Create a directory at &lt;path&gt;, optionally with the given mode, owner, and<br>   group. If not provided, the directory is created with permissions 755 and<br>   owned by the root user and root group. If provided, the mode, owner and group<br>   will be updated if the directory exists already.</p>
<p>mount_all &lt;fstab&gt;<br>   Calls fs_mgr_mount_all on the given fs_mgr-format fstab.</p>
<p>mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [ &lt;flag&gt; ]* [&lt;options&gt;]<br>   Attempt to mount the named device at the directory &lt;dir&gt;<br>   &lt;device&gt; may be of the form mtd@name to specify a mtd block<br>   device by name.<br>   &lt;flag&gt;s include “ro”, “rw”, “remount”, “noatime”, …<br>   &lt;options&gt; include “barrier=1”, “noauto_da_alloc”, “discard”, … as<br>   a comma separated string, eg: barrier=1,noauto_da_alloc</p>
<p>powerctl<br>   Internal implementation detail used to respond to changes to the<br>   “sys.powerctl” system property, used to implement rebooting.</p>
<p>restart &lt;service&gt;<br>   Like stop, but doesn’t disable the service.</p>
<p>restorecon &lt;path&gt; [ &lt;path&gt; ]*<br>   Restore the file named by &lt;path&gt; to the security context specified<br>   in the file_contexts configuration.<br>   Not required for directories created by the init.rc as these are<br>   automatically labeled correctly by init.</p>
<p>restorecon_recursive &lt;path&gt; [ &lt;path&gt; ]*<br>   Recursively restore the directory tree named by &lt;path&gt; to the<br>   security contexts specified in the file_contexts configuration.</p>
<p>rm &lt;path&gt;<br>   Calls unlink(2) on the given path. You might want to<br>   use “exec – rm …” instead (provided the system partition is<br>   already mounted).</p>
<p>rmdir &lt;path&gt;<br>   Calls rmdir(2) on the given path.</p>
<p>setprop &lt;name&gt; &lt;value&gt;<br>   Set system property &lt;name&gt; to &lt;value&gt;. Properties are expanded<br>   within &lt;value&gt;.</p>
<p>setrlimit &lt;resource&gt; &lt;cur&gt; &lt;max&gt;<br>   Set the rlimit for a resource.</p>
<p>start &lt;service&gt;<br>   Start a service running if it is not already running.</p>
<p>stop &lt;service&gt;<br>   Stop a service from running if it is currently running.</p>
<p>swapon_all &lt;fstab&gt;<br>   Calls fs_mgr_swapon_all on the given fstab file.</p>
<p>symlink &lt;target&gt; &lt;path&gt;<br>   Create a symbolic link at &lt;path&gt; with the value &lt;target&gt;</p>
<p>sysclktz &lt;mins_west_of_gmt&gt;<br>   Set the system clock base (0 if system clock ticks in GMT)</p>
<p>trigger &lt;event&gt;<br>   Trigger an event.  Used to queue an action from another<br>   action.</p>
<p>verity_load_state<br>   Internal implementation detail used to load dm-verity state.</p>
<p>verity_update_state &lt;mount_point&gt;<br>   Internal implementation detail used to update dm-verity state and<br>   set the partition.&lt;mount_point&gt;.verified properties used by adb remount<br>   because fs_mgr can’t set them directly itself.</p>
<p>wait &lt;path&gt; [ &lt;timeout&gt; ]<br>   Poll for the existence of the given file and return when found,<br>   or the timeout has been reached. If timeout is not specified it<br>   currently defaults to five seconds.</p>
<p>write &lt;path&gt; &lt;content&gt;<br>   Open the file at &lt;path&gt; and write a string to it with write(2).<br>   If the file does not exist, it will be created. If it does exist,<br>   it will be truncated. Properties are expanded within &lt;content&gt;.</p>
<h2 id="Properties-1"><a href="#Properties-1" class="headerlink" title="Properties"></a>Properties</h2><p>Init updates some system properties to provide some insight into<br>what it’s doing:</p>
<p>init.action<br>   Equal to the name of the action currently being executed or “” if none</p>
<p>init.command<br>   Equal to the command being executed or “” if none.</p>
<p>init.svc.&lt;name&gt;<br>   State of a named service (“stopped”, “running”, “restarting”)</p>
<h2 id="Bootcharting"><a href="#Bootcharting" class="headerlink" title="Bootcharting"></a>Bootcharting</h2><p>This version of init contains code to perform “bootcharting”: generating log<br>files that can be later processed by the tools provided by www.bootchart.org.</p>
<p>On the emulator, use the -bootchart &lt;timeout&gt; option to boot with bootcharting<br>activated for &lt;timeout&gt; seconds.</p>
<p>On a device, create /data/bootchart/start with a command like the following:</p>
<p>  adb shell ‘echo $TIMEOUT &gt; /data/bootchart/start’</p>
<p>Where the value of $TIMEOUT corresponds to the desired bootcharted period in<br>seconds. Bootcharting will stop after that many seconds have elapsed.<br>You can also stop the bootcharting at any moment by doing the following:</p>
<p>  adb shell ‘echo 1 &gt; /data/bootchart/stop’</p>
<p>Note that /data/bootchart/stop is deleted automatically by init at the end of<br>the bootcharting. This is not the case with /data/bootchart/start, so don’t<br>forget to delete it when you’re done collecting data.</p>
<p>The log files are written to /data/bootchart/. A script is provided to<br>retrieve them and create a bootchart.tgz file that can be used with the<br>bootchart command-line utility:</p>
<p>  sudo apt-get install pybootchartgui<br>  <code># grab-bootchart.sh uses $ANDROID_SERIAL.</code><br>  $ANDROID_BUILD_TOP/system/core/init/grab-bootchart.sh</p>
<p>One thing to watch for is that the bootchart will show init as if it started<br>running at 0s. You’ll have to look at dmesg to work out when the kernel<br>actually started init.</p>
<h2 id="Debugging-init"><a href="#Debugging-init" class="headerlink" title="Debugging init"></a>Debugging init</h2><p>By default, programs executed by init will drop stdout and stderr into<br>/dev/null. To help with debugging, you can execute your program via the<br>Android program logwrapper. This will redirect stdout/stderr into the<br>Android logging system (accessed via logcat).</p>
<p>For example<br>service akmd /system/bin/logwrapper /sbin/akmd</p>
<p>For quicker turnaround when working on init itself, use:</p>
<p>  mm -j<br>  m ramdisk-nodeps<br>  m bootimage-nodeps<br>  adb reboot bootloader<br>  fastboot boot $ANDROID_PRODUCT_OUT/boot.img</p>
<p>Alternatively, use the emulator:</p>
<p>  emulator -partition-size 1024 -verbose -show-kernel -no-window</p>
<p>You might want to call klog_set_level(6) after the klog_init() call<br>so you see the kernel logging in dmesg (or the emulator output).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之LK]]></title>
      <url>http://robinheztto.com/2016/01/15/android-lk/</url>
      <content type="html"><![CDATA[<blockquote>
<p>LK是Little Kernel的简称，它是一款bootloader程序，类似的bootloader还有以前的U-Boot，vivi。现Qualcomm、MTK都使用LK来作为系统引导程序.</p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Bootloader是移动平台/嵌入式系统在开机上电后执行的一段或几段程序。通常开机上电后，在芯片内部的SRAM控制器作用下将跳转到某一固定地址执行，该位置所在即BootROM，BootROM在完成CPU Core初始化后将加载bootloader程序执行。一般bootloader都分成几个文件，分阶段引导。BootROM加载bootloader第一阶段BL1到On-chip SRAM执行，BL1在完成SOC初步的初始化后将引导BL2到SDRAM执行。以MTK平台为例，启动加载顺序依次为BootROM-&gt;preloader-&gt;LK。</p>
<p>LK的代码一般在源码bootable/bootloader/lk目录下，目录结构如下：<br>├── app 　　　　LK上的应用，aboot，shell等<br>├── arch　　　　体系/架构相关，arm，x86<br>├── dev 　　　　设备相关，key，usb，pmic等<br>├── include　　　头文件<br>├── kernel　　　LK核心，thread，timer等<br>├── lib　　　　　C库<br>├── LICENSE<br>├── make　　　　编译mk文件<br>├── makefile<br>├── platform　　驱动相关<br>├── project　　　makefile文件<br>├── scripts　　　Jtag脚本<br>└── target　　　具体板子相关</p>
<p>LK的工作是引导系统启动，它主要完成以下工作：</p>
<ul>
<li>硬件初始化，设置中断向量表(vector table)，初始化MMU，cache，peripherals，storage，USB，crypto等</li>
<li>加载boot.img(inux Kernel与ramdisk),引导系统启动</li>
<li>支持fastboot/recovery模式</li>
</ul>
<h1 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h1><blockquote>
<p>在64-bit体系结构下，LK也时运行在32-bit模式，通过TrustZone安全模式跳转到64-bit kernel执行。</p>
</blockquote>
<p>链接脚本arch/arm/system-onesegment.ld中定义了入口地址<code>ENTRY(_start)</code><br>LK将从_start开始执行，_start在/arch/arm/crt0.S中定义。<br>1.crt0.S CPU相关初始化<br>首先初始化异常向量表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.globl _start</span><br><span class="line">_start:</span><br><span class="line">	b	reset</span><br><span class="line">	b	arm_undefined</span><br><span class="line">	b	arm_syscall</span><br><span class="line">	b	arm_prefetch_abort</span><br><span class="line">	b	arm_data_abort</span><br><span class="line">	b	arm_reserved</span><br><span class="line">	b	arm_irq</span><br><span class="line">	b	arm_fiq</span><br></pre></td></tr></table></figure></p>
<p>接下来执行Set Up CPU操作，调用__cpu_early_init()进行CPU相关初始化。<br>初始化各模式stack<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.Lstack_setup:</span><br><span class="line">	/* set up the stack for irq, fiq, abort, undefined, system/user, and lastly supervisor mode */</span><br><span class="line">	mrs     r0, cpsr</span><br><span class="line">	bic     r0, r0, #0x1f</span><br><span class="line"></span><br><span class="line">	ldr		r2, =abort_stack_top</span><br><span class="line">	orr     r1, r0, #0x12 // irq</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	ldr		r13, =irq_save_spot		/* save a pointer to a temporary dumping spot used during irq delivery */</span><br><span class="line"></span><br><span class="line">	orr     r1, r0, #0x11 // fiq</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br><span class="line"></span><br><span class="line">	orr     r1, r0, #0x17 // abort</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br><span class="line"></span><br><span class="line">	orr     r1, r0, #0x1b // undefined</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br><span class="line"></span><br><span class="line">	orr     r1, r0, #0x1f // system</span><br><span class="line">	msr     cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br><span class="line"></span><br><span class="line">	orr		r1, r0, #0x13 // supervisor</span><br><span class="line">	msr		cpsr_c, r1</span><br><span class="line">	mov		sp, r2</span><br></pre></td></tr></table></figure></p>
<p>最后跳入C函数kmain()中执行<br><code>bl        kmain</code></p>
<p>2.kmain()初始化流程<br>kmain()在kernel/main.c的中定义，执行流程如下：</p>
<p><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/lk_call_flow.png?raw=true" alt="LK Call Flow"><br></div></p>
<ul>
<li>thread_init_early();初始化线程相关结构</li>
<li>arch_early_init();disable cache,设置中断向量表基址，初始化MMU,enable cache</li>
<li>platform_early_init();interrupt contr，timer block初始化</li>
<li>target_early_init();Uart等初始化</li>
</ul>
<p>完成上述初始化操作后，新建线程并在新线程中执行bootstrap2<br><code>thread_resume(thread_create(&quot;bootstrap2&quot;, &amp;bootstrap2, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));</code><br>bootstrap2()分别调用arch_init();platform_init();target_init();进一步对硬件平台初始化。最后将调用apps_init()启动LK上的app。</p>
<p>3.apps_init()<br>apps_init的实现如下，首先遍历<strong>__apps_start</strong>到<strong>__apps_end</strong>位置的app_descriptor，并调用其init函数，然后在新线程中start app。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor __apps_start;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor __apps_end;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start_app</span><span class="params">(<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *app)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* one time setup */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">apps_init</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *app;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* call all the init routines */</span></span><br><span class="line">	<span class="keyword">for</span> (app = &amp;__apps_start; app != &amp;__apps_end; app++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (app-&gt;init)</span><br><span class="line">			app-&gt;init(app);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* start any that want to start on boot */</span></span><br><span class="line">	<span class="keyword">for</span> (app = &amp;__apps_start; app != &amp;__apps_end; app++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (app-&gt;entry &amp;&amp; (app-&gt;flags &amp; APP_FLAG_DONT_START_ON_BOOT) == <span class="number">0</span>) &#123;</span><br><span class="line">			start_app(app);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">app_thread_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *app = (<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *)arg;</span><br><span class="line"></span><br><span class="line">	app-&gt;entry(app, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start_app</span><span class="params">(<span class="keyword">const</span> <span class="keyword">struct</span> app_descriptor *app)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">thread_t</span> *thr;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"starting app %s\n"</span>, app-&gt;name);</span><br><span class="line"></span><br><span class="line">	thr = thread_create(app-&gt;name, &amp;app_thread_entry, (<span class="keyword">void</span> *)app, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);</span><br><span class="line">	<span class="keyword">if</span>(!thr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	thread_resume(thr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中<strong>__apps_start</strong>与<strong>__apps_end</strong>在链接脚本arch/arm/system-onesegment.ld中定义，<strong>__apps_start</strong>与<strong>__apps_end</strong>与中间存放的是apps section。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.rodata : &#123;</span><br><span class="line">	*(.rodata .rodata.* .gnu.linkonce.r.*)</span><br><span class="line">	. = ALIGN(4);</span><br><span class="line">	__commands_start = .;</span><br><span class="line">	KEEP (*(.commands))</span><br><span class="line">	__commands_end = .;</span><br><span class="line">	. = ALIGN(4);</span><br><span class="line">	__apps_start = .;</span><br><span class="line">	KEEP (*(.apps))</span><br><span class="line">	__apps_end = .;</span><br><span class="line">	. = ALIGN(4);</span><br><span class="line">	__rodata_end = . ;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有的LK app都需定义app_descriptor结构体存放到apps段，app_descriptor在include/app.h中定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* each app needs to define one of these to define its startup conditions */</span><br><span class="line">struct app_descriptor &#123;</span><br><span class="line">	const char *name;</span><br><span class="line">	app_init  init;</span><br><span class="line">	app_entry entry;</span><br><span class="line">	unsigned int flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#define APP_START(appname) struct app_descriptor _app_##appname __SECTION(&quot;.apps&quot;) = &#123; .name = #appname,</span><br><span class="line">#define APP_END &#125;;</span><br></pre></td></tr></table></figure></p>
<p>通过宏<strong>APP_START</strong>与<strong>APP_END</strong>定义app_descriptor结构体并放到apps sections中，例如在aboot.c的定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">APP_START(aboot)</span><br><span class="line">	.init = aboot_init,</span><br><span class="line">APP_END</span><br></pre></td></tr></table></figure></p>
<p>即定义了aboot的app_descriptor结构体并存放在apps section中，在apps_init中将调用到aboot_init()<br>至此，初始化流程结束。</p>
<h1 id="系统引导流程"><a href="#系统引导流程" class="headerlink" title="系统引导流程"></a>系统引导流程</h1><p>aboot的主要目的是进行系统引导，根据reboot_mode来决定进入Main System或Recovery或fastboot模式等。</p>
<p><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/lk_modes.jpg?raw=true" alt="lk mode"><br></div><br>下面从aboot_init()来分析整个流程：<br>1.首先设置EMMC/NAND读取page大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (target_is_emmc_boot())</span><br><span class="line">&#123;</span><br><span class="line">	page_size = mmc_page_size();</span><br><span class="line">	page_mask = page_size - 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">	page_size = flash_page_size();</span><br><span class="line">	page_mask = page_size - 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.选择开机模式<br>通过keys_get_state()与check_reboot_mode()确定开机模式。<br>keys_get_state()会检测按键，并根据按键的定义确定进入对应的模式。<br>check_reboot_mode()会读取指定memory位置信息，该位置信息由kernel shutdown时写入，例如执行<code>adb reboot recovery</code>，<code>adb reboot bootloader</code>，check_reboot_mode()获取的分别是<code>RECOVERY_MODE</code>，<code>FASTBOOT_MODE</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">reboot_mode = check_reboot_mode();</span><br><span class="line"><span class="keyword">if</span> (reboot_mode == RECOVERY_MODE)</span><br><span class="line">&#123;</span><br><span class="line">	boot_into_recovery = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(reboot_mode == FASTBOOT_MODE)</span><br><span class="line">&#123;</span><br><span class="line">	boot_into_fastboot = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(reboot_mode == ALARM_BOOT)</span><br><span class="line">&#123;</span><br><span class="line">	boot_reason_alarm = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果reboot_mode不是<code>FASTBOOT_MODE</code>，将调用boot_linux_from_mmc()进入系统引导流程<br>如果reboot_mode等于<code>FASTBOOT_MODE</code>，将执行fastboot_init()进入fastboot模式<br>3.boot_linux_from_mmc()<br>boot_linux_from_mmc()解析boot.img/recovery.img的头部boot_img_hdr结构来获取启动加载信息(如果是recovery模式,将从recovery分区加载recovery.img),其中cmdline对应传递给内核的参数,tags_addr对应device tree table,boot_img_hdr结构体在app/aboot/bootimg.h中定义,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#define BOOT_MAGIC &quot;ANDROID!&quot;</span><br><span class="line">#define BOOT_MAGIC_SIZE 8</span><br><span class="line">#define BOOT_NAME_SIZE  16</span><br><span class="line">#define BOOT_ARGS_SIZE  512</span><br><span class="line">#define BOOT_IMG_MAX_PAGE_SIZE 4096</span><br><span class="line"></span><br><span class="line">struct boot_img_hdr</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char magic[BOOT_MAGIC_SIZE];</span><br><span class="line"></span><br><span class="line">    unsigned kernel_size;  /* size in bytes */</span><br><span class="line">    unsigned kernel_addr;  /* physical load addr */</span><br><span class="line"></span><br><span class="line">    unsigned ramdisk_size; /* size in bytes */</span><br><span class="line">    unsigned ramdisk_addr; /* physical load addr */</span><br><span class="line"></span><br><span class="line">    unsigned second_size;  /* size in bytes */</span><br><span class="line">    unsigned second_addr;  /* physical load addr */</span><br><span class="line"></span><br><span class="line">    unsigned tags_addr;    /* physical addr for kernel tags */</span><br><span class="line">    unsigned page_size;    /* flash page size we assume */</span><br><span class="line">    unsigned dt_size;      /* device_tree in bytes */</span><br><span class="line">    unsigned unused;    /* future expansion: should be 0 */</span><br><span class="line"></span><br><span class="line">    unsigned char name[BOOT_NAME_SIZE]; /* asciiz product name */</span><br><span class="line"></span><br><span class="line">    unsigned char cmdline[BOOT_ARGS_SIZE];</span><br><span class="line"></span><br><span class="line">    unsigned id[8]; /* timestamp / checksum / sha1 / etc */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>下图是本机编译生成的boot.img示例：</p>
<p><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/bootimg.png?raw=true" alt="boot_img_hdr"><br></div><br>根据boot_img_hdr结构的定义可以从上图获取到以下信息：<br><strong>kernel_size:</strong> 0x009fc707<br><strong>kernel_addr:</strong> 0x80008000<br><strong>ramdisk_size:</strong> 0x001ddfb9<br><strong>ramdisk_addr:</strong> 0x81000000<br><strong>second_size:</strong> 0x00000000<br><strong>second_addr:</strong> 0x80f00000<br><strong>tags_addr:</strong> 0x80000100<br><strong>page_size:</strong> 0x00000100<br><strong>cmdline:</strong><br>console=ttyHSL0,115200,n8 androidboot.console=ttyHSL0 androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x237 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 cma=32M@0-0xffffffff androidboot.selinux=permissive</p>
<p>在解析完boot_img_hdr后，boot_img_hdr的信息被传递给boot_linux执行具体的加载启动工作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">boot_linux((void *)hdr-&gt;kernel_addr, (void *)hdr-&gt;tags_addr,</span><br><span class="line">		 (const char *)hdr-&gt;cmdline, board_machtype(),</span><br><span class="line">		 (void *)hdr-&gt;ramdisk_addr, hdr-&gt;ramdisk_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> typedef void entry_func_ptr(unsigned, unsigned, unsigned*);</span><br><span class="line"> void boot_linux(void *kernel, unsigned *tags,</span><br><span class="line"> 		const char *cmdline, unsigned machtype,</span><br><span class="line"> 		void *ramdisk, unsigned ramdisk_size)</span><br><span class="line"> &#123;</span><br><span class="line"> 	unsigned char *final_cmdline;</span><br><span class="line"> #if DEVICE_TREE</span><br><span class="line"> 	int ret = 0;</span><br><span class="line"> #endif</span><br><span class="line"></span><br><span class="line"> 	void (*entry)(unsigned, unsigned, unsigned*) = (entry_func_ptr*)(PA((addr_t)kernel));</span><br><span class="line"> 	uint32_t tags_phys = PA((addr_t)tags);</span><br><span class="line"> 	struct kernel64_hdr *kptr = (struct kernel64_hdr*)kernel;</span><br><span class="line"></span><br><span class="line"> 	ramdisk = (void *)PA((addr_t)ramdisk);</span><br><span class="line"></span><br><span class="line"> 	final_cmdline = update_cmdline((const char*)cmdline);</span><br><span class="line"></span><br><span class="line"> #if DEVICE_TREE</span><br><span class="line"> 	dprintf(INFO, &quot;Updating device tree: start\n&quot;);</span><br><span class="line"></span><br><span class="line"> 	/* Update the Device Tree */</span><br><span class="line"> 	ret = update_device_tree((void *)tags,(const char *)final_cmdline, ramdisk, ramdisk_size);</span><br><span class="line"> 	if(ret)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		dprintf(CRITICAL, &quot;ERROR: Updating Device Tree Failed \n&quot;);</span><br><span class="line"> 		ASSERT(0);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	dprintf(INFO, &quot;Updating device tree: done\n&quot;);</span><br><span class="line"> #else</span><br><span class="line"> 	/* Generating the Atags */</span><br><span class="line"> 	generate_atags(tags, final_cmdline, ramdisk, ramdisk_size);</span><br><span class="line"> #endif</span><br><span class="line"></span><br><span class="line"> 	free(final_cmdline);</span><br><span class="line"></span><br><span class="line"> #if VERIFIED_BOOT</span><br><span class="line"> 	/* Write protect the device info */</span><br><span class="line"> 	if (!boot_into_recovery &amp;&amp; target_build_variant_user() &amp;&amp; devinfo_present &amp;&amp; mmc_write_protect(&quot;devinfo&quot;, 1))</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		dprintf(INFO, &quot;Failed to write protect dev info\n&quot;);</span><br><span class="line"> 		ASSERT(0);</span><br><span class="line"> 	&#125;</span><br><span class="line"> #endif</span><br><span class="line"></span><br><span class="line"> 	/* Turn off splash screen if enabled */</span><br><span class="line"> #if DISPLAY_SPLASH_SCREEN</span><br><span class="line"> 	target_display_shutdown();</span><br><span class="line"> #endif</span><br><span class="line"></span><br><span class="line"> 	/* Perform target specific cleanup */</span><br><span class="line"> 	target_uninit();</span><br><span class="line"></span><br><span class="line"> 	dprintf(INFO, &quot;booting linux @ %p, ramdisk @ %p (%d), tags/device tree @ %p\n&quot;,</span><br><span class="line"> 		entry, ramdisk, ramdisk_size, (void *)tags_phys);</span><br><span class="line"></span><br><span class="line"> 	enter_critical_section();</span><br><span class="line"></span><br><span class="line"> 	/* Initialise wdog to catch early kernel crashes */</span><br><span class="line"> #if WDOG_SUPPORT</span><br><span class="line"> 	msm_wdog_init();</span><br><span class="line"> #endif</span><br><span class="line"> 	/* do any platform specific cleanup before kernel entry */</span><br><span class="line"> 	platform_uninit();</span><br><span class="line"></span><br><span class="line"> 	arch_disable_cache(UCACHE);</span><br><span class="line"></span><br><span class="line"> #if ARM_WITH_MMU</span><br><span class="line"> 	arch_disable_mmu();</span><br><span class="line"> #endif</span><br><span class="line"> 	bs_set_timestamp(BS_KERNEL_ENTRY);</span><br><span class="line"></span><br><span class="line"> 	if (IS_ARM64(kptr))</span><br><span class="line"> 		/* Jump to a 64bit kernel */</span><br><span class="line"> 		scm_elexec_call((paddr_t)kernel, tags_phys);</span><br><span class="line"> 	else</span><br><span class="line"> 		/* Jump to a 32bit kernel */</span><br><span class="line"> 		entry(0, machtype, (unsigned*)tags_phys);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>至此，LK引导过程完成，将进入系统启动过程。</p>
<h1 id="LK-fastboot模式"><a href="#LK-fastboot模式" class="headerlink" title="LK fastboot模式"></a>LK fastboot模式</h1><p>当LK通过检测按键或reboot_mode是<code>FASTBOOT_MODE</code>时，将进入到fastboot模式。<br>1.注册fastboot Command<br>通过aboot_fastboot_register_commands()注册fastboot支持的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">void aboot_fastboot_register_commands(void)</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	char hw_platform_buf[MAX_RSP_SIZE];</span><br><span class="line"></span><br><span class="line">	struct fastboot_cmd_desc cmd_list[] = &#123;</span><br><span class="line">						/* By default the enabled list is empty. */</span><br><span class="line">						&#123;&quot;&quot;, NULL&#125;,</span><br><span class="line">						/* move commands enclosed within the below ifndef to here</span><br><span class="line">						 * if they need to be enabled in user build.</span><br><span class="line">						 */</span><br><span class="line">#ifndef DISABLE_FASTBOOT_CMDS</span><br><span class="line">						/* Register the following commands only for non-user builds */</span><br><span class="line">						&#123;&quot;flash:&quot;, cmd_flash&#125;,</span><br><span class="line">						&#123;&quot;erase:&quot;, cmd_erase&#125;,</span><br><span class="line">						&#123;&quot;boot&quot;, cmd_boot&#125;,</span><br><span class="line">						&#123;&quot;continue&quot;, cmd_continue&#125;,</span><br><span class="line">						&#123;&quot;reboot&quot;, cmd_reboot&#125;,</span><br><span class="line">						&#123;&quot;reboot-bootloader&quot;, cmd_reboot_bootloader&#125;,</span><br><span class="line">						&#123;&quot;oem unlock&quot;, cmd_oem_unlock&#125;,</span><br><span class="line">						&#123;&quot;oem unlock-go&quot;, cmd_oem_unlock_go&#125;,</span><br><span class="line">						&#123;&quot;oem lock&quot;, cmd_oem_lock&#125;,</span><br><span class="line">						&#123;&quot;flashing unlock&quot;, cmd_oem_unlock&#125;,</span><br><span class="line">						&#123;&quot;flashing lock&quot;, cmd_oem_lock&#125;,</span><br><span class="line">						&#123;&quot;flashing lock_critical&quot;, cmd_flashing_lock_critical&#125;,</span><br><span class="line">						&#123;&quot;flashing unlock_critical&quot;, cmd_flashing_unlock_critical&#125;,</span><br><span class="line">						&#123;&quot;flashing get_unlock_ability&quot;, cmd_flashing_get_unlock_ability&#125;,</span><br><span class="line">						&#123;&quot;oem device-info&quot;, cmd_oem_devinfo&#125;,</span><br><span class="line">						&#123;&quot;preflash&quot;, cmd_preflash&#125;,</span><br><span class="line">						&#123;&quot;oem enable-charger-screen&quot;, cmd_oem_enable_charger_screen&#125;,</span><br><span class="line">						&#123;&quot;oem disable-charger-screen&quot;, cmd_oem_disable_charger_screen&#125;,</span><br><span class="line">						&#123;&quot;oem off-mode-charge&quot;, cmd_oem_off_mode_charger&#125;,</span><br><span class="line">						&#123;&quot;oem select-display-panel&quot;, cmd_oem_select_display_panel&#125;,</span><br><span class="line">#if UNITTEST_FW_SUPPORT</span><br><span class="line">						&#123;&quot;oem run-tests&quot;, cmd_oem_runtests&#125;,</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br><span class="line">						&#125;;</span><br><span class="line"></span><br><span class="line">	int fastboot_cmds_count = sizeof(cmd_list)/sizeof(cmd_list[0]);</span><br><span class="line">	for (i = 1; i &lt; fastboot_cmds_count; i++)</span><br><span class="line">		fastboot_register(cmd_list[i].name,cmd_list[i].cb);</span><br><span class="line"></span><br><span class="line">	/* publish variables and their values */</span><br><span class="line">	fastboot_publish(&quot;product&quot;,  TARGET(BOARD));</span><br><span class="line">	fastboot_publish(&quot;kernel&quot;,   &quot;lk&quot;);</span><br><span class="line">	fastboot_publish(&quot;serialno&quot;, sn_buf);</span><br><span class="line"></span><br><span class="line">	/*</span><br><span class="line">	 * partition info is supported only for emmc partitions</span><br><span class="line">	 * Calling this for NAND prints some error messages which</span><br><span class="line">	 * is harmless but misleading. Avoid calling this for NAND</span><br><span class="line">	 * devices.</span><br><span class="line">	 */</span><br><span class="line">	if (target_is_emmc_boot())</span><br><span class="line">		publish_getvar_partition_info(part_info, ARRAY_SIZE(part_info));</span><br><span class="line"></span><br><span class="line">	/* Max download size supported */</span><br><span class="line">	snprintf(max_download_size, MAX_RSP_SIZE, &quot;\t0x%x&quot;,</span><br><span class="line">			target_get_max_flash_size());</span><br><span class="line">	fastboot_publish(&quot;max-download-size&quot;, (const char *) max_download_size);</span><br><span class="line">	/* Is the charger screen check enabled */</span><br><span class="line">	snprintf(charger_screen_enabled, MAX_RSP_SIZE, &quot;%d&quot;,</span><br><span class="line">			device.charger_screen_enabled);</span><br><span class="line">	fastboot_publish(&quot;charger-screen-enabled&quot;,</span><br><span class="line">			(const char *) charger_screen_enabled);</span><br><span class="line">	fastboot_publish(&quot;off-mode-charge&quot;, (const char *) charger_screen_enabled);</span><br><span class="line">	snprintf(panel_display_mode, MAX_RSP_SIZE, &quot;%s&quot;,</span><br><span class="line">			device.display_panel);</span><br><span class="line">	fastboot_publish(&quot;display-panel&quot;,</span><br><span class="line">			(const char *) panel_display_mode);</span><br><span class="line">	fastboot_publish(&quot;version-bootloader&quot;, (const char *) device.bootloader_version);</span><br><span class="line">	fastboot_publish(&quot;version-baseband&quot;, (const char *) device.radio_version);</span><br><span class="line">	fastboot_publish(&quot;secure&quot;, is_secure_boot_enable()? &quot;yes&quot;:&quot;no&quot;);</span><br><span class="line">	smem_get_hw_platform_name((unsigned char *) hw_platform_buf, sizeof(hw_platform_buf));</span><br><span class="line">	snprintf(get_variant, MAX_RSP_SIZE, &quot;%s %s&quot;, hw_platform_buf,</span><br><span class="line">		target_is_emmc_boot()? &quot;eMMC&quot;:&quot;UFS&quot;);</span><br><span class="line">	fastboot_publish(&quot;variant&quot;, (const char *) get_variant);</span><br><span class="line">#if CHECK_BAT_VOLTAGE</span><br><span class="line">	update_battery_status();</span><br><span class="line">	fastboot_publish(&quot;battery-voltage&quot;, (const char *) battery_voltage);</span><br><span class="line">	fastboot_publish(&quot;battery-soc-ok&quot;, (const char *) battery_soc_ok);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中主要是通过fastboot_register注册Command到cmdlist，通过fastboot_publish注册variables到varlist。<br>它们的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static struct fastboot_cmd *cmdlist;</span><br><span class="line"></span><br><span class="line">void fastboot_register(const char *prefix,</span><br><span class="line">		       void (*handle)(const char *arg, void *data, unsigned sz))</span><br><span class="line">&#123;</span><br><span class="line">	struct fastboot_cmd *cmd;</span><br><span class="line">	cmd = malloc(sizeof(*cmd));</span><br><span class="line">	if (cmd) &#123;</span><br><span class="line">		cmd-&gt;prefix = prefix;</span><br><span class="line">		cmd-&gt;prefix_len = strlen(prefix);</span><br><span class="line">		cmd-&gt;handle = handle;</span><br><span class="line">		cmd-&gt;next = cmdlist;</span><br><span class="line">		cmdlist = cmd;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static struct fastboot_var *varlist;</span><br><span class="line"></span><br><span class="line">void fastboot_publish(const char *name, const char *value)</span><br><span class="line">&#123;</span><br><span class="line">	struct fastboot_var *var;</span><br><span class="line">	var = malloc(sizeof(*var));</span><br><span class="line">	if (var) &#123;</span><br><span class="line">		var-&gt;name = name;</span><br><span class="line">		var-&gt;value = value;</span><br><span class="line">		var-&gt;next = varlist;</span><br><span class="line">		varlist = var;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行adb reboot bootloader进入fastboot模式后，可以在PC端的fastboot可执行文件(Fastboot客户端源码在system/core/fastboot下，通过系统源码编译后的科执行文件位于./out/host/linux-x86/bin/fastboot目录下)与目标按fastboot协议交互。<br>通过fastboot_register注册到cmdlist的命令，都可以在pc端通过fastboot执行，常用的命令有：<br><strong><code>fastboot  devices</code></strong> 查看连接设备<br><strong><code>fastboot  update &lt;filename&gt;</code></strong> 更新update.zip包<br><strong><code>fastboot  flashall</code></strong> flash boot, system, vendor, and recovery<br><strong><code>fastboot  flash &lt;partition&gt; [ &lt;filename&gt; ]</code></strong> flash指定分区<br><strong><code>fastboot  erase &lt;partition&gt;</code></strong> erase执行分区<br><strong><code>fastboot  continue</code></strong> 继续启动<br><strong><code>fastboot  reboot bootloader</code></strong> reboot到bootloader<br><strong><code>fastboot  oem unlock</code></strong> oem解锁</p>
<p>通过fastboot_publish publish到varlist的value可以通过<code>fastboot getvar &lt;variable&gt;</code>获取，例如<br><strong><code>fastboot getvar version</code></strong><br><strong><code>fastboot getvar product</code></strong></p>
<p>2.启动fastboot<br>通过<code>fastboot_init(target_get_scratch_address(), target_get_max_flash_size());</code>初始化并启动fastboot。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">int fastboot_init(void *base, unsigned size)</span><br><span class="line">&#123;</span><br><span class="line">	char sn_buf[13];</span><br><span class="line">	thread_t *thr;</span><br><span class="line">	dprintf(INFO, &quot;fastboot_init()\n&quot;);</span><br><span class="line"></span><br><span class="line">	download_base = base;</span><br><span class="line">	download_max = size;</span><br><span class="line"></span><br><span class="line">	/* target specific initialization before going into fastboot. */</span><br><span class="line">	target_fastboot_init();</span><br><span class="line"></span><br><span class="line">	/* setup serialno */</span><br><span class="line">	target_serialno((unsigned char *) sn_buf);</span><br><span class="line">	dprintf(SPEW,&quot;serial number: %s\n&quot;,sn_buf);</span><br><span class="line">	surf_udc_device.serialno = sn_buf;</span><br><span class="line"></span><br><span class="line">	if(!strcmp(target_usb_controller(), &quot;dwc&quot;))</span><br><span class="line">	&#123;</span><br><span class="line">#ifdef USB30_SUPPORT</span><br><span class="line">		surf_udc_device.t_usb_if = target_usb30_init();</span><br><span class="line"></span><br><span class="line">		/* initialize udc functions to use dwc controller */</span><br><span class="line">		usb_if.udc_init            = usb30_udc_init;</span><br><span class="line">		usb_if.udc_register_gadget = usb30_udc_register_gadget;</span><br><span class="line">		usb_if.udc_start           = usb30_udc_start;</span><br><span class="line">		usb_if.udc_stop            = usb30_udc_stop;</span><br><span class="line"></span><br><span class="line">		usb_if.udc_endpoint_alloc  = usb30_udc_endpoint_alloc;</span><br><span class="line">		usb_if.udc_request_alloc   = usb30_udc_request_alloc;</span><br><span class="line">		usb_if.udc_request_free    = usb30_udc_request_free;</span><br><span class="line"></span><br><span class="line">		usb_if.usb_read            = usb30_usb_read;</span><br><span class="line">		usb_if.usb_write           = usb30_usb_write;</span><br><span class="line">#else</span><br><span class="line">		dprintf(CRITICAL, &quot;USB30 needs to be enabled for this target.\n&quot;);</span><br><span class="line">		ASSERT(0);</span><br><span class="line">#endif</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		/* initialize udc functions to use the default chipidea controller */</span><br><span class="line">		usb_if.udc_init            = udc_init;</span><br><span class="line">		usb_if.udc_register_gadget = udc_register_gadget;</span><br><span class="line">		usb_if.udc_start           = udc_start;</span><br><span class="line">		usb_if.udc_stop            = udc_stop;</span><br><span class="line"></span><br><span class="line">		usb_if.udc_endpoint_alloc  = udc_endpoint_alloc;</span><br><span class="line">		usb_if.udc_request_alloc   = udc_request_alloc;</span><br><span class="line">		usb_if.udc_request_free    = udc_request_free;</span><br><span class="line"></span><br><span class="line">		usb_if.usb_read            = hsusb_usb_read;</span><br><span class="line">		usb_if.usb_write           = hsusb_usb_write;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/* register udc device */</span><br><span class="line">	usb_if.udc_init(&amp;surf_udc_device);</span><br><span class="line"></span><br><span class="line">	event_init(&amp;usb_online, 0, EVENT_FLAG_AUTOUNSIGNAL);</span><br><span class="line">	event_init(&amp;txn_done, 0, EVENT_FLAG_AUTOUNSIGNAL);</span><br><span class="line"></span><br><span class="line">	in = usb_if.udc_endpoint_alloc(UDC_TYPE_BULK_IN, 512);</span><br><span class="line">	if (!in)</span><br><span class="line">		goto fail_alloc_in;</span><br><span class="line">	out = usb_if.udc_endpoint_alloc(UDC_TYPE_BULK_OUT, 512);</span><br><span class="line">	if (!out)</span><br><span class="line">		goto fail_alloc_out;</span><br><span class="line"></span><br><span class="line">	fastboot_endpoints[0] = in;</span><br><span class="line">	fastboot_endpoints[1] = out;</span><br><span class="line"></span><br><span class="line">	req = usb_if.udc_request_alloc();</span><br><span class="line">	if (!req)</span><br><span class="line">		goto fail_alloc_req;</span><br><span class="line"></span><br><span class="line">	/* register gadget */</span><br><span class="line">	if (usb_if.udc_register_gadget(&amp;fastboot_gadget))</span><br><span class="line">		goto fail_udc_register;</span><br><span class="line"></span><br><span class="line">	fastboot_register(&quot;getvar:&quot;, cmd_getvar);</span><br><span class="line">	fastboot_register(&quot;download:&quot;, cmd_download);</span><br><span class="line">	fastboot_publish(&quot;version&quot;, &quot;0.5&quot;);</span><br><span class="line"></span><br><span class="line">	thr = thread_create(&quot;fastboot&quot;, fastboot_handler, 0, DEFAULT_PRIORITY, 4096);</span><br><span class="line">	if (!thr)</span><br><span class="line">	&#123;</span><br><span class="line">		goto fail_alloc_in;</span><br><span class="line">	&#125;</span><br><span class="line">	thread_resume(thr);</span><br><span class="line"></span><br><span class="line">	usb_if.udc_start();</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line"></span><br><span class="line">fail_udc_register:</span><br><span class="line">	usb_if.udc_request_free(req);</span><br><span class="line">fail_alloc_req:</span><br><span class="line">	usb_if.udc_endpoint_free(out);</span><br><span class="line">fail_alloc_out:</span><br><span class="line">	usb_if.udc_endpoint_free(in);</span><br><span class="line">fail_alloc_in:</span><br><span class="line">	return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fastboot_init()主要工作是初始化usb_controller_interface,然后调用usb_if.udc_start()监听usb event,在新建线程等待usb event并调用fastboot_handler处理。fastboot_init后display_fastboot_menu_thread()将会在新线程中被调用,即用来在LCD上显示fastboot菜单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static int fastboot_handler(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">	for (;;) &#123;</span><br><span class="line">		event_wait(&amp;usb_online);</span><br><span class="line">		fastboot_command_loop();</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fastboot_handler中等待usb事件，通过usb_if.usb_read()读取usb数据，并检索出对应cmdlist里的命令调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">static void fastboot_command_loop(void)</span><br><span class="line">&#123;</span><br><span class="line">	struct fastboot_cmd *cmd;</span><br><span class="line">	int r;</span><br><span class="line">#if CHECK_BAT_VOLTAGE</span><br><span class="line">	boolean is_first_erase_flash = false;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">	dprintf(INFO,&quot;fastboot: processing commands\n&quot;);</span><br><span class="line"></span><br><span class="line">	uint8_t *buffer = (uint8_t *)memalign(CACHE_LINE, ROUNDUP(4096, CACHE_LINE));</span><br><span class="line">	if (!buffer)</span><br><span class="line">	&#123;</span><br><span class="line">		dprintf(CRITICAL, &quot;Could not allocate memory for fastboot buffer\n.&quot;);</span><br><span class="line">		ASSERT(0);</span><br><span class="line">	&#125;</span><br><span class="line">again:</span><br><span class="line">	while (fastboot_state != STATE_ERROR) &#123;</span><br><span class="line"></span><br><span class="line">		/* Read buffer must be cleared first. If buffer is not cleared,</span><br><span class="line">		 * the original data in buf trailing the received command is</span><br><span class="line">		 * interpreted as part of the command.</span><br><span class="line">		 */</span><br><span class="line">		memset(buffer, 0, MAX_RSP_SIZE);</span><br><span class="line">		arch_clean_invalidate_cache_range((addr_t) buffer, MAX_RSP_SIZE);</span><br><span class="line"></span><br><span class="line">		r = usb_if.usb_read(buffer, MAX_RSP_SIZE);</span><br><span class="line">		if (r &lt; 0) break;</span><br><span class="line">		buffer[r] = 0;</span><br><span class="line">		dprintf(INFO,&quot;fastboot: %s\n&quot;, buffer);</span><br><span class="line"></span><br><span class="line">#if CHECK_BAT_VOLTAGE</span><br><span class="line">		/* check battery voltage before erase or flash image */</span><br><span class="line">		if (!strncmp((const char*) buffer, &quot;getvar:partition-type&quot;, 21))</span><br><span class="line">			is_first_erase_flash = true;</span><br><span class="line"></span><br><span class="line">		if (is_first_erase_flash) &#123;</span><br><span class="line">			if (!strncmp((const char*) buffer, &quot;erase&quot;, 5) ||</span><br><span class="line">				!strncmp((const char*) buffer, &quot;flash&quot;, 5)) &#123;</span><br><span class="line">				if (!target_battery_soc_ok()) &#123;</span><br><span class="line">					dprintf(INFO,&quot;fastboot: battery voltage: %d\n&quot;,</span><br><span class="line">						target_get_battery_voltage());</span><br><span class="line">					fastboot_fail(&quot;Warning: battery&apos;s capacity is very low\n&quot;);</span><br><span class="line">					return;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">		fastboot_state = STATE_COMMAND;</span><br><span class="line"></span><br><span class="line">		for (cmd = cmdlist; cmd; cmd = cmd-&gt;next) &#123;</span><br><span class="line">			if (memcmp(buffer, cmd-&gt;prefix, cmd-&gt;prefix_len))</span><br><span class="line">				continue;</span><br><span class="line">			cmd-&gt;handle((const char*) buffer + cmd-&gt;prefix_len,</span><br><span class="line">				    (void*) download_base, download_size);</span><br><span class="line">			if (fastboot_state == STATE_COMMAND)</span><br><span class="line">				fastboot_fail(&quot;unknown reason&quot;);</span><br><span class="line"></span><br><span class="line">#if CHECK_BAT_VOLTAGE</span><br><span class="line">			if (!strncmp((const char*) buffer, &quot;erase&quot;, 5) ||</span><br><span class="line">				!strncmp((const char*) buffer, &quot;flash&quot;, 5)) &#123;</span><br><span class="line">				if (is_first_erase_flash) &#123;</span><br><span class="line">					is_first_erase_flash = false;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">#endif</span><br><span class="line">			goto again;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		fastboot_fail(&quot;unknown command&quot;);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	fastboot_state = STATE_OFFLINE;</span><br><span class="line">	dprintf(INFO,&quot;fastboot: oops!\n&quot;);</span><br><span class="line">	free(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Device-tree"><a href="#Device-tree" class="headerlink" title="Device tree"></a>Device tree</h1><p>Device tree是描述设备硬件信息的数据结构，通过.dts源文件定义，一般位于kernel/arch/arm/boot/dts目录下, .dts编译生成.dtb文件后将LK传递给kernel执行设备初始化工作。</p>
<p><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/android/device_tree.png?raw=true" alt="Device Tree"><br></div><br>关于Device Tree参考宋宝华老师的博文 <a href="http://blog.csdn.net/21cnbao/article/details/8457546" target="_blank" rel="external">ARM Linux 3.x的设备树（Device Tree）</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之抓包]]></title>
      <url>http://robinheztto.com/2016/01/05/android-tools-tcpdump/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>在实际开发中，如果需要在Android平台上进行网络数据包的抓取，那么使用tcpdump是非常方便的.通过tcpdump抓取数据包，pull到本地后可以利用Wireshark非常直观地分析数据包</p>
</blockquote>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>Root Android设备</li>
<li>下载安装<a href="https://www.wireshark.org/#download" target="_blank" rel="external">Wireshark</a></li>
<li>下载<a href="http://www.androidtcpdump.com/android-tcpdump/downloads" target="_blank" rel="external">Android tcpdump binary文件</a></li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li><code>adb root</code></li>
<li><code>adb remount</code></li>
<li><code>adb push tcpdump /system/bin</code></li>
<li><code>chmod 6755 /system/bin/tcpdump</code></li>
<li><code>tcpdump -i any -p -s 0 -w /sdcard/capture.pcap</code></li>
<li><code>adb pull /sdcard/capture.pcap</code></li>
<li>Wireshark分析capture.pcap数据包</li>
</ol>
<h1 id="tcpdump参数"><a href="#tcpdump参数" class="headerlink" title="tcpdump参数"></a>tcpdump参数</h1><ol>
<li>-i<br>监视指定网络接口的数据包，可通过tcpdump -D查看可抓包的网卡</li>
<li>-p<br>一般情况下,把网络接口设置为非’混杂’模式.但必须注意,在特殊情况下此网络接口还是会以’混杂’模式来工作；从而,’-p’的设与不设,不能当做以下选现的代名词:’ether host {local-hw-add}’或’ether broadcast’(nt: 前者表示只匹配以太网地址为host 的包, 后者表示匹配以太网地址为广播地址的数据包).</li>
<li>-s<br>抓取数据包时默认抓取长度为68字节,-S 0指定可以抓到完整的数据包</li>
<li>-w<br>保存成pacp/cap文件，供Wireshark分析</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.androidtcpdump.com/" target="_blank" rel="external">Android tcpdump</a></li>
<li><a href="http://www.tcpdump.org/" target="_blank" rel="external">tcpdump.org</a></li>
<li><a href="https://www.wireshark.org/" target="_blank" rel="external">Wireshark</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之开发环境搭建]]></title>
      <url>http://robinheztto.com/2016/01/01/android-env/</url>
      <content type="html"><![CDATA[<hr>
<h1 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h1><p>Google推荐使用64位Ubuntu操作系统开发Android，针对不同的Android版本，推荐使用相对应的Ubuntu版本。</p>
<ul>
<li>Android 6.0 (Marshmallow) - AOSP master: Ubuntu 14.04 (Trusty)    </li>
<li>Android 2.3.x (Gingerbread) - Android 5.x (Lollipop): Ubuntu 12.04 (Precise)   </li>
<li>Android 1.5 (Cupcake) - Android 2.2.x (Froyo): Ubuntu 10.04 (Lucid)   </li>
</ul>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p><strong> 安装jdk: </strong><br>Android 5.0版本前使用的是Oracle的JDK，5.0及以后的版本使用的是OpenJDK.</p>
<ul>
<li>The master branch of Android in AOSP: Ubuntu - OpenJDK 8</li>
<li>Android 5.x (Lollipop) - Android 6.0 (Marshmallow): OpenJDK 7</li>
<li>Android 2.3.x (Gingerbread) - Android 4.4.x (KitKat):Java JDK 6</li>
<li>Android 1.5 (Cupcake) - Android 2.2.x (Froyo): Java JDK 5   </li>
</ul>
<p>OpenJdk8安装：</p>
<ul>
<li><p>Ubuntu15.04及以上版本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
</li>
<li><p>Ubuntu14.04:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:openjdk-r/ppa</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于安装的多个版本JDK,可使用以下命令指定   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-alternatives --config java   </span><br><span class="line">$ sudo update-alternatives --config javac</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong> 安装编译相关开发包: </strong></p>
<ul>
<li><p>Ubuntu14.04:  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git-core gnupg flex bison gperf build-essential \</span><br><span class="line">  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \</span><br><span class="line">  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \</span><br><span class="line">  libgl1-mesa-dev libxml2-utils xsltproc unzip</span><br></pre></td></tr></table></figure>
</li>
<li><p>Ubuntu12.02:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git gnupg flex bison gperf build-essential \</span><br><span class="line">  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \</span><br><span class="line">  libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \</span><br><span class="line">  libgl1-mesa-dev g++-multilib mingw32 tofrodos \</span><br><span class="line">  python-markdown libxml2-utils xsltproc zlib1g-dev:i386</span><br><span class="line">$ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong> 开发工具安装: </strong>  </p>
<ol>
<li>下载<a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">Android studio</a></li>
<li>安装Android SDK</li>
</ol>
<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p><strong> Android源码下载: </strong>  </p>
<table>
<thead>
<tr>
<th>Code name</th>
<th>Version</th>
<th>API level</th>
</tr>
</thead>
<tbody>
<tr>
<td>Nougat</td>
<td>7.1</td>
<td>API level 25</td>
</tr>
<tr>
<td>Nougat</td>
<td>7.0</td>
<td>API level 24</td>
</tr>
<tr>
<td>Marshmallow</td>
<td>6.0</td>
<td>API level 23</td>
</tr>
<tr>
<td>Lollipop</td>
<td>5.1</td>
<td>API level 22</td>
</tr>
<tr>
<td>Lollipop</td>
<td>5.0</td>
<td>API level 21</td>
</tr>
<tr>
<td>KitKat</td>
<td>4.4 - 4.4.4</td>
<td>API level 19</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.3.x</td>
<td>API level 18</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.2.x</td>
<td>API level 17</td>
</tr>
<tr>
<td>Jelly Bean</td>
<td>4.1.x</td>
<td>API level 16</td>
</tr>
<tr>
<td>Ice Cream Sandwich</td>
<td>4.0.3 - 4.0.4</td>
<td>API level 15, NDK 8</td>
</tr>
<tr>
<td>Ice Cream Sandwich</td>
<td>4.0.1 - 4.0.2</td>
<td>API level 14, NDK 7</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.2.x</td>
<td>API level 13</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.1</td>
<td>API level 12, NDK 6</td>
</tr>
<tr>
<td>Honeycomb</td>
<td>3.0</td>
<td>API level 11</td>
</tr>
<tr>
<td>Gingerbread</td>
<td>2.3.3 - 2.3.7</td>
<td>API level 10</td>
</tr>
<tr>
<td>Gingerbread</td>
<td>2.3 - 2.3.2</td>
<td>API level 9, NDK 5</td>
</tr>
<tr>
<td>Froyo</td>
<td>2.2.x</td>
<td>API level 8, NDK 4</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.1</td>
<td>API level 7, NDK 3</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.0.1</td>
<td>API level 6</td>
</tr>
<tr>
<td>Eclair</td>
<td>2.0</td>
<td>API level 5</td>
</tr>
<tr>
<td>Donut</td>
<td>1.6</td>
<td>API level 4, NDK 2</td>
</tr>
<tr>
<td>Cupcake</td>
<td>1.5</td>
<td>API level 3, NDK 1</td>
</tr>
<tr>
<td>(no code name)</td>
<td>1.1</td>
<td>API level 2</td>
</tr>
<tr>
<td>(no code name)</td>
<td>1.0</td>
<td>API level 1</td>
</tr>
</tbody>
</table>
<p>安装repo<br>repo是Google开发的一个脚本,在git上进行封装,用来简化git下载Android源码的过程.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/bin    </span><br><span class="line">$ PATH=~/bin:$PATH   </span><br><span class="line">$ curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo   </span><br><span class="line">$ chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure></p>
<p>repo下载源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">$ mkdir WORKING_DIRECTORY</span><br><span class="line">$ cd WORKING_DIRECTORY</span><br></pre></td></tr></table></figure></p>
<p>默认下载master分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo init -u https://android.googlesource.com/platform/manifest</span><br></pre></td></tr></table></figure></p>
<p>或者指定分支下载,<a href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds" target="_blank" rel="external">查看branch list</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo init -u https://android.googlesource.com/platform/manifest -b android-7.1.1_r1</span><br></pre></td></tr></table></figure></p>
<p>下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ repo sync -j8</span><br></pre></td></tr></table></figure></p>
<p><strong> Kernel源码下载:   </strong><br>虽然Android源码是通用的,但是每个平台kernel源码都有较大的差异,同时Android源码跟Kernel源码也是分开管理的.kernel源码可以通过一下命令获取.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://android.googlesource.com/kernel/common.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/hikey-linaro</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/x86_64.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/exynos.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/goldfish.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/msm.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/omap.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/samsung.git</span><br><span class="line">$ git clone https://android.googlesource.com/kernel/tegra.git</span><br></pre></td></tr></table></figure></p>
<p>其中goldfish.git是qemu虚拟机的内核代码库.下面是Google设备型号,kernel位置及源码仓库对应表  </p>
<table>
<thead>
<tr>
<th>Device</th>
<th>Binarry location</th>
<th>Source location</th>
<th>Build configuration</th>
</tr>
</thead>
<tbody>
<tr>
<td>hikey</td>
<td>device/linaro/hikey-kernel</td>
<td>kernel/hikey-linaro</td>
<td>hikey_defconfig</td>
</tr>
<tr>
<td>angler</td>
<td>device/huawei/angler-kernel</td>
<td>kernel/msm</td>
<td>angler_defconfig</td>
</tr>
<tr>
<td>bullhead</td>
<td>device/lge/bullhead-kernel</td>
<td>kernel/msm</td>
<td>bullhead_defconfig</td>
</tr>
<tr>
<td>shamu</td>
<td>device/moto/shamu-kernel</td>
<td>kernel/msm</td>
<td>shamu_defconfig</td>
</tr>
<tr>
<td>fugu</td>
<td>device/asus/fugu-kernel</td>
<td>kernel/x86_64</td>
<td>fugu_defconfig</td>
</tr>
<tr>
<td>volantis</td>
<td>device/htc/flounder-kernel</td>
<td>kernel/tegra</td>
<td>flounder_defconfig</td>
</tr>
<tr>
<td>hammerhead</td>
<td>device/lge/hammerhead-kernel</td>
<td>kernel/msm</td>
<td>hammerhead_defconfig</td>
</tr>
<tr>
<td>flo</td>
<td>device/asus/flo-kernel/kernel</td>
<td>kernel/msm</td>
<td>flo_defconfig</td>
</tr>
<tr>
<td>deb</td>
<td>device/asus/flo-kernel/kernel</td>
<td>kernel/msm</td>
<td>flo_defconfig</td>
</tr>
<tr>
<td>manta</td>
<td>device/samsung/manta/kernel</td>
<td>kernel/exynos</td>
<td>manta_defconfig</td>
</tr>
<tr>
<td>mako</td>
<td>device/lge/mako-kernel/kernel</td>
<td>kernel/msm</td>
<td>mako_defconfig</td>
</tr>
<tr>
<td>grouper</td>
<td>device/asus/grouper/kernel</td>
<td>kernel/tegra</td>
<td>tegra3_android_defconfig</td>
</tr>
<tr>
<td>tilapia</td>
<td>device/asus/grouper/kernel</td>
<td>kernel/tegra</td>
<td>tegra3_android_defconfig</td>
</tr>
<tr>
<td>maguro</td>
<td>device/samsung/tuna/kernel</td>
<td>kernel/omap</td>
<td>tuna_defconfig</td>
</tr>
<tr>
<td>toro</td>
<td>device/samsung/tuna/kernel</td>
<td>kernel/omap</td>
<td>tuna_defconfig</td>
</tr>
<tr>
<td>panda</td>
<td>device/ti/panda/kernel</td>
<td>kernel/omap</td>
<td>panda_defconfig</td>
</tr>
<tr>
<td>stingray</td>
<td>device/moto/wingray/kernel</td>
<td>kernel/tegra</td>
<td>stingray_defconfig</td>
</tr>
<tr>
<td>wingray</td>
<td>device/moto/wingray/kernel</td>
<td>kernel/tegra</td>
<td>stingray_defconfig</td>
</tr>
<tr>
<td>crespo</td>
<td>device/samsung/crespo/kernel</td>
<td>kernel/samsung</td>
<td>herring_defconfig</td>
</tr>
<tr>
<td>crespo4g</td>
<td>device/samsung/crespo/kernel</td>
<td>kernel/samsung</td>
<td>herring_defconfig</td>
</tr>
</tbody>
</table>
<h1 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h1><ol>
<li><code>$ source build/envsetup.sh</code></li>
<li><code>$ lunch aosp_arm-eng</code></li>
<li><code>$ make -j8 2&gt;&amp;1 | tee build.log</code></li>
</ol>
<p>Android Studio导入源码：<br><code>$ make idegen &amp;&amp; development/tools/idegen/idegen.sh</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://source.android.com/source/index.html" target="_blank" rel="external">The Android Source Code</a></li>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a></li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JNI基础]]></title>
      <url>http://robinheztto.com/2015/11/06/jni-basis/</url>
      <content type="html"><![CDATA[<p>$ gcc -shared -fPIC -I /usr/lib/jvm/java-8-openjdk-amd64/include/ -I /usr/lib/jvm/java-8-openjdk-amd64/include/linux hellojni.c -o libHelloJni.so<br>$ java -Djava.library.path=. HelloJni</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下使用rsync进行数据同步备份]]></title>
      <url>http://robinheztto.com/2015/08/19/ubuntu-rsync/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>rsync是remote sync的简称,它是一款类unix系统下数据同步备份,增量文件快速传输的工具.rsync采用”rsync算法”,不仅能为client和server的提供文件快速同步,并且能够对整个目录树/文件系统进行同步备份.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>默认情况Ubuntu已经安装了rsync服务,如果没有安装也可通过<code>apt-get</code>安装.<br><code>$ sudo apt-get install rsync</code></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>安装完毕后,rsync并没有默认创建rsync的配置文件,但有提供示例配置文件<code>/usr/share/doc/rsync/examples/rsyncd.conf</code>,可以参考示例文件进行配置．<br>rsync需配置以下二个文件：</p>
<ul>
<li>rsyncd.conf　rsync配置</li>
<li>rsyncd.secrets　rsync用户密码</li>
</ul>
<p>设置rsync账号密码<br><code>$ sudo vi /etc/rsyncd.secrets</code><br>按下面格式编辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user1:password1</span><br><span class="line">user2:password2</span><br></pre></td></tr></table></figure></p>
<p>然后修改权限<code>$ sudo chmod 600 /etc/rsyncd.secrets</code></p>
<p>拷贝示例配置文件rsyncd.conf到/etc/下,然后再进行相关配置.<br><code>$ sudo cp /usr/share/doc/rsync/examples/rsyncd.conf /etc/</code><br>下面是server端rsyncd.conf的相关配置,分为GLOBAL OPTIONS与MODULE OPTIONS.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># GLOBAL OPTIONS</span><br><span class="line"></span><br><span class="line">pid file=/var/run/rsyncd.pid</span><br><span class="line"></span><br><span class="line">#port = 873</span><br><span class="line">address = 10.129.33.241</span><br><span class="line"></span><br><span class="line">#uid = nobody</span><br><span class="line">#gid = nobody    </span><br><span class="line">uid = root   </span><br><span class="line">gid = root  </span><br><span class="line">use chroot = yes</span><br><span class="line">read only = yes  </span><br><span class="line"></span><br><span class="line">motd file=/etc/motd</span><br><span class="line">log file=/var/log/rsyncd</span><br><span class="line"></span><br><span class="line">max connections=10</span><br><span class="line">timeout = 600</span><br><span class="line"></span><br><span class="line">log format = %t %a %m %f %b</span><br><span class="line"></span><br><span class="line"># MODULE OPTIONS</span><br><span class="line">[backup]</span><br><span class="line">	comment = release backup</span><br><span class="line">	path = /home/ftp/Monster-Release/</span><br><span class="line">	lock file = /var/lock/rsyncd</span><br><span class="line">	list = yes</span><br><span class="line">#	exclude =</span><br><span class="line">#	exclude from =</span><br><span class="line">#	include =</span><br><span class="line">#	include from =</span><br><span class="line">	auth users = rsyncmonster</span><br><span class="line">	secrets file = /etc/rsyncd.secrets</span><br><span class="line">#	strict modes = yes</span><br><span class="line">#	hosts allow =</span><br><span class="line">#	hosts deny =</span><br><span class="line">	ignore errors</span><br><span class="line">	ignore nonreadable = yes</span><br><span class="line">	transfer logging = no</span><br><span class="line">#	log format = %t: host %h (%a) %o %f (%l bytes). Total %b bytes.</span><br><span class="line">	refuse options = checksum dry-run</span><br><span class="line">	dont compress = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz</span><br></pre></td></tr></table></figure></p>
<p>全局配置说明:</p>
<ul>
<li>pid file=/var/run/rsyncd.pid 进程pid写入到文件/var/run/rsyncd.pid</li>
<li>address = 10.129.33.241 本机IP地址</li>
<li>port = 873  指定运行端口，默认873</li>
<li>uid = root 执行的用户</li>
<li>gid = root 执行的用户组</li>
<li>motd file=/etc/motd 服务器登陆信息,login时显示</li>
<li>log file=/var/log/rsyncd log文件</li>
<li>max connections=10 最大连接数</li>
<li>timeout = 600 连接超时</li>
<li>log format = %t %a %m %f %b log格式</li>
<li>ignore errors 忽略IO错误</li>
</ul>
<p>模块配置说明:</p>
<ul>
<li>comment = release backup 描述</li>
<li>path = /home/ftp/Monster-Release/ 同步备份目标的路径</li>
<li>list = yes 把rsync服务器上配置显示出来</li>
<li>auth users = user1 取rsyncd.secrets中定义的user</li>
<li>secrets file = /etc/rsyncd.secrets</li>
</ul>
<p>由于是以uid = root运行,使用<code>$ sudo rsync --daemon</code>启动rsync服务</p>
<p>修改conf文件重启rsync步骤:<br><code>$ ps -ef | grep rsync</code>查看rsync进程<br><code>$ sudo kill ${rsyncpid}</code><br><code>$ sudo rsync --daemon</code></p>
<p>server端配置完成后,可在client端进行同步备份操作,同样client也需安装rsync.<br>列出服务端配置的module: <code>rsync --list-only  user@10.129.33.241::</code><br>同步备份: <code>rsync -vzrtopg --progress user@10.129.33.241::backup backupdir</code><br>-v: -verbose，即详细模式输出<br>-z: –compress 即对备份的文件在传输时进行压缩处理<br>-r: –recursive 以递归模式处理<br>-t: –times 保持文件时间信息<br>-o: –owner 保持文件owner信息<br>-p: –perms用来保持文件权限<br>-g: –group用来保持文件group信息</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://rsync.samba.org/" target="_blank" rel="external">http://rsync.samba.org/</a></li>
<li><a href="https://help.ubuntu.com/community/rsync" target="_blank" rel="external">https://help.ubuntu.com/community/rsync</a></li>
<li><a href="http://blog.chinaunix.net/uid-25266990-id-114684.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-25266990-id-114684.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 14.04 Nexus Maven私服搭建]]></title>
      <url>http://robinheztto.com/2015/08/03/ubuntu-nexus-maven/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Maven是Apache基于POM(project object model)一个项目管理工具.Maven能够管理项目的构建build,reporting和documentation.</p>
<p>Nexus是一个强大的Maven仓库管理器，它极大地简化了内部仓库的维护和外部仓库的访问，可以在局域网搭建一个maven私服,用来部署第三方公共构件或者作为远程仓库在该局域网的一个代理.</p>
</blockquote>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><ol>
<li><p>下载<br>我们使用Nexus OSS开源版开源版进行环境搭建，<a href="http://www.sonatype.com/download-oss-sonatype" target="_blank" rel="external">官网下载</a> All platform的版本<a href="https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.13.0-01-bundle.tar.gz" target="_blank" rel="external">nexus-2.13.0-01-bundle.tar.gz</a></p>
</li>
<li><p>安装<br><code>$ sudo cp nexus-2.13.0-01-bundle.tar.gz /usr/local</code><br><code>$ cd /usr/local</code><br><code>$ sudo tar -zxvf nexus-2.13.0-01-bundle.tar.gz</code><br><code>$ sudo ln -s nexus-2.13.0-01 nexus</code><br><code>$ sudo nexus/bin/nexus</code><br>输出：<code>Usage: nexus/bin/nexus { console | start | stop | restart | status | dump }</code>　即表示安装成功<br><code>$ sudo vim bin/nexus</code> 修改<code>#RUN_AS_USER=</code>为<code>RUN_AS_USER=root</code><br><code>$ sudo bin/nexus start</code>启动nexus<br>浏览器登陆<a href="http://localhost:8081/nexus，默认用户名:admin，密码:admin123" target="_blank" rel="external">http://localhost:8081/nexus，默认用户名:admin，密码:admin123</a><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/ubuntu/nexus-welcome.png?raw=true" alt="nexus welcome"></p>
</li>
<li>设置开机启动：<br><code>$ sudo cp /usr/local/nexus/bin/nexus /etc/init.d/</code><br><code>$ sudo vim /etc/init.d/nexus</code><br>设置<br><code>NEXUS_HOME=&quot;/usr/local/nexus&quot;</code><br><code>RUN_AS_USER=root</code><br><code>PIDDIR=&quot;/var/run&quot;</code></li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li>Repositories配置</li>
</ol>
<p><a href="http://blog.csdn.net/l2show/article/details/48653949" target="_blank" rel="external">http://blog.csdn.net/l2show/article/details/48653949</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04 FTP服务器搭建]]></title>
      <url>http://robinheztto.com/2015/06/06/ubuntu-ftp/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>vsftpd 是“very secure FTP daemon”的缩写，它是一款在Linux发行版中最受推崇的FTP服务器程序，安全性是它的一个最大的特点.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>安装： <code>sudo apt-get install vsftpd</code>    </li>
<li>创建FTP账户： <code>sudo useradd -g ftp -s /sbin/nologin -d /home/ftp_directory ftpuser</code></li>
<li>设置账户密码： <code>sudo passwd ftpuser</code>   </li>
<li>重启服务： <code>sudo service vsftpd restart</code></li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li><p>备份<br>vsftpd的配置文件位于/etc/vsftpd.conf，修改之前先备份配置文件<br><code>sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.bak</code>    </p>
</li>
<li><p>目录限制<br>默认情况下，用户登陆FTP后，是可以切换到根目录以外的主机其他目录，为了加以限制，可做如下配置：<br><code>chroot_list_enable=YES</code><br><code>chroot_list_file=/etc/vsftpd.chroot_list</code><br>然后设置chroot_local_user，有以下二种设置<br>设置<code>chroot_local_user＝YES</code>表示/etc/vsftpd.chroot_list文件中用户不能chroot，其他用户可以<br>设置<code>chroot_local_user=NO</code>表示/etc/vsftpd.chroot_list中用户可以chroot，其他用户不行<br>创建vsftpd.chroot_list，写入需控制chroot的用户<br><code>sudo touch /etc/vsftpd.chroot_list</code>  </p>
</li>
<li><p>写权限<br><code>write_enable=YES</code><br>如果开启了chroot来控制用户路径，则用户不再具有该用户根目录的写的权限<br>需设置<code>allow_writeable_chroot=YES</code>  </p>
</li>
<li><p>530 Login incorrect<br>如果在登陆时返回530 Login incorrect.<br>修改<br><code>pam_service_name=vsftpd</code><br>为<br><code>pam_service_name=ftp</code>  </p>
</li>
<li><p>相关配置参数<br>（1）ftpd_banner=welcome to ftp service ：设置连接服务器后的欢迎信息<br>（2）idle_session_timeout=60 ：限制远程的客户机连接后，所建立的控制连接，在多长时间没有做任何的操作就会中断(秒)<br>（3）data_connection_timeout=120 ：设置客户机在进行数据传输时,设置空闲的数据中断时间<br>（4）accept_timeout=60 设置在多长时间后自动建立连接<br>（5）connect_timeout=60 设置数据连接的最大激活时间，多长时间断开，为别人所使用<br>（6）max_clients=200 指明服务器总的客户并发连接数为200<br>（7）max_per_ip=3 指明每个客户机的最大连接数为3<br>（8）local_max_rate=50000(50kbytes/sec) 本地用户最大传输速率限制<br>（9）anon_max_rate=30000匿名用户的最大传输速率限制<br>（10）pasv_min_port=端口<br>（11）pasv-max-prot=端口号 定义最大与最小端口，为0表示任意端口;为客户端连接指明端口<br>（12）listen_address=IP地址 设置ftp服务来监听的地址，客户端可以用哪个地址来连接<br>（13）listen_port=端口号 设置FTP工作的端口号，默认的为21<br>（14）chroot_local_user=YES 设置所有的本地用户可以chroot<br>（15）chroot_local_user=NO 设置指定用户能够chroot<br>（16）chroot_list_enable=YES<br>（17）chroot_list_file=/etc/vsftpd/chroot_list(只有/etc/vsftpd/chroot_list中的指定的用户才能执行 )<br>（18）local_root=path 无论哪个用户都能登录的用户，定义登录帐号的主目录, 若没有指定，则每一个用户则进入到个人用户主目录<br>（19）chroot_local_user=yes/no 是否锁定本地系统帐号用户主目录(所有);锁定后，用户只能访问用户的主目录/home/user,不能利用cd命令向上转;只能向下<br>（20）chroot_list_enable=yes/no 锁定指定文件中用户的主目录(部分),文件：/chroot_list_file=path 中指定;<br>（21）userlist_enable=YES/NO 是否加载用户列表文件<br>（22）userlist_deny=YES 表示上面所加载的用户是否允许拒绝登录<br>（23）userlist_file=/etc/vsftpd/user_list 列表文件   </p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git操作总结]]></title>
      <url>http://robinheztto.com/2015/05/23/git-operate/</url>
      <content type="html"><![CDATA[<hr>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ol>
<li><p>配置<br>Usage: git config –global|–system|–local|–list<br><code>$ git config --global user.name [username]</code><br><code>$ git config --global user.email [email]</code><br><code>$ git config --global color.ui true</code></p>
</li>
<li><p>初始化版本库<br><code>$ git init</code></p>
</li>
<li><p>暂存<br><code>$ git add .</code><br><code>$ git add -u</code>   暂存已跟踪文件<br><code>$ git add -A</code>   跟踪文件并暂存<br><code>$ git add -p</code>   选择性暂存文件</p>
</li>
<li><p>状态查看<br><code>$ git status</code><br><code>$ git status -s</code> 精简显示   </p>
</li>
<li><p>比较<br>工作区与暂存区比较:<br><code>$ git diff</code><br>暂存区与HEAD(版本库当前分支)比较:<br><code>$ git diff --staged</code><br>工作,暂存区(未提交修改)与HEAD(版本库当前分支)比较:<br><code>$ git diff HEAD</code></p>
</li>
<li><p>撤销<br>撤销工作区修改:<br><code>$ git checkout .</code><br>该命令会将暂存区全部文件或指定文件替换工作区对应文件<br><code>$ git checkout -- &lt;file&gt;</code>   </p>
<p>撤销工作区,暂存区修改:<br><code>$ git checkout HEAD .</code><br><code>$ git checkout HEAD &lt;file&gt;</code><br>该命令会将HEAD所指向的master分支全部或指定文件替换到工作区,暂存区,</p>
<p>暂存区域撤销:<br><code>$ git reset HEAD</code></p>
</li>
<li><p>移除<br>暂存区移除:<br><code>$ git rm --cached &lt;file&gt;</code>  </p>
</li>
<li><p>日志查看<br><code>git log</code>   </p>
</li>
<li><p>其他</p>
</li>
<li>修改远程仓库url:<br><code>git remote set-url origin new-url</code></li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[remastersys 备份/制作ubuntu副本]]></title>
      <url>http://robinheztto.com/2015/03/18/remastersys-md/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Remastersys是由Tony Brijeski 发起的免费软件项目,可以把已安装的Ubuntu、Debian及其衍生版打包成一个可以用来安装的Live CD/DVD的iso文件.</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>环境: ubuntu14.04</li>
<li>步骤:<br><code>$ wget &quot;https://www.freesoftwareservers.com/wp-content/uploads/2015/12/remastersys-gui.zip&quot; &amp;&amp; unzip remastersys-gui.zip &amp;&amp; cd remastersys-gui</code><br><code>$ sudo dpkg -i *.deb</code><br>如果报错,强制执行安装<br><code>$ echo y | sudo apt-get install -f</code></li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>语法:<br>sudo remastersys backup|clean|dist [cdfs|iso] [filename.iso]<br>Backup：备份整个系统，包括你的个人数据和配置信息<br>Dist：打包整个系统，不包括你的个人数据和配置信息</p>
</li>
<li><p>用例:<br>sudo remastersys backup   (to make a livecd/dvd backup of your system)<br>sudo remastersys backup custom.iso (to make a livecd/dvd backup and call the iso custom.iso)<br>sudo remastersys clean    (to clean up temporary files of remastersys)<br>sudo remastersys dist     (to make a distributable livecd/dvd of your system)<br>sudo remastersys dist cdfs(to make a distributable livecd/dvd filesystem only)<br>sudo remastersys dist iso custom.iso(to make a distributable iso named custom.iso but onlyif the cdfs is already present)   </p>
</li>
<li><p>制作过程<br><code>$ sudo remastersys dist</code><br><img src="http://7xrz32.com1.z0.glb.clouddn.com/remastersys.png" alt="remastersys dist"><br>根据系统打包大小,执行时间在十几分钟到数小时,目标ISO文件生成在home/remastersys/remastersys/下<br>使用ubuntu系统自带工具制作U盘启动盘<br><img src="http://7xrz32.com1.z0.glb.clouddn.com/make.png" alt="make"><br>制作完成,清除生成文件可使用sudo remastersys clean</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://help.ubuntu.com/community/InstallCDCustomization?action=show&amp;redirect=InstallCDCustomizationHowTo" target="_blank" rel="external">https://help.ubuntu.com/community/InstallCDCustomization?action=show&amp;redirect=InstallCDCustomizationHowTo</a>  </li>
<li><a href="https://help.ubuntu.com/community/InstallCDCustomization/Scripts" target="_blank" rel="external">https://help.ubuntu.com/community/InstallCDCustomization/Scripts</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04 OpenJdk8编译]]></title>
      <url>http://robinheztto.com/2014/12/19/java-build-openjdk/</url>
      <content type="html"><![CDATA[<h1 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h1><p>如下图示，选择从官网直接下载的方式，下载地址：<a href="http://download.java.net/openjdk/jdk8/" target="_blank" rel="external">OpenJDK™ Source</a></p>
<div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/java/openjdk-source-download.png?raw=true" alt="OpenJDK™ Source Download"><br></div><br>下载后目录结构如下图示：<br><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/java/openjdk-source-list.png?raw=true" alt="OpenJDK™ Source List"><br></div>

<h1 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><p>编译主要参考源码目录下README及README-builds.html文件，编译前本机已安装openjdk7/8作为Bootstrap JDK。</p>
<ul>
<li>bash ./configure<br>执行configure脚本会检查并配置编译环境，根据执行过程中提示<code>apt-get install</code>安装相应的包直到执行成功为止。执行成功后将输出如下所示的信息：<div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/java/openjdk-build-configure.png?raw=true" alt="OpenJDK™ Source Configure"><br></div></li>
<li>Make<br><code>export LANG=C</code><br><code>make all</code><br>编译output在build/linux-x86_64-normal-server-release下,编译过程中错误解决：<br>This OS is not supported:” <code>uname -a</code>;<br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/java/openjdk-build-os-not-support.png?raw=true" alt="OpenJDK™ Source Configure"><br>解决方法：修改hotspot/make/linux/Makefile在SUPPORTED_OS_VERSION选项加上4%。<code>SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3% 4%</code></li>
<li>Test<br>编译成功后输出如下信息：<div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/java/openjdk-source-build-success.png?raw=true" alt="OpenJDK™ Source Build Result"><br></div><br>测试编译生成java可执行文件：<br><div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/java/openjdk-source-build-test.png?raw=true" alt="OpenJDK™ Source Build Test"><br></div>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Programming in the UNIX Environment]]></title>
      <url>http://robinheztto.com/2013/03/01/programming-in-the-UNIX-environment/</url>
      <content type="html"><![CDATA[<blockquote>
<p>程序：存储在磁盘上的可执行文件。<br>进程：程序的执行实例，包括进程地址空间，系统IO资源等</p>
</blockquote>
<div align="center"><br><img src="https://github.com/XRobinHe/Resource/blob/master/blog/image/others/unix-architecture.png?raw=true" alt="UNIX操作系统体系结构"><br></div>

<h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><blockquote>
<p>进程创建，进程执行，进程终止，进程属性</p>
</blockquote>
<h2 id="进程标志"><a href="#进程标志" class="headerlink" title="进程标志"></a>进程标志</h2><p>每个进程都有一个非负整形值的唯一进程ID，即进程ID。获取相关ID的api如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line"></span><br><span class="line">pid_t getpid(void);//返回调用进程的进程ID</span><br><span class="line">pid_t getppid(void);//返回调用进程的父进程ID</span><br><span class="line"></span><br><span class="line">uid_t getuid(void);//返回调用进程的实际用户ID</span><br><span class="line">uid_t geteuid(void);//返回调用进程的有效用户ID</span><br><span class="line"></span><br><span class="line">gid_t getgid(void);//返回调用进程的实际用户组ID</span><br><span class="line">gid_t getegid(void);//返回调用进程的有效组用户ID</span><br></pre></td></tr></table></figure></p>
<h2 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h2><p>一个现有进程可通过调用fork()创建一个新进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">pid_t fork(void);//子进程返回０，父进程返回子进程ID，出错则返回-1</span><br></pre></td></tr></table></figure></p>
<p>由fork()创建的新进程称为子进程，fork()调用一次返回二次，在父进程中返回子进程ID，在子进程中返回0。在fork()成功后，父子进程的执行顺序是不确定的，取决于调度算法。<br>在执行fork()调用以后，父子进程的内存映像共享(包括数据段/代码段/堆/栈/打开的文件/uid/gid／umask等),只有在子进程修改这些区域时才会为该内存区域创建父进程的副本，即写时复制(Copy-on-Write,COW)。</p>
<h2 id="vfork"><a href="#vfork" class="headerlink" title="vfork()"></a>vfork()</h2><p>vfork()用于创建一个新进程并且保证子进程先运行，只有当子进程调用exec或exit之后父进程才有可能被调度回复运行,如果在调用这两个函数之前子进程依赖于父进程的进一步动作，则会导致死锁。`<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">pid_t vfork(void);</span><br></pre></td></tr></table></figure></p>
<p>vfork与fork另一个重要的区别就是ork要拷贝父进程的进程映像，而vfork在子进程没有调用exec和exit之前，子进程与父进程<strong>共享</strong>进程环境。</p>
<h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>一般在fork出新的子进程后会在子进程中调用exec执行另一个程序。当调用exec函数执行时，进程执行的程序替换为新程序，前后的进程ID并未改变，即exec替换了当前进程的代码段、数据端、堆段、栈段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">extern char **environ;</span><br><span class="line"></span><br><span class="line">int execl(const char *path, const char *arg, ...);</span><br><span class="line">int execlp(const char *file, const char *arg, ...);</span><br><span class="line">int execle(const char *path, const char *arg,</span><br><span class="line">           ..., char * const envp[]);</span><br><span class="line">int execv(const char *path, char *const argv[]);</span><br><span class="line">int execvp(const char *file, char *const argv[]);</span><br><span class="line">int execvpe(const char *file, char *const argv[],</span><br><span class="line">            char *const envp[]);</span><br></pre></td></tr></table></figure></p>
<h2 id="wait-waitpid"><a href="#wait-waitpid" class="headerlink" title="wait/waitpid"></a>wait/waitpid</h2><p>当某个进程异常或正常终止时，内核就向其父进程发送SIGCHLD信号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line"></span><br><span class="line">//返回值，成功返回退出进程的ID，出错返回０或-1</span><br><span class="line"></span><br><span class="line">pid_t wait(int *status);</span><br><span class="line"></span><br><span class="line">pid_t waitpid(pid_t pid, int *status, int options);</span><br></pre></td></tr></table></figure></p>
<p>wait与waitpid的区别如下：</p>
<ul>
<li>调用wait在子进程终止前将阻塞当前进程。</li>
<li>waitpid可选参数可使子进程终止前不阻塞当前进程，并且可控制等待的进程。</li>
</ul>
<p>waitpid()中的pid参数作用如下：<br>pid==-1,等待任一子进程，此时wait与waitpid等效。<br>pid&gt;0，等代进程ID与pid相等进程。<br>pid==0,等待组ID等于调用进程组ID的任一子进程。<br>pid&lt;0,等待组ID等于pid的任一子进程。</p>
<h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><blockquote>
<p>IPC InterProcess Communication.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java语言基础]]></title>
      <url>http://robinheztto.com/2013/01/21/java-basics/</url>
      <content type="html"><![CDATA[<ul>
<li>数据类型</li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:center">长度</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言基础]]></title>
      <url>http://robinheztto.com/2013/01/21/c-basics/</url>
      <content type="html"><![CDATA[<p>＃ 变量/常量</p>
<ul>
<li><p>常量:　字符常量，数字常量，枚举常量</p>
</li>
<li><p>数据类型</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:center">32-bit</th>
<th style="text-align:center">64-bit</th>
</tr>
</thead>
<tbody>
<tr>
<td>char</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:center">4</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
</tr>
</tbody>
</table>
<ul>
<li><p>ASCII编码</p>
</li>
<li><p>关键字<br>static<br>const<br>volatile<br>continue<br>break</p>
</li>
</ul>
<ul>
<li><p>true or false<br>Ｃ语言中，非０表示真，０表示假</p>
</li>
<li><p>const<br>const并不能把变量变为常量，只是通过编译器限定其只读属性。</p>
</li>
</ul>
<p>预处理，编译，汇编，链接，加载</p>
<ul>
<li>链接脚本<br>lds文件，定义链接过程中各代码段的存储顺序<br>链接器对部分地址进行绑定并分配相对地址，加载器完成重定位并赋予实际地址。</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/" target="_blank" rel="external">Linux C编程一站式学习</a></li>
<li>《链接器和加载器》</li>
<li>《C专家编程》</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu ssh git服务搭建]]></title>
      <url>http://robinheztto.com/2012/09/03/ubuntu-ssh-git/</url>
      <content type="html"><![CDATA[<ul>
<li>下载安装git 和 ssh</li>
</ul>
<p>　　$ sudo apt-get install git-core</p>
<p>　　$ sudo apt-get install openssh-server</p>
<p>　　$ sudo apt-get install openssh-client</p>
<ul>
<li>下载安装python setuptools</li>
</ul>
<p>　　$ sudo apt-get install python-setuptools</p>
<p>　　</p>
<ul>
<li>下载安装gitosis</li>
</ul>
<p>　　$ git clone <a href="https://github.com/res0nat0r/gitosis.git" target="_blank" rel="external">https://github.com/res0nat0r/gitosis.git</a></p>
<p>　　$ cd gitosis/</p>
<p>　　$ sudo python setup.py install</p>
<ul>
<li>添加git用户</li>
</ul>
<p>　　$ sudo adduser \<br>　　&gt; –system \<br>　　&gt; –shell /bin/sh \<br>　　&gt; –gecos ‘git version control’ \<br>　　&gt; –group \<br>　　&gt; –disabled-password \<br>　　&gt; –home /home/git \<br>　　&gt; git</p>
<ul>
<li>生成rsa密钥（已有~/.ssh/id_rsa.pub略过此步）</li>
</ul>
<p>　　$ ssh-keygen -t rsa</p>
<ul>
<li>上传密钥（可直接copy至server）</li>
</ul>
<p>　　$ scp ~/.ssh/id_rsa.pub git@127.0.0.1:/tmp   （scp ~/.ssh/id_rsa.pub 用户名@主机:/tmp）</p>
<ul>
<li>初使化gitosis</li>
</ul>
<p>　　$ sudo -H -u git gitosis-init &lt; /tmp/id_rsa.pub</p>
<ul>
<li>修改post-update权限<br>　　$ sudo chmod 755 /home/git/repositories/gitosis-admin.git/hooks/post-update</li>
</ul>
<p>　</p>
<ul>
<li>clone gitosis管理平台</li>
</ul>
<p>　　$ git clone git@127.0.0.1:gitosis-admin.git  （git clone git@主机名:gitosis-admin.git）</p>
<ul>
<li>安装完成<br>　　通过修改gitosis-admin管理gitosis用户权限，添加公密到keydir，添加用户，修改完后commit，push到中服务器即可完成仓库权限的相关操作。</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
