<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生活不止眼前的代码</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://robinheztto.com/"/>
  <updated>2018-06-24T16:24:25.000Z</updated>
  <id>http://robinheztto.com/</id>
  
  <author>
    <name>Robin He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Overview</title>
    <link href="http://robinheztto.com/2200/01/01/android-overview/"/>
    <id>http://robinheztto.com/2200/01/01/android-overview/</id>
    <published>2199-12-31T16:00:00.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Android学习提纲．从底至上．RTFSC．&lt;strong&gt;持续学习中…&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/android_framework_details.png?raw=true&quot; alt=&quot;Android stack&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h1 id=&quot;BootFlow&quot;&gt;&lt;a href=&quot;#BootFlow&quot; class=&quot;headerlink&quot; title=&quot;BootFlow&quot;&gt;&lt;/a&gt;BootFlow&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/01/15/android-lk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之BootFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/01/15/android-lk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之LK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Android之Recovery]&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/02/01/android-init-language/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之Init.rc语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/02/02/android-init/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之Init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/07/01/android-zygote-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之Zygote-启动流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/07/02/android-zygote-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之Zygote-应用进程创建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/11/28/android-systemserver-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之SystemServer启动(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/11/28/android-systemserver-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之SystemServer启动(下)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;PowerManagerment&quot;&gt;&lt;a href=&quot;#PowerManagerment&quot; class=&quot;headerlink&quot; title=&quot;PowerManagerment&quot;&gt;&lt;/a&gt;PowerManagerment&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/04/20/android-power-basic/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/05/01/android-power-system-wakeup-events-framework/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之System wakeup events framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/05/05/android-power-suspend/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之Suspend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/05/20/android-power-libsuspend/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之libsuspend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/06/01/android-power-wakelock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之Wakelock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/06/14/android-power-pms-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之PowerManagerService(一)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/06/16/android-power-pms-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之PowerManagerService(二)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/09/11/android-power-doze-overview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之Doze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/09/13/android-power-doze-light/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之Light Doze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/09/15/android-power-doze-deep/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android电源管理系列之Deep Doze&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Binder&quot;&gt;&lt;a href=&quot;#Binder&quot; class=&quot;headerlink&quot; title=&quot;Binder&quot;&gt;&lt;/a&gt;Binder&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/03/19/android-binder-0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Binder之概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/03/20/android-binder-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Binder之Binder Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/03/25/android-binder-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Binder之Service Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/03/28/android-binder-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Binder之进程间通信库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/03/28/android-binder-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Binder之Service Manager代理对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/04/02/android-binder-5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Binder之Service启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/04/18/android-binder-6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Binder之Service代理获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/04/23/android-binder-7/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Binder之Java接口&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Frameworks&quot;&gt;&lt;a href=&quot;#Frameworks&quot; class=&quot;headerlink&quot; title=&quot;Frameworks&quot;&gt;&lt;/a&gt;Frameworks&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/01/01/android-env/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之Zygote-启动流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/01/01/android-env/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之Zygote-应用进程创建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/02/02/android-init/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之SystemServer启动(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/02/02/android-init/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之SystemServer启动(下)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/03/10/android-alarm-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之AlarmManagerService(一)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/03/11/android-alarm-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之AlarmManagerService(二)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2017/03/12/android-alarm-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之AlarmManagerService(三)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/01/01/android-env/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Debug之系统启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Env-amp-Tools&quot;&gt;&lt;a href=&quot;#Env-amp-Tools&quot; class=&quot;headerlink&quot; title=&quot;Env&amp;amp;Tools&quot;&gt;&lt;/a&gt;Env&amp;amp;Tools&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/01/01/android-env/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之开发环境搭建&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.robinheztto.com/2016/01/05/android-tcpdump/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android之抓包&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://free-electrons.com/pub/conferences/2012/captronic/android/android-captronic.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-captronic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android学习提纲．从底至上．RTFSC．&lt;strong&gt;持续学习中…&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinH
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android#Issue</title>
    <link href="http://robinheztto.com/2100/01/01/android-issue/"/>
    <id>http://robinheztto.com/2100/01/01/android-issue/</id>
    <published>2099-12-31T16:00:00.000Z</published>
    <updated>2016-12-25T12:27:10.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;关于Android N平台java.lang.UnsatisfiedLinkError: dlopen failed的问题&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android N上应用Crash,log上报java.lang.UnsatisfiedLinkError，类似如下的log：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.UnsatisfiedLinkError: dlopen failed: library &amp;quot;libcutils.so&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;quot;/system/lib/libcutils.so&amp;quot;) needed or dlopened by&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;/system/lib/libnativeloader.so&amp;quot; is not accessible for the namespace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;classloader-namespace&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  at java.lang.Runtime.loadLibrary0(Runtime.java:977)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  at java.lang.System.loadLibrary(System.java:1602)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;原因：&lt;br&gt;从Android N开始，系统将阻止应用动态链接非公开NDK库(参考官网描述&lt;a href=&quot;https://developer.android.com/about/versions/nougat/android-7.0-changes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-7.0-changes&lt;/a&gt;)&lt;br&gt;解决：&lt;br&gt;　1. so库打包到apk里面或参考官网解决&lt;br&gt;　2. 添加so到public.libraries.txt白名单.(参考&lt;a href=&quot;http://blog.csdn.net/xiashaohua/article/details/52709630?utm_source=itdadao&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android N : UnsatisfiedLinkError&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;关于绕过默认短信应用限制读写短信的问题&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android 4.4以后，只有默认短信应用才具有读写短信的权限，系统应用比如垃圾短信拦截，一键换机等需要在未设置为默认短信应用的情况下读写短信数据库，可以利用以下代码实现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if ( 19 &amp;gt;= Build.VERSION.SDK_INT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AppOpsManager appOpsManager = (AppOpsManager) sContext.getSystemService(&amp;quot;appops&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        appOpsManager.setMode(15, android.os.Process.myUid(), packageName, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体原理参考&lt;a href=&quot;http://3dobe.com/archives/51/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 权限管理 AppOps&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;关于使用jack编译生成jar包&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jack是Java Android Compiler Kit的缩写，它直接将Java代码直接编译为字节码，不再生成classes.jar等中间文件，而是直接生成了classes.jack文件，需生成classes.jar时，可在Android.mk中添加如下定义：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_JACK_ENABLED=disabled&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jack &amp;amp; Jill参考&lt;a href=&quot;https://yq.aliyun.com/articles/40811&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 新一代编译 toolchain Jack &amp;amp; Jill 简介&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;关于Android Gradle Plugin&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编译android gradle plugin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir studio-master-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd studio-master-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ repo init -u https://android.googlesource.com/platform/manifest -b studio-master-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ repo sync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./gradlew init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./gradlew assemble&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./gradlew publishLocal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;关于gradle不支持不支持msgid同名字符串的问题（由于不是标准Application做法）参考gradle plugin源码：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sdk-common/src/main/java/com/android/ide/common/res2/ValueResourceParser2.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;checkDuplicate() -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else if (set.contains(name) &amp;amp;&amp;amp; resource.getType() != ResourceType.PUBLIC) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				System.out.println(&amp;quot;checkDuplicate ------&amp;gt; &amp;quot; + resource.getType());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                throw MergingException.withMessage(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;quot;Found item %s/%s more than one time&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        resource.getType().getDisplayName(), name).withFile(from).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/android-building/dxP0tp0e1MI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle vs. Make for AOSP build&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://tools.android.com/tech-docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Gradle&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;关于Android N平台java.lang.UnsatisfiedLinkError: dlopen failed的问题&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android N上应用Crash,log上报java.lang.Unsat
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android编译集成之gitolite</title>
    <link href="http://robinheztto.com/2018/06/14/android-ci-gitolite/"/>
    <id>http://robinheztto.com/2018/06/14/android-ci-gitolite/</id>
    <published>2018-06-14T07:01:14.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在Git服务管理领域，主要有三种流行的方案:&lt;br&gt;Gitosis - 轻量级，开源项目，使用SSH公钥认证，只能做到库级的权限控制，目前项目已经停止开发，不再维护。&lt;br&gt;Gitolite - 轻量级，开源项目，使用SSH公钥认证，能做到分支级的权限控制。&lt;br&gt;Git + Repo + Gerrit - 超级重量级，集版本控制，库管理和代码审核为一身，可管理大型及超大型项目。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gitolite是在Git之上的一个授权层，依托sshd或者httpd来进行认证。Gitolite允许你定义访问许可不只作用于仓库，同样可作用于仓库中的每个branch和tag name，可确切定义用户(或一组人)只能push特定的”refs”(或者branches或者tags)。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;Gitolite的安装需要分别在客户端和服务器端操作，搭建Gitolite的步骤如下图所示。&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/ci/gitolite.png?raw=true&quot; alt=&quot;Gitolite&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装openssh&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get -y install  openssh-client&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装git&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成SSH key&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C HF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行命令后，一直按回车键直到SSH key生成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上传SSH public key到服务器&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mv ~/.ssh/id_rsa.pub username.pub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ scp username.pub servername@server:/tmp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;username及server根据实际情况填写。&lt;/p&gt;
&lt;h3 id=&quot;服务器&quot;&gt;&lt;a href=&quot;#服务器&quot; class=&quot;headerlink&quot; title=&quot;服务器&quot;&gt;&lt;/a&gt;服务器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装openssh&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get -y install openssh-server openssh-client&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装git&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get -y install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装gitolite&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get -y install gitolite&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建gitolite用户&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo adduser --system --shell /bin/bash --group --disabled-password --home /home/gitolite gitolite&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo chmod 777 /tmp/username.pub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo su - gitolite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gl-setup /tmp/username.pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面的命令执行作用：&lt;br&gt;a)建立目录“~/repositories”，用来存储所有git仓库。&lt;br&gt;b)把公钥文件username.pub添加到 ～/.ssh/authorized_keys。&lt;/p&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;gitolite的配置文件本身就是一个git仓库，gitolite的配置修改就是通过git实现的，先clone下来修改，再push上去。只要push上去，gitolite会立刻监视到配置文件的修改并应用。&lt;/p&gt;
&lt;h3 id=&quot;管理库&quot;&gt;&lt;a href=&quot;#管理库&quot; class=&quot;headerlink&quot; title=&quot;管理库&quot;&gt;&lt;/a&gt;管理库&lt;/h3&gt;&lt;p&gt;首先，在管理客户端clone管理库到本地。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone gitolite@server:gitolite-admin.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;管理库里的目录里有conf/和keydir/两个目录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conf/gitolite.conf 用于Git项目配置，访问权限设置。&lt;/li&gt;
&lt;li&gt;keydir/ 用于存储用户的SSH public key(公钥）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下所示, “username”(之前用gl-setup命令时候的pubkey名称)具有读写权限而且在gitolite-admin仓库里有一个同名的公钥文件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat conf/gitolite.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repo gitolite-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RW+                 = username&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置-1&quot;&gt;&lt;a href=&quot;#配置-1&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用户/仓库分组&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@oss_repos      = linux perl rakudo git gitolite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@secret_repos   = fenestra pear&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@admins         = scott&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interns        = ashok&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@engineers      = sitaram dilbert wally alice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@staff          = @admins @engineers @interns&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在下面的例子里，实习生可以push ”int“分支。工程师可以push任何有”eng-“开头的branch，还有refs/tags下面用”rc”开头的后面跟数字的。而且管理员可以随便更改(包括rewind)对任何参考名。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repo @oss_repos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RW  int$                = @interns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RW  eng-                = @engineers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RW  refs/tags/rc[0-9]   = @engineers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RW+                     = @admins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Git服务管理领域，主要有三种流行的方案:&lt;br&gt;Gitosis - 轻量级，开源项目，使用SSH公钥认证，只能做到库级的权限控制，目前项目已经停止开发，不再维护。&lt;br&gt;Gitolite - 轻量级，开源项目，使用SSH公钥认证，能做到分支级的
    
    </summary>
    
    
      <category term="CI" scheme="http://robinheztto.com/tags/CI/"/>
    
      <category term="gitolite" scheme="http://robinheztto.com/tags/gitolite/"/>
    
  </entry>
  
  <entry>
    <title>Android编译之签名机制</title>
    <link href="http://robinheztto.com/2018/05/19/android-build-sign/"/>
    <id>http://robinheztto.com/2018/05/19/android-build-sign/</id>
    <published>2018-05-19T03:11:12.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Android OS 镜像在两个地方使用加密签名：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;映像中的所有.apk文件都必须经过签名。Android软件包管理器通过下列两种方式使用.apk 签名：&lt;ul&gt;
&lt;li&gt;更换应用时，必须使用与旧应用相同的密钥对其签名，才能存取旧应用的数据。无论是通过覆盖.apk 来更新用户应用，还是使用安装在 /data 下的新版本应用来覆盖系统应用，这一点都适用。&lt;/li&gt;
&lt;li&gt;如果两个或多个应用想要共享同一个用户 ID（方便共享数据等），则必须使用相同的密钥对它们进行签名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;必须使用符合系统预期的密钥对 OTA 更新包进行签名，否则在安装过程中 OTA 更新包将被拒绝。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;密钥&quot;&gt;&lt;a href=&quot;#密钥&quot; class=&quot;headerlink&quot; title=&quot;密钥&quot;&gt;&lt;/a&gt;密钥&lt;/h1&gt;&lt;p&gt;Android源码build/target/product/security目录下提供了测试密钥，包括platform，shared，media verity，test(testkey是作为android编译的时候默认的签名key，如果代码中apk的android.mk没有设置LOCAL_CERTIFICATE的值，就默认使用testkey)，其中shared.pk8是私钥，shared.x509.pem是公钥，一定是成对匹配出现的。当编译整个Android OS映像时将使用这些测试密钥对所有.apk文件进行签名。&lt;/p&gt;
&lt;h2 id=&quot;自定义Key&quot;&gt;&lt;a href=&quot;#自定义Key&quot; class=&quot;headerlink&quot; title=&quot;自定义Key&quot;&gt;&lt;/a&gt;自定义Key&lt;/h2&gt;&lt;p&gt;Android源码build/target/product/security/README说明了key的制作方法，如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; build/make/target/product/security/README&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;key generation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The following commands were used to generate the test key pairs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  development/tools/make_key testkey  &amp;apos;/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  development/tools/make_key platform &amp;apos;/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  development/tools/make_key shared   &amp;apos;/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  development/tools/make_key media    &amp;apos;/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过development/tools/make_key生成对应信息的key，参数的定义如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C ---&amp;gt; Country Name (2 letter code)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ST ---&amp;gt; State or Province Name (full name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L ---&amp;gt; Locality Name (eg, city)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;O ---&amp;gt; Organization Name (eg, company)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OU ---&amp;gt; Organizational Unit Name (eg, section)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CN ---&amp;gt; Common Name (eg, your name or your server’s hostname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emailAddress ---&amp;gt; Contact email address&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可在源码根目录下运行如下脚本统一制作：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject=&amp;apos;/C=CN/ST=Guangdong/L=Shenzhen View/O=Android/OU=Android/CN=Android/emailAddress=robin.he.ztto@gmail.cn&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir ~/.android-certs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for x in releasekey platform shared media verity; do \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ./development/tools/make_key ~/.android-certs/$x &amp;quot;$subject&amp;quot;; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;为DM-Verity功能生成verity-key&quot;&gt;&lt;a href=&quot;#为DM-Verity功能生成verity-key&quot; class=&quot;headerlink&quot; title=&quot;为DM-Verity功能生成verity key&quot;&gt;&lt;/a&gt;为DM-Verity功能生成verity key&lt;/h2&gt;&lt;p&gt;首先通过使用以下的命令来生成verity key的工具generate_verity_key：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source build/envsetup.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;choosecombo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make generate_verity_key (mmm system/extras/verity/)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在前面步骤已生成verity.pk8，verity.x509.pem的基础上使用以下命令生成verity_key&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;out/host/linux-x86/bin/generate_verity_key -convert verity.x509.pem verity_key&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android OS 镜像在两个地方使用加密签名：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;映像中的所有.apk文件都必须经过签名。Android软件包管理器通过下列两种方式使用.apk 签名：&lt;ul&gt;
&lt;li&gt;更换应用时，必须使用与旧应用相同的密钥对其签名，才
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Build" scheme="http://robinheztto.com/tags/Build/"/>
    
      <category term="Sign" scheme="http://robinheztto.com/tags/Sign/"/>
    
  </entry>
  
  <entry>
    <title>面试系列之java</title>
    <link href="http://robinheztto.com/2018/05/08/interview-java/"/>
    <id>http://robinheztto.com/2018/05/08/interview-java/</id>
    <published>2018-05-08T03:18:32.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;面向对象的基本特征&quot;&gt;&lt;a href=&quot;#面向对象的基本特征&quot; class=&quot;headerlink&quot; title=&quot;面向对象的基本特征&quot;&gt;&lt;/a&gt;面向对象的基本特征&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;抽象&lt;br&gt;将具有相同属性与行为的一类对象总结成类的过程。抽象只关注于对象的属性与行为，并不关注具体的细节。&lt;/li&gt;
&lt;li&gt;封装&lt;br&gt;对类的数据及数据操作进行封装，隐藏一切可隐藏的细节，只公开对外的接口。&lt;/li&gt;
&lt;li&gt;继承&lt;br&gt;继承已有类的信息创建新类的过程。&lt;/li&gt;
&lt;li&gt;多态&lt;br&gt;多态性是指允许不同子类型的对象对同一消息作出不同的响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h1&gt;&lt;h2 id=&quot;final&quot;&gt;&lt;a href=&quot;#final&quot; class=&quot;headerlink&quot; title=&quot;final&quot;&gt;&lt;/a&gt;final&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据:&lt;/strong&gt; 声明修饰的数据为常量(可以是编译时常量也可以是运行时常量)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于基本数据类型，final修饰的数值不变&lt;br&gt;对于引用类型，final修饰的引用不变，但引用的对象本身可以改变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;方法:&lt;/strong&gt; 声明修饰的方法不能被子类覆盖重写。private方法隐式指定为final，如果在子类中定义的方法和基类中的一个private方法签名相同，此时子类的方法不是覆盖基类方法，而是在子类中定义了一个新的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;类:&lt;/strong&gt; 声明修饰的类不允许被继承，没有子类。final类中所有的方法都被隐示定义为final，因为它们是不会被重载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;final关键字不能修饰接口&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;const&quot;&gt;&lt;a href=&quot;#const&quot; class=&quot;headerlink&quot; title=&quot;const&quot;&gt;&lt;/a&gt;const&lt;/h2&gt;&lt;p&gt;  保留关键字&lt;/p&gt;
&lt;h2 id=&quot;static&quot;&gt;&lt;a href=&quot;#static&quot; class=&quot;headerlink&quot; title=&quot;static&quot;&gt;&lt;/a&gt;static&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;成员变量:&lt;/strong&gt; 声明修饰的成员变量为静态变量(类变量)，在内存中只有一个副本，并且在类初始化时赋值，无需依赖对象调用，static成员变量的初始化顺序按照定义的顺序进行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成员方法:&lt;/strong&gt; 声明修饰的成员方法为静态方法(类方法)，在类加载时已存在，无需依赖对象调用，静态方法不能调用其他非静态成员或方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码块:&lt;/strong&gt; 只在类加载的时候执行一次。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;volatile&quot;&gt;&lt;a href=&quot;#volatile&quot; class=&quot;headerlink&quot; title=&quot;volatile&quot;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素（操作系统、硬件、其它线程等）更改。&lt;/li&gt;
&lt;li&gt;volatile 关键字声明的变量，每次访问时都必须从内存中取出值（没有被 volatile 修饰的变量，可能由于编译器的优化，从 CPU 寄存器中取值）&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象的基本特征&quot;&gt;&lt;a href=&quot;#面向对象的基本特征&quot; class=&quot;headerlink&quot; title=&quot;面向对象的基本特征&quot;&gt;&lt;/a&gt;面向对象的基本特征&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;抽象&lt;br&gt;将具有相同属性与行为的一类对象总结成类的过程。抽象只关注于对
    
    </summary>
    
    
      <category term="interview" scheme="http://robinheztto.com/tags/interview/"/>
    
      <category term="Java" scheme="http://robinheztto.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>面试系列之C++</title>
    <link href="http://robinheztto.com/2018/05/08/interview-cpp/"/>
    <id>http://robinheztto.com/2018/05/08/interview-cpp/</id>
    <published>2018-05-08T03:18:30.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h1&gt;&lt;h2 id=&quot;static&quot;&gt;&lt;a href=&quot;#static&quot; class=&quot;headerlink&quot; title=&quot;static&quot;&gt;&lt;/a&gt;static&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;局部变量:存储位置由栈变成静态存储区，生命周期由程序开始执行到结束。&lt;/li&gt;
&lt;li&gt;全局变量:限定修饰的全局变量作用域为本文件内，外部文件不可见。&lt;/li&gt;
&lt;li&gt;函数:限定函数作用域范围为定义的本文件内，外部文件不可访问。&lt;/li&gt;
&lt;li&gt;成员变量:修饰成员变量为类变量，无需依赖对象调用，static修饰的成员变量要在类外初始化。&lt;/li&gt;
&lt;li&gt;成员函数:修饰静态成员函数，无需依赖对象调用，静态成员函数只能访问静态成员函数或静态成员变量，不能访问非静态成员函数或者变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;const&quot;&gt;&lt;a href=&quot;#const&quot; class=&quot;headerlink&quot; title=&quot;const&quot;&gt;&lt;/a&gt;const&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修饰变量:标记标量只读&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;const int * a;  指针指向的数据&lt;em&gt;a只读，指针a可以改变指向。&lt;br&gt;int ** const a; 指针指向的数据&lt;/em&gt;a可修改，指针a不能改变指向。&lt;br&gt;const int *&lt;em&gt; const a; 指针的指向的数据&lt;/em&gt;a只读，指针a不能改变指向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修饰函数参数:标记参数在函数内不允许修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修饰成员函数:标志成员函数不能修改任何成员变量的值(mutable标记的成员变量除外)，另外const成员函数不能调用非const成员函数(因为非const成员函数可能修改成员变量)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修饰函数返回值:标志函数返回值为只读&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;volatile&quot;&gt;&lt;a href=&quot;#volatile&quot; class=&quot;headerlink&quot; title=&quot;volatile&quot;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素（操作系统、硬件、其它线程等）更改。&lt;/li&gt;
&lt;li&gt;volatile 关键字声明的变量，每次访问时都必须从内存中取出值（没有被 volatile 修饰的变量，可能由于编译器的优化，从 CPU 寄存器中取值）&lt;/li&gt;
&lt;li&gt;const 可以是 volatile （如只读的状态寄存器）&lt;/li&gt;
&lt;li&gt;指针可以是 volatile&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h1&gt;&lt;h2 id=&quot;static&quot;&gt;&lt;a href=&quot;#static&quot; class=&quot;headerlink&quot; title=&quot;static&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="interview" scheme="http://robinheztto.com/tags/interview/"/>
    
      <category term="C++" scheme="http://robinheztto.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>面试系列之C</title>
    <link href="http://robinheztto.com/2018/05/08/interview-c/"/>
    <id>http://robinheztto.com/2018/05/08/interview-c/</id>
    <published>2018-05-08T03:18:30.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h1&gt;&lt;h2 id=&quot;static&quot;&gt;&lt;a href=&quot;#static&quot; class=&quot;headerlink&quot; title=&quot;static&quot;&gt;&lt;/a&gt;static&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;局部变量:存储位置由栈变成静态存储区，生命周期由程序开始执行到结束。&lt;/li&gt;
&lt;li&gt;全局变量:限定修饰的全局变量作用域为本文件内，外部文件不可见。&lt;/li&gt;
&lt;li&gt;修饰函数:限定函数作用域范围为定义的本文件内，外部文件不可访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;const&quot;&gt;&lt;a href=&quot;#const&quot; class=&quot;headerlink&quot; title=&quot;const&quot;&gt;&lt;/a&gt;const&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修饰变量:标记标量只读&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;const int * a;  指针指向的数据&lt;em&gt;a只读，指针a可以改变指向。&lt;br&gt;int ** const a; 指针指向的数据&lt;/em&gt;a可修改，指针a不能改变指向。&lt;br&gt;const int *&lt;em&gt; const a; 指针的指向的数据&lt;/em&gt;a只读，指针a不能改变指向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修饰函数参数:标记参数在函数内不允许修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修饰函数返回值:标志函数返回值为只读&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;volatile&quot;&gt;&lt;a href=&quot;#volatile&quot; class=&quot;headerlink&quot; title=&quot;volatile&quot;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素（操作系统、硬件、其它线程等）更改。&lt;/li&gt;
&lt;li&gt;volatile 关键字声明的变量，每次访问时都必须从内存中取出值（没有被 volatile 修饰的变量，可能由于编译器的优化，从 CPU 寄存器中取值）&lt;/li&gt;
&lt;li&gt;const 可以是 volatile （如只读的状态寄存器）&lt;/li&gt;
&lt;li&gt;指针可以是 volatile&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h1&gt;&lt;h2 id=&quot;static&quot;&gt;&lt;a href=&quot;#static&quot; class=&quot;headerlink&quot; title=&quot;static&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="C" scheme="http://robinheztto.com/tags/C/"/>
    
      <category term="interview" scheme="http://robinheztto.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Android持续集成之Jenkins</title>
    <link href="http://robinheztto.com/2018/05/03/android-ci-jenkins/"/>
    <id>http://robinheztto.com/2018/05/03/android-ci-jenkins/</id>
    <published>2018-05-03T07:17:21.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Jenkins是一个独立的开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。前身是Hudson是一个可扩展的持续集成引擎。可用于自动化各种任务，如构建，测试和部署软件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo sh -c &amp;apos;echo deb http://pkg.jenkins-ci.org/debian binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get update -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install jenkins -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo /etc/init.d/jenkins start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成以上步骤后，通过浏览器打开 &lt;a href=&quot;http://localhost:8080，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080，&lt;/a&gt; 如果无法启动jenkins，可在/var/log/jenkins/jenkins.log下查看Jenkins log&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/ci/jenkins-error-log.png?raw=true&quot; alt=&quot;jenkins-error-log&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;如上图示，出现上面的报错信息，即端口号被占用，需按以下步骤修改Jenkins端口号&lt;/p&gt;
&lt;p&gt;1.修改/etc/init.d/jenkins中do_start函数check_tcp_port命令，将端口号从8080换成8081&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo vi /etc/init.d/jenkins&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Function that starts the daemon/service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do_start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Verify that the jenkins port is not already in use, winstone does not exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # even for BindException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    check_tcp_port &amp;quot;http&amp;quot; &amp;quot;$HTTP_PORT&amp;quot; &amp;quot;8081&amp;quot; &amp;quot;$HTTP_HOST&amp;quot; &amp;quot;0.0.0.0&amp;quot; || return 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.修改/etc/default/jenkins文件，将端口8080改成8081&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo vi /etc/default/jenkins&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# port for HTTP connector (default 8080; disable with -1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP_PORT=8081&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.重新启动jenkins&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo /etc/init.d/jenkins start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ps -ef | grep jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;浏览器打开gerrit url，即出现如下界面，admin初始密码保存在/var/lib/jenkins/secrets&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/ci/jenkins-login.png?raw=true&quot; alt=&quot;jenkins-login&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;首次进入账户，根据提示安装推介的插件&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/ci/jenkins-startup.png?raw=true&quot; alt=&quot;jenkins-startup&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;推介安装包括如下插件&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/ci/jenkins-startup-1.png?raw=true&quot; alt=&quot;jenkins-startup-1&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;进入jenkins后，界面如下显示&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/ci/jenkins-page.png?raw=true&quot; alt=&quot;jenkins-page&quot;&gt;&lt;br&gt;&lt;/div&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Jenkins是一个独立的开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。前身是Hudson是一个可扩展的持续集成引擎。可用于自动化各种任务，如构建，测试和部署软
    
    </summary>
    
    
      <category term="CI" scheme="http://robinheztto.com/tags/CI/"/>
    
      <category term="jenkins" scheme="http://robinheztto.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之Deep Doze</title>
    <link href="http://robinheztto.com/2017/09/15/android-power-doze-deep/"/>
    <id>http://robinheztto.com/2017/09/15/android-power-doze-deep/</id>
    <published>2017-09-15T02:36:15.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;STATE-ACTIVE-gt-STATE-INACTIVE&quot;&gt;&lt;a href=&quot;#STATE-ACTIVE-gt-STATE-INACTIVE&quot; class=&quot;headerlink&quot; title=&quot;STATE_ACTIVE -&amp;gt; STATE_INACTIVE&quot;&gt;&lt;/a&gt;STATE_ACTIVE -&amp;gt; STATE_INACTIVE&lt;/h1&gt;&lt;p&gt;如上文所述，当Screen off或者unplug事件触发时，进入becomeInactiveIfAppropriateLocked执行。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void becomeInactiveIfAppropriateLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 灭屏且未充电  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ((!mScreenOn &amp;amp;&amp;amp; !mCharging) || mForceIdle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 进入deep模式状态机轮转&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mState == STATE_ACTIVE &amp;amp;&amp;amp; mDeepEnabled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 切换到STATE_INACTIVE状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mState = STATE_INACTIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 重置状态值，定时器等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resetIdleManagementLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 启动Deep定时器，进入deep状态轮转&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scheduleAlarmLocked(mInactiveTimeout, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EventLogTags.writeDeviceIdle(mState, &amp;quot;no activity&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 当前模式是LIGHT_STATE_ACTIVE，且mLightEnabled开关打开(上篇博客已分析)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mLightState == LIGHT_STATE_ACTIVE &amp;amp;&amp;amp; mLightEnabled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLightState = LIGHT_STATE_INACTIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resetLightIdleManagementLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scheduleLightAlarmLocked(mConstants.LIGHT_IDLE_AFTER_INACTIVE_TIMEOUT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EventLogTags.writeDeviceIdleLight(mLightState, &amp;quot;no activity&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;灭屏且未充电状态或mForceIdle状态满足时，STATE_ACTIVE切换到STATE_INACTIVE，并且启动定时器轮转状态机。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// inactiveTimeoutDefaul默认值为30min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long inactiveTimeoutDefault = (mHasWatch ? 15 : 30) * 60 * 1000L;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INACTIVE_TIMEOUT = mParser.getLong(KEY_INACTIVE_TIMEOUT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !COMPRESS_TIME ? inactiveTimeoutDefault : (inactiveTimeoutDefault / 10));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void scheduleAlarmLocked(long delay, boolean idleUntil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mMotionSensor == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mNextAlarmTime = SystemClock.elapsedRealtime() + delay;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (idleUntil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAlarmManager.setIdleUntil(AlarmManager.ELAPSED_REALTIME_WAKEUP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mNextAlarmTime, &amp;quot;DeviceIdleController.deep&amp;quot;, mDeepAlarmListener, mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mNextAlarmTime, &amp;quot;DeviceIdleController.deep&amp;quot;, mDeepAlarmListener, mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;scheduleAlarmLocked调度定时器，时间mInactiveTimeout为Constants.INACTIVE_TIMEOUT，即inactive_to，默认为30min。&lt;/p&gt;
&lt;h1 id=&quot;STATE-INACTIVE-gt-STATE-IDLE-PENDING&quot;&gt;&lt;a href=&quot;#STATE-INACTIVE-gt-STATE-IDLE-PENDING&quot; class=&quot;headerlink&quot; title=&quot;STATE_INACTIVE -&amp;gt; STATE_IDLE_PENDING&quot;&gt;&lt;/a&gt;STATE_INACTIVE -&amp;gt; STATE_IDLE_PENDING&lt;/h1&gt;&lt;p&gt;在过mInactiveTimeout时间的定时后，进入mDeepAlarmListener中处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private final AlarmManager.OnAlarmListener mDeepAlarmListener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        = new AlarmManager.OnAlarmListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onAlarm() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (DeviceIdleController.this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stepIdleStateLocked(&amp;quot;s:alarm&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续看stepIdleStateLocked的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MIN_TIME_TO_ALARM = mParser.getLong(KEY_MIN_TIME_TO_ALARM,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !COMPRESS_TIME ? 60 * 60 * 1000L : 6 * 60 * 1000L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void stepIdleStateLocked(String reason) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long now = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 如果60分钟内有可以从Deep Idle唤醒的定时器触发，暂时先退出状态机轮转&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ((now+mConstants.MIN_TIME_TO_ALARM) &amp;gt; mAlarmManager.getNextWakeFromIdleTime()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //　重置为STATE_ACTIVE状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mState != STATE_ACTIVE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            becomeActiveLocked(&amp;quot;alarm&amp;quot;, Process.myUid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            becomeInactiveIfAppropriateLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    switch (mState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_INACTIVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 启动motion sensor监听&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            startMonitoringMotionLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 调度STATE_IDLE_PENDING状态的定时器，即idle_after_inactive_to，默认30min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // mNextIdlePendingDelay设置为idle_pending_to即5min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNextIdlePendingDelay = mConstants.IDLE_PENDING_TIMEOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNextIdleDelay = mConstants.IDLE_TIMEOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 切换状态为STATE_IDLE_PENDING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mState = STATE_IDLE_PENDING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EventLogTags.writeDeviceIdle(mState, reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE_PENDING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_SENSING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_LOCATING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE_MAINTENANCE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当进入STATE_IDLE_PENDING时，通过startMonitoringMotionLocked启动了motion sensor监听。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private final MotionListener mMotionListener = new MotionListener();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void startMonitoringMotionLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mMotionSensor != null &amp;amp;&amp;amp; !mMotionListener.active) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 注册mMotionSensor监听&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mMotionListener.registerLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private final class MotionListener extends TriggerEventListener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        implements SensorEventListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean active = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onTrigger(TriggerEvent event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (DeviceIdleController.this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            active = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // MotionSensor事件触发时，执行motionLocked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            motionLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onSensorChanged(SensorEvent event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (DeviceIdleController.this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mSensorManager.unregisterListener(this, mMotionSensor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            active = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            motionLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onAccuracyChanged(Sensor sensor, int accuracy) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 注册MotionSensor监听&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean registerLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        boolean success;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mMotionSensor.getReportingMode() == Sensor.REPORTING_MODE_ONE_SHOT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            success = mSensorManager.requestTriggerSensor(mMotionListener, mMotionSensor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            success = mSensorManager.registerListener(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mMotionListener, mMotionSensor, SensorManager.SENSOR_DELAY_NORMAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (success) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            active = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Slog.e(TAG, &amp;quot;Unable to register for &amp;quot; + mMotionSensor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return success;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void unregisterLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mMotionSensor.getReportingMode() == Sensor.REPORTING_MODE_ONE_SHOT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mSensorManager.cancelTriggerSensor(mMotionListener, mMotionSensor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mSensorManager.unregisterListener(mMotionListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        active = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当mMotionSensor事件触发时，motionLocked被调动执行。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void motionLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handleMotionDetectedLocked(mConstants.MOTION_INACTIVE_TIMEOUT, &amp;quot;motion&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// handleMotionDetectedLocked中重置状态为STATE_ACTIVE，并重新设置mInactiveTimeout为&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// mConstants.MOTION_INACTIVE_TIMEOUT，即motion_inactive_to，默认是10分钟&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 即如果由于MotionSensor检测到的动作而退出了INACTIVE状态，再次从INACTIVE切换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 到IDLE_PENDING的时间就从原先的30分钟缩短到了10分钟。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void handleMotionDetectedLocked(long timeout, String type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean becomeInactive = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mState != STATE_ACTIVE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        scheduleReportActiveLocked(type, Process.myUid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mState = STATE_ACTIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mInactiveTimeout = timeout;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mCurIdleBudget = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mMaintenanceStartTime = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EventLogTags.writeDeviceIdle(mState, type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addEvent(EVENT_NORMAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        becomeInactive = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mLightState == LIGHT_STATE_OVERRIDE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // We went out of light idle mode because we had started deep idle mode...  let&amp;apos;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // now go back and reset things so we resume light idling if appropriate.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLightState = STATE_ACTIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EventLogTags.writeDeviceIdleLight(mLightState, type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        becomeInactive = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (becomeInactive) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        becomeInactiveIfAppropriateLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;STATE-IDLE-PENDING-gt-STATE-SENSING&quot;&gt;&lt;a href=&quot;#STATE-IDLE-PENDING-gt-STATE-SENSING&quot; class=&quot;headerlink&quot; title=&quot;STATE_IDLE_PENDING -&amp;gt; STATE_SENSING&quot;&gt;&lt;/a&gt;STATE_IDLE_PENDING -&amp;gt; STATE_SENSING&lt;/h1&gt;&lt;p&gt;当STATE_IDLE_PENDING定时时间到后，继续进入到stepIdleStateLocked中处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void stepIdleStateLocked(String reason) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    switch (mState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_INACTIVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE_PENDING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 切换状态到STATE_SENSING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mState = STATE_SENSING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EventLogTags.writeDeviceIdle(mState, reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 调度STATE_SENSING状态定时器，SENSING_TIMEOUT即sensing_to，默认4min，正常情况下该定时器不会被触发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scheduleSensingTimeoutAlarmLocked(mConstants.SENSING_TIMEOUT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cancelLocatingLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNotMoving = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLocated = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLastGenericLocation = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLastGpsLocation = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 启动AnyMotionDetector，利用加速度传感器监测是否有方向的变化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mAnyMotionDetector.checkForAnyMotion();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_SENSING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_LOCATING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE_MAINTENANCE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;stepIdleStateLocked对STATE_SENSING的处理同样是启动一个定时器，但是该定时器不会被触发，也就是STATE_SENSING状态的轮转不依靠定时器进行，而是在mAnyMotionDetector的监测结果的回调onAnyMotionResult()中进行。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void onAnyMotionResult(int result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (result != AnyMotionDetector.RESULT_UNKNOWN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 取消STATE_SENSING的定时器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cancelSensingTimeoutAlarmLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ((result == AnyMotionDetector.RESULT_MOVED) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (result == AnyMotionDetector.RESULT_UNKNOWN)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            handleMotionDetectedLocked(mConstants.INACTIVE_TIMEOUT, &amp;quot;non_stationary&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (result == AnyMotionDetector.RESULT_STATIONARY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mState == STATE_SENSING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // If we are currently sensing, it is time to move to locating.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mNotMoving = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stepIdleStateLocked(&amp;quot;s:stationary&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (mState == STATE_LOCATING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // If we are currently locating, note that we are not moving and step&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // if we have located the position.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mNotMoving = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (mLocated) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    stepIdleStateLocked(&amp;quot;s:stationary&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当检测结果为MOVED时，调用handleMotionDetectedLocked重置状态为ACTIVE，如果结果为RESULT_STATIONARY，当前状态为SENSING时，调用stopIdleStateLocked轮转到下一个状态，也就是进入到LOCATING状态，那么如果当前为LOCATING时，需要另外对mLocated变量进行判断才决定是否进行下一次切换。&lt;/p&gt;
&lt;h1 id=&quot;STATE-SENSING-gt-STATE-LOCATING&quot;&gt;&lt;a href=&quot;#STATE-SENSING-gt-STATE-LOCATING&quot; class=&quot;headerlink&quot; title=&quot;STATE_SENSING -&amp;gt; STATE_LOCATING&quot;&gt;&lt;/a&gt;STATE_SENSING -&amp;gt; STATE_LOCATING&lt;/h1&gt;&lt;p&gt;stepIdleStateLocked对STATE_LOCATING状态的处理同样是启动一个定时器，并通过LocationManager请求对位置的监听。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void stepIdleStateLocked(String reason) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    switch (mState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_INACTIVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE_PENDING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_SENSING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cancelSensingTimeoutAlarmLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mState = STATE_LOCATING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EventLogTags.writeDeviceIdle(mState, reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 调度STATE_LOCATING状态定时器，LOCATING_TIMEOUT即locating_to，默认30s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scheduleAlarmLocked(mConstants.LOCATING_TIMEOUT, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 通过LocationManager请求位置监听&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mLocationManager != null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;amp;&amp;amp; mLocationManager.getProvider(LocationManager.NETWORK_PROVIDER) != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLocationManager.requestLocationUpdates(mLocationRequest,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mGenericLocationListener, mHandler.getLooper());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLocating = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mHasNetworkLocation = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mLocationManager != null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;amp;&amp;amp; mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mHasGps = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000, 5,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mGpsLocationListener, mHandler.getLooper());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLocating = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mHasGps = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 如果没有location provider,将通过listeners回调轮状状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mLocating) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_LOCATING:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE_MAINTENANCE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case STATE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;STATE_LOCATING的状态在mGenericLocationListener/mGpsLocationListener中进行轮转。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private final LocationListener mGenericLocationListener = new LocationListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onLocationChanged(Location location) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (DeviceIdleController.this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            receivedGenericLocationLocked(location);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private final LocationListener mGpsLocationListener = new LocationListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onLocationChanged(Location location) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (DeviceIdleController.this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            receivedGpsLocationLocked(location);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void receivedGenericLocationLocked(Location location) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mState != STATE_LOCATING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cancelLocatingLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (DEBUG) Slog.d(TAG, &amp;quot;Generic location: &amp;quot; + location);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLastGenericLocation = new Location(location);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (location.getAccuracy() &amp;gt; mConstants.LOCATION_ACCURACY &amp;amp;&amp;amp; mHasGps) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLocated = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mNotMoving) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stepIdleStateLocked(&amp;quot;s:location&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void receivedGpsLocationLocked(Location location) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mState != STATE_LOCATING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cancelLocatingLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (DEBUG) Slog.d(TAG, &amp;quot;GPS location: &amp;quot; + location);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLastGpsLocation = new Location(location);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (location.getAccuracy() &amp;gt; mConstants.LOCATION_ACCURACY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLocated = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mNotMoving) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stepIdleStateLocked(&amp;quot;s:gps&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果开启了Gps的定位监测，并且精度大于LOCATION_ACCURACY，那么这里的监测就忽略，如果监测数据为Not move，那么就调用StepIdleStateLocked来进行下一步。&lt;/p&gt;
&lt;h1 id=&quot;STATE-LOCATING-gt-STATE-IDLE&quot;&gt;&lt;a href=&quot;#STATE-LOCATING-gt-STATE-IDLE&quot; class=&quot;headerlink&quot; title=&quot;STATE_LOCATING -&amp;gt; STATE_IDLE&quot;&gt;&lt;/a&gt;STATE_LOCATING -&amp;gt; STATE_IDLE&lt;/h1&gt;&lt;h1 id=&quot;STATE-IDLE-MAINTENANCE-gt-STATE-IDLE&quot;&gt;&lt;a href=&quot;#STATE-IDLE-MAINTENANCE-gt-STATE-IDLE&quot; class=&quot;headerlink&quot; title=&quot;STATE_IDLE_MAINTENANCE -&amp;gt; STATE_IDLE&quot;&gt;&lt;/a&gt;STATE_IDLE_MAINTENANCE -&amp;gt; STATE_IDLE&lt;/h1&gt;&lt;h1 id=&quot;STATE-LOCATING-gt-STATE-IDLE-MAINTENANCE&quot;&gt;&lt;a href=&quot;#STATE-LOCATING-gt-STATE-IDLE-MAINTENANCE&quot; class=&quot;headerlink&quot; title=&quot;STATE_LOCATING -&amp;gt; STATE_IDLE_MAINTENANCE&quot;&gt;&lt;/a&gt;STATE_LOCATING -&amp;gt; STATE_IDLE_MAINTENANCE&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;STATE-ACTIVE-gt-STATE-INACTIVE&quot;&gt;&lt;a href=&quot;#STATE-ACTIVE-gt-STATE-INACTIVE&quot; class=&quot;headerlink&quot; title=&quot;STATE_ACTIVE -&amp;gt; STATE_INACTIV
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Power Management" scheme="http://robinheztto.com/tags/Power-Management/"/>
    
      <category term="Doze" scheme="http://robinheztto.com/tags/Doze/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之Light Doze</title>
    <link href="http://robinheztto.com/2017/09/13/android-power-doze-light/"/>
    <id>http://robinheztto.com/2017/09/13/android-power-doze-light/</id>
    <published>2017-09-13T02:36:15.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;p&gt;Light Doze的状态切换如下图示：&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/light_doze.png?raw=true&quot; alt=&quot;light doze machine state&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;LIGHT-STATE-ACTIVE-gt-LIGHT-STATE-INACTIVE&quot;&gt;&lt;a href=&quot;#LIGHT-STATE-ACTIVE-gt-LIGHT-STATE-INACTIVE&quot; class=&quot;headerlink&quot; title=&quot;LIGHT_STATE_ACTIVE -&amp;gt; LIGHT_STATE_INACTIVE&quot;&gt;&lt;/a&gt;LIGHT_STATE_ACTIVE -&amp;gt; LIGHT_STATE_INACTIVE&lt;/h2&gt;&lt;p&gt;DeviceIdleController服务启动过程中注册了DisplayListener，BATTERY_CHANGED Receiver监听屏幕亮灭与充电状态事件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void updateDisplayLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 获取default Display  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCurDisplay = mDisplayManager.getDisplay(Display.DEFAULT_DISPLAY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean screenOn = mCurDisplay.getState() == Display.STATE_ON;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 灭屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!screenOn &amp;amp;&amp;amp; mScreenOn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mScreenOn = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (!mForceIdle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            becomeInactiveIfAppropriateLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 亮屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (screenOn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mScreenOn = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (!mForceIdle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            becomeActiveLocked(&amp;quot;screen&amp;quot;, Process.myUid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void updateChargingLocked(boolean charging) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 未充电状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!charging &amp;amp;&amp;amp; mCharging) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mCharging = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (!mForceIdle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            becomeInactiveIfAppropriateLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 充电状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (charging) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mCharging = charging;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (!mForceIdle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            becomeActiveLocked(&amp;quot;charging&amp;quot;, Process.myUid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当灭屏或未充电状态事件触发时，调用becomeInactiveIfAppropriateLocked进行状态处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void becomeInactiveIfAppropriateLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 灭屏且未充电  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ((!mScreenOn &amp;amp;&amp;amp; !mCharging) || mForceIdle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 进入deep模式，在下篇博客中分析&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mState == STATE_ACTIVE &amp;amp;&amp;amp; mDeepEnabled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mState = STATE_INACTIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resetIdleManagementLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scheduleAlarmLocked(mInactiveTimeout, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EventLogTags.writeDeviceIdle(mState, &amp;quot;no activity&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 当前模式是LIGHT_STATE_ACTIVE，且mLightEnabled开关打开(上篇博客已分析)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mLightState == LIGHT_STATE_ACTIVE &amp;amp;&amp;amp; mLightEnabled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 切换当前light状态为LIGHT_STATE_INACTIVE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLightState = LIGHT_STATE_INACTIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 取消Light定时器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resetLightIdleManagementLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 启动Light定时器，进入Light状态机轮转&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scheduleLightAlarmLocked(mConstants.LIGHT_IDLE_AFTER_INACTIVE_TIMEOUT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EventLogTags.writeDeviceIdleLight(mLightState, &amp;quot;no activity&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void scheduleLightAlarmLocked(long delay) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mNextLightAlarmTime = SystemClock.elapsedRealtime() + delay;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 定时时间到后，mLightAlarmListener将在mHandler关联的BackgroundThread线程中执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNextLightAlarmTime, &amp;quot;DeviceIdleController.light&amp;quot;, mLightAlarmListener, mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;灭屏且未充电状态或打开强制Idle状态满足时，LIGHT_STATE_ACTIVE切换到LIGHT_STATE_INACTIVE，并且启动定时器轮转状态机。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LIGHT_IDLE_AFTER_INACTIVE_TIMEOUT = mParser.getLong(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        KEY_LIGHT_IDLE_AFTER_INACTIVE_TIMEOUT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !COMPRESS_TIME ? 5 * 60 * 1000L : 15 * 1000L);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;定时器定时时间LIGHT_IDLE_AFTER_INACTIVE_TIMEOUT即light_idle_to默认为5min。&lt;/p&gt;
&lt;h2 id=&quot;LIGHT-STATE-INACTIVE-gt-LIGHT-STATE-PRE-IDLE&quot;&gt;&lt;a href=&quot;#LIGHT-STATE-INACTIVE-gt-LIGHT-STATE-PRE-IDLE&quot; class=&quot;headerlink&quot; title=&quot;LIGHT_STATE_INACTIVE -&amp;gt; LIGHT_STATE_PRE_IDLE&quot;&gt;&lt;/a&gt;LIGHT_STATE_INACTIVE -&amp;gt; LIGHT_STATE_PRE_IDLE&lt;/h2&gt;&lt;p&gt;在过LIGHT_IDLE_AFTER_INACTIVE_TIMEOUT时间的定时后，进入mLightAlarmListener中处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private final AlarmManager.OnAlarmListener mLightAlarmListener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        = new AlarmManager.OnAlarmListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onAlarm() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (DeviceIdleController.this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stepLightIdleStateLocked(&amp;quot;s:alarm&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续看stepLightIdleStateLocked的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// LIGHT_STATE_IDLE_MAINTENANCE最短时间，默认为1min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LIGHT_IDLE_MAINTENANCE_MIN_BUDGET = mParser.getLong(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        KEY_LIGHT_IDLE_MAINTENANCE_MIN_BUDGET,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !COMPRESS_TIME ? 1 * 60 * 1000L : 15 * 1000L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// LIGHT_IDLE_TIMEOUT默认值为5min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LIGHT_IDLE_TIMEOUT = mParser.getLong(KEY_LIGHT_IDLE_TIMEOUT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !COMPRESS_TIME ? 5 * 60 * 1000L : 15 * 1000L);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// LIGHT_STATE_PRE_IDLE时间，默认为10min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LIGHT_PRE_IDLE_TIMEOUT = mParser.getLong(KEY_LIGHT_PRE_IDLE_TIMEOUT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !COMPRESS_TIME ? 10 * 60 * 1000L : 30 * 1000L);              &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void stepLightIdleStateLocked(String reason) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 如果处于Deep mode的IDLE状态，Light Mode将会被忽略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mLightState == LIGHT_STATE_OVERRIDE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 当前mLightState处于LIGHT_STATE_INACTIVE状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    switch (mLightState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_INACTIVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // LIGHT_STATE_IDLE_MAINTENANCE最短时间，默认为1min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mCurIdleBudget = mConstants.LIGHT_IDLE_MAINTENANCE_MIN_BUDGET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Idle时间初始值为LIGHT_IDLE_TIMEOUT，5min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNextLightIdleDelay = mConstants.LIGHT_IDLE_TIMEOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mMaintenanceStartTime = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //　当前有Alarm或job等active ops，先进入LIGHT_STATE_PRE_IDLE状态等待完成，否则直接进入LIGHT_STATE_PRE_IDLE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!isOpsInactiveLocked()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLightState = LIGHT_STATE_PRE_IDLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                EventLogTags.writeDeviceIdleLight(mLightState, reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 设置LIGHT_STATE_PRE_IDLE时间，默认为10min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                scheduleLightAlarmLocked(mConstants.LIGHT_PRE_IDLE_TIMEOUT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_PRE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_IDLE_MAINTENANCE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_WAITING_FOR_NETWORK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;stepLightIdleStateLocked中LIGHT_STATE_INACTIVE的处理，当首次进入存在active ops时，将会进入LIGHT_STATE_PRE_IDLE状态，等待当前处理完成，mConstants.LIGHT_PRE_IDLE_TIMEOUT即light_pre_idle_to时间到后，再次进入stepLightIdleStateLocked中进行处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;boolean isOpsInactiveLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return mActiveIdleOpCount &amp;lt;= 0 &amp;amp;&amp;amp; !mJobsActive &amp;amp;&amp;amp; !mAlarmsActive;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;LIGHT-STATE-PRE-IDLE-gt-LIGHT-STATE-IDLE&quot;&gt;&lt;a href=&quot;#LIGHT-STATE-PRE-IDLE-gt-LIGHT-STATE-IDLE&quot; class=&quot;headerlink&quot; title=&quot;LIGHT_STATE_PRE_IDLE -&amp;gt; LIGHT_STATE_IDLE&quot;&gt;&lt;/a&gt;LIGHT_STATE_PRE_IDLE -&amp;gt; LIGHT_STATE_IDLE&lt;/h2&gt;&lt;p&gt;当LIGHT_STATE_PRE_IDLE定时时间到后，继续进入到stepLightIdleStateLocked中处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void stepLightIdleStateLocked(String reason) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mLightState == LIGHT_STATE_OVERRIDE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 当前mLightState处于LIGHT_STATE_PRE_IDLE状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    switch (mLightState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_INACTIVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_PRE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_IDLE_MAINTENANCE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 当前mMaintenanceStartTime=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mMaintenanceStartTime != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                long duration = SystemClock.elapsedRealtime() - mMaintenanceStartTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (duration &amp;lt; mConstants.LIGHT_IDLE_MAINTENANCE_MIN_BUDGET) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // We didn&amp;apos;t use up all of our minimum budget; add this to the reserve.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mCurIdleBudget += (mConstants.LIGHT_IDLE_MAINTENANCE_MIN_BUDGET-duration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // We used more than our minimum budget; this comes out of the reserve.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mCurIdleBudget -= (duration-mConstants.LIGHT_IDLE_MAINTENANCE_MIN_BUDGET);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mMaintenanceStartTime = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 设置IDLE时间，初始值为LIGHT_IDLE_TIMEOUT，5min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scheduleLightAlarmLocked(mNextLightIdleDelay);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 设置下次IDLE的时间，5*2^min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 最长LIGHT_MAX_IDLE_TIMEOUT，15min，最短LIGHT_IDLE_TIMEOUT,5min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNextLightIdleDelay = Math.min(mConstants.LIGHT_MAX_IDLE_TIMEOUT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (long)(mNextLightIdleDelay * mConstants.LIGHT_IDLE_FACTOR));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mNextLightIdleDelay &amp;lt; mConstants.LIGHT_IDLE_TIMEOUT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mNextLightIdleDelay = mConstants.LIGHT_IDLE_TIMEOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (DEBUG) Slog.d(TAG, &amp;quot;Moved to LIGHT_STATE_IDLE.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 进入LIGHT_STATE_IDLE模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLightState = LIGHT_STATE_IDLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EventLogTags.writeDeviceIdleLight(mLightState, reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            addEvent(EVENT_LIGHT_IDLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 发送消息，进行LIGHT_STATE_IDLE状态相关的处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON_LIGHT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_WAITING_FOR_NETWORK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;stepLightIdleStateLocked中对LIGHT_STATE_PRE_IDLE状态的处理，进入LIGHT_STATE_IDLE状态并设置时间，然后发送消息进行状态切换相关的处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;final class MyHandler extends Handler &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override public void handleMessage(Message msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (DEBUG) Slog.d(TAG, &amp;quot;handleMessage(&amp;quot; + msg.what + &amp;quot;)&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (msg.what) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_WRITE_CONFIG: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_IDLE_ON:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_IDLE_ON_LIGHT: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final boolean deepChanged;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final boolean lightChanged;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (msg.what == MSG_REPORT_IDLE_ON) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // LocalPowerManager设置LightDeviceIdle模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    deepChanged = mLocalPowerManager.setDeviceIdleMode(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    lightChanged = mLocalPowerManager.setLightDeviceIdleMode(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // NetworkPolicyManager设置DeviceIdle模式，禁止非白名单应用联网&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mNetworkPolicyManager.setDeviceIdleMode(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mBatteryStats.noteDeviceIdleMode(msg.what == MSG_REPORT_IDLE_ON&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            ? BatteryStats.DEVICE_IDLE_MODE_DEEP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            : BatteryStats.DEVICE_IDLE_MODE_LIGHT, null, Process.myUid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; catch (RemoteException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 发送LightIdle模式切换广播&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (lightChanged) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    getContext().sendBroadcastAsUser(mLightIdleIntent, UserHandle.ALL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                EventLogTags.writeDeviceIdleOnComplete();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_IDLE_OFF: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_ACTIVE: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......              &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_TEMP_APP_WHITELIST_TIMEOUT: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......              &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_MAINTENANCE_ACTIVITY: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......              &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_FINISH_IDLE_OP: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在MyHandler中会对MSG_REPORT_IDLE_ON_LIGHT消息进行一系列的处理通知各个模块对LightDeviceId进行处理，包括禁止网络，推迟SyncManager，jobsheduler等。&lt;/p&gt;
&lt;h2 id=&quot;LIGHT-STATE-IDLE-gt-LIGHT-STATE-IDLE-MAINTENANCE&quot;&gt;&lt;a href=&quot;#LIGHT-STATE-IDLE-gt-LIGHT-STATE-IDLE-MAINTENANCE&quot; class=&quot;headerlink&quot; title=&quot;LIGHT_STATE_IDLE -&amp;gt; LIGHT_STATE_IDLE_MAINTENANCE&quot;&gt;&lt;/a&gt;LIGHT_STATE_IDLE -&amp;gt; LIGHT_STATE_IDLE_MAINTENANCE&lt;/h2&gt;&lt;h2 id=&quot;LIGHT-STATE-IDLE-gt-LIGHT-STATE-WAITING-FOR-NETWORK&quot;&gt;&lt;a href=&quot;#LIGHT-STATE-IDLE-gt-LIGHT-STATE-WAITING-FOR-NETWORK&quot; class=&quot;headerlink&quot; title=&quot;LIGHT_STATE_IDLE -&amp;gt; LIGHT_STATE_WAITING_FOR_NETWORK&quot;&gt;&lt;/a&gt;LIGHT_STATE_IDLE -&amp;gt; LIGHT_STATE_WAITING_FOR_NETWORK&lt;/h2&gt;&lt;p&gt;当LIGHT_STATE_IDLE定时时间到后，继续进入到stepLightIdleStateLocked中进行处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LIGHT_IDLE_MAINTENANCE时间默认最短1min，最长5min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LIGHT_IDLE_MAINTENANCE_MIN_BUDGET = mParser.getLong(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        KEY_LIGHT_IDLE_MAINTENANCE_MIN_BUDGET,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !COMPRESS_TIME ? 1 * 60 * 1000L : 15 * 1000L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LIGHT_IDLE_MAINTENANCE_MAX_BUDGET = mParser.getLong(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        KEY_LIGHT_IDLE_MAINTENANCE_MAX_BUDGET,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !COMPRESS_TIME ? 5 * 60 * 1000L : 30 * 1000L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void stepLightIdleStateLocked(String reason) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 当前状态mLightState为LIGHT_STATE_IDLE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    switch (mLightState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_INACTIVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_PRE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_IDLE_MAINTENANCE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_IDLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case LIGHT_STATE_WAITING_FOR_NETWORK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 当前有网络连接时或为LIGHT_STATE_WAITING_FOR_NETWORK状态时，直接进入LIGHT_STATE_IDLE_MAINTENANCE状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mNetworkConnected || mLightState == LIGHT_STATE_WAITING_FOR_NETWORK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 设置mActiveIdleOpCount初始值为1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mActiveIdleOpCount = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // mActiveIdleWakeLock防止系统进入休眠&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mActiveIdleWakeLock.acquire();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // mCurIdleBudget即mMaintenance windows时间最短1min最长5min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mMaintenanceStartTime = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (mCurIdleBudget &amp;lt; mConstants.LIGHT_IDLE_MAINTENANCE_MIN_BUDGET) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mCurIdleBudget = mConstants.LIGHT_IDLE_MAINTENANCE_MIN_BUDGET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else if (mCurIdleBudget &amp;gt; mConstants.LIGHT_IDLE_MAINTENANCE_MAX_BUDGET) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mCurIdleBudget = mConstants.LIGHT_IDLE_MAINTENANCE_MAX_BUDGET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 进入LIGHT_STATE_IDLE_MAINTENANCE状态并设置定时器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                scheduleLightAlarmLocked(mCurIdleBudget);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (DEBUG) Slog.d(TAG,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;quot;Moved from LIGHT_STATE_IDLE to LIGHT_STATE_IDLE_MAINTENANCE.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLightState = LIGHT_STATE_IDLE_MAINTENANCE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                EventLogTags.writeDeviceIdleLight(mLightState, reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                addEvent(EVENT_LIGHT_MAINTENANCE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 发送消息，对LIGHT_STATE_IDLE_MAINTENANCE状态进行处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 当前没有网络连接，先进入LIGHT_STATE_WAITING_FOR_NETWORK等待一个idle的周期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                scheduleLightAlarmLocked(mNextLightIdleDelay);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (DEBUG) Slog.d(TAG, &amp;quot;Moved to LIGHT_WAITING_FOR_NETWORK.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLightState = LIGHT_STATE_WAITING_FOR_NETWORK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                EventLogTags.writeDeviceIdleLight(mLightState, reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当退出LIGHT_STATE_IDLE状态时，如当前有网络连接或者为LIGHT_STATE_WAITING_FOR_NETWORK状态，则直接进入LIGHT_STATE_IDLE_MAINTENANCE，并发送MSG_REPORT_IDLE_OFF消息处理该状态的切换。如当前没有网络连接时，则先进入LIGHT_STATE_WAITING_FOR_NETWORK等待一个idle的周期等待网络连接。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;final class MyHandler extends Handler &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override public void handleMessage(Message msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (DEBUG) Slog.d(TAG, &amp;quot;handleMessage(&amp;quot; + msg.what + &amp;quot;)&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (msg.what) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_WRITE_CONFIG: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_IDLE_ON:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_IDLE_ON_LIGHT: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // MSG_REPORT_IDLE_OFF即执行MSG_REPORT_IDLE_ON_LIGHT中的反操作，恢复LIGH_IDLE的限制操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_IDLE_OFF: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                EventLogTags.writeDeviceIdleOffStart(&amp;quot;unknown&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final boolean deepChanged = mLocalPowerManager.setDeviceIdleMode(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final boolean lightChanged = mLocalPowerManager.setLightDeviceIdleMode(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mNetworkPolicyManager.setDeviceIdleMode(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mBatteryStats.noteDeviceIdleMode(BatteryStats.DEVICE_IDLE_MODE_OFF,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            null, Process.myUid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; catch (RemoteException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (deepChanged) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (lightChanged) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  　// 曾加mActiveIdleOpCount计数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    incActiveIdleOps();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // 发送广播，最后执行mIdleStartedDoneReceiver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    getContext().sendOrderedBroadcastAsUser(mLightIdleIntent, UserHandle.ALL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            null, mIdleStartedDoneReceiver, null, 0, null, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 减少mActiveIdleOpCount计数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                decActiveIdleOps();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                EventLogTags.writeDeviceIdleOffComplete();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_ACTIVE: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_TEMP_APP_WHITELIST_TIMEOUT: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_REPORT_MAINTENANCE_ACTIVITY: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case MSG_FINISH_IDLE_OP: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              decActiveIdleOps();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;MyHandler中处理MSG_REPORT_IDLE_OFF消息主要是恢复MSG_REPORT_IDLE_ON时所做的限制操作，恢复网络，SyncManager，jobsheduler的执行。&lt;/p&gt;
&lt;h2 id=&quot;LIGHT-STATE-IDLE-MAINTENANCE-gt-LIGHT-STATE-IDLE&quot;&gt;&lt;a href=&quot;#LIGHT-STATE-IDLE-MAINTENANCE-gt-LIGHT-STATE-IDLE&quot; class=&quot;headerlink&quot; title=&quot;LIGHT_STATE_IDLE_MAINTENANCE -&amp;gt; LIGHT_STATE_IDLE&quot;&gt;&lt;/a&gt;LIGHT_STATE_IDLE_MAINTENANCE -&amp;gt; LIGHT_STATE_IDLE&lt;/h2&gt;&lt;p&gt;LIGHT_STATE_IDLE_MAINTENANCE状态恢复操作处理时，最后执行最后decActiveIdleOps()，同时发送的OrderedBroadcast也会执行mIdleStartedDoneReceiver最后也是调用decActiveIdleOps()处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private final BroadcastReceiver mIdleStartedDoneReceiver = new BroadcastReceiver() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override public void onReceive(Context context, Intent intent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED.equals(intent.getAction())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mHandler.sendEmptyMessageDelayed(MSG_FINISH_IDLE_OP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mConstants.MIN_LIGHT_MAINTENANCE_TIME);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;mIdleStartedDoneReceiver中发送MSG_FINISH_IDLE_OP消息，进入decActiveIdleOps()中处理，检查当前是否有active的操作(Alarm，Job)，如果没有则无需等定时器到期提前退出Maintenance windows。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void decActiveIdleOps() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mActiveIdleOpCount--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 当前activie操作小于等于0，说明当前没有执行的操作，可以以前退出Maintenance windows     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mActiveIdleOpCount &amp;lt;= 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            exitMaintenanceEarlyIfNeededLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mActiveIdleWakeLock.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void exitMaintenanceEarlyIfNeededLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mState == STATE_IDLE_MAINTENANCE || mLightState == LIGHT_STATE_IDLE_MAINTENANCE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            || mLightState == LIGHT_STATE_PRE_IDLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 当前是否有activie ops操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (isOpsInactiveLocked()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final long now = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mState == STATE_IDLE_MAINTENANCE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stepIdleStateLocked(&amp;quot;s:early&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else if (mLightState == LIGHT_STATE_PRE_IDLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stepLightIdleStateLocked(&amp;quot;s:predone&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stepLightIdleStateLocked(&amp;quot;s:early&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;后续stepLightIdleStateLocked中的处理跟LIGHT_STATE_PRE_IDLE到LIGHT_STATE_IDLE状态切换一致。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Light Doze的状态切换如下图示：&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/powe
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Power Management" scheme="http://robinheztto.com/tags/Power-Management/"/>
    
      <category term="Doze" scheme="http://robinheztto.com/tags/Doze/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之Doze</title>
    <link href="http://robinheztto.com/2017/09/11/android-power-doze-overview/"/>
    <id>http://robinheztto.com/2017/09/11/android-power-doze-overview/</id>
    <published>2017-09-11T03:36:35.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;从Android M开始，开始引入Doze和App standby两种省电技术以延长电池的使用寿命，其中Doze模式主要针对设备空闲的情况，而App standby针对于未使用的应用。&lt;br&gt;当设备处于灭屏且未充电状态，静止一段时间后就会进入Doze的空闲状态(前提是编译前已通过配置xml文件开启Doze功能)，然后通过限制App访问网络，并推迟Syncs，Jobs，Alarm等工作来减少电池电量的消耗。而Appstandby，主要针对于不是经常使用的App，禁止其后台的网络活动，作业等行为。只要App在android M或更高版本的系统上运行，都会受到Doze和App Standby模式的约束。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Doze模式&quot;&gt;&lt;a href=&quot;#Doze模式&quot; class=&quot;headerlink&quot; title=&quot;Doze模式&quot;&gt;&lt;/a&gt;Doze模式&lt;/h1&gt;&lt;p&gt;下面是Doze模式的时序示意图，设备进入Doze模式必须满足三个前提条件，屏幕熄灭，未充电，静止一段时间。在进入Doze模式后，系统会周期性退出Doze空闲状态(下图的maintenance window)，让App有机会完成被限制的活动，以获取更好的用户体验，随着时间的推移，系统调度maintenance窗口的频率会越来越低。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/doze.png?raw=true&quot; alt=&quot;doze&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;Doze模式通过对应用活动的限制，来使系统在空闲状态下尽可能的休眠。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/doze-limit.png?raw=true&quot; alt=&quot;doze&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;如上图示，当处于Doze Idle状态时，wakelock被disable，网络访问被禁止，Jobs与Syncs，Alarm都被推迟到maintenance window执行，GPS/WiFi扫描也被禁止。&lt;/p&gt;
&lt;h1 id=&quot;增强Doze模式&quot;&gt;&lt;a href=&quot;#增强Doze模式&quot; class=&quot;headerlink&quot; title=&quot;增强Doze模式&quot;&gt;&lt;/a&gt;增强Doze模式&lt;/h1&gt;&lt;p&gt;在Android N版本上，Doze模式有了进一步增强，加入了Light idle和Deep idle。相比于M版本，Android N进入Doze模式条件更加宽松，当手机处于未充电状态且灭屏一段时间(不一定是静止状态)，就可以进入Light idle浅度休眠模式。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/doze-diagram-1.png?raw=true&quot; alt=&quot;doze&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;Light idle与Deep idle独立运行的，系统会首先进入Light idle然后进入Deep idle，当进入Deep idle后，Light idle状态被忽略。下面是二种模式的比较：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IDLE程度&lt;/th&gt;
&lt;th&gt;进入条件&lt;/th&gt;
&lt;th&gt;对App的行为限制&lt;/th&gt;
&lt;th&gt;退出条件&lt;/th&gt;
&lt;th&gt;设备硬件要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Light IDLE&lt;/td&gt;
&lt;td&gt;设备不充电，屏幕关闭&lt;/td&gt;
&lt;td&gt;1.不能访问网络；&lt;br&gt;2.推迟作业和同步&lt;/td&gt;
&lt;td&gt;激活屏幕，设备充电，Alarms定时时间到&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deep IDLE&lt;/td&gt;
&lt;td&gt;设备不充电，屏幕关闭，设备保持静止一段时间&lt;/td&gt;
&lt;td&gt;1.不能访问网络；&lt;br&gt;2.wake lock失效；&lt;br&gt;3.禁止GPS/WIFI 扫描；&lt;br&gt;4.Alarms推迟；&lt;br&gt;5.作业，同步推迟；&lt;/td&gt;
&lt;td&gt;激活屏幕，设备充电，移动设备，Alarms定时时间到&lt;/td&gt;
&lt;td&gt;具有SMD（Significant motion Dector），用于检测设备是否处于静止状态传感器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;开启Doze功能&quot;&gt;&lt;a href=&quot;#开启Doze功能&quot; class=&quot;headerlink&quot; title=&quot;开启Doze功能&quot;&gt;&lt;/a&gt;开启Doze功能&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;安装GCM服务(可选)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开Doze模式的配置开关(AOSP中默认关闭)，修改如下配置&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/core/res/res/values/config.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- Set this to true to enable the platform&amp;apos;s auto-power-save modes like doze and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     app standby.  These are not enabled by default because they require a standard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     cloud-to-device messaging service for apps to interact correctly with the modes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (such as to be able to deliver an instant message to the device even when it is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     dozing).  This should be enabled if you have such services and expect apps to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     correctly use them when installed on your device.  Otherwise, keep this disabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     so that applications can still use their own mechanisms. --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;bool name=&amp;quot;config_enableAutoPowerModes&amp;quot;&amp;gt;true&amp;lt;/bool&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预装App/服务适配，重要的App/服务加入白名单(如果不能使用GCM服务，App又要求具有即使推送消息功能，那么最好加入到白名单中)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;白名单&quot;&gt;&lt;a href=&quot;#白名单&quot; class=&quot;headerlink&quot; title=&quot;白名单&quot;&gt;&lt;/a&gt;白名单&lt;/h1&gt;&lt;p&gt;由于国内网络环境，Android设备基本上不能正常使用Google服务，但App又需要接收实时消息推送，所以系统提供了可以配置的白名单让App免于被Doze模式和App standby模式限制。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;预置应用，对于系统应用，需要默认加入到白名单中，修改&lt;code&gt;frameworks/base/data/etc/platform.xml&lt;/code&gt;配置文件，如下所示:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- These are the standard packages that are white-listed to always have internet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     access while in power save mode, even if they aren&amp;apos;t in the foreground. --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;allow-in-power-save package=&amp;quot;com.android.providers.downloads&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主动配置，配置的白名单的app数据保存在&lt;code&gt;/data/system/deviceidle.xml&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;用户可以通过设置&amp;gt;电池&amp;gt;电池优化来手动配置白名单。&lt;/li&gt;
&lt;li&gt;App发送Intent，ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS直接导航用户到电池优化界面。&lt;/li&gt;
&lt;li&gt;App申请REQUEST_IGNORE_BATTERY_OPTIMIZATIONS权限，通过发送Intent(ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)触发请求加入白名单的对话框，用户在对话框中选择是或否在决定是否加入白名单(推荐这种方式)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;调试&quot;&gt;&lt;a href=&quot;#调试&quot; class=&quot;headerlink&quot; title=&quot;调试&quot;&gt;&lt;/a&gt;调试&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;在调试中所有状态都可通过命令&lt;code&gt;adb shell dumpsys deviceidle&lt;/code&gt;来查看&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置手机未充电状态&lt;br&gt;&lt;code&gt;$ adb shell dumpsys battery unplug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看手机充电状态，&lt;code&gt;AC powered:&lt;/code&gt;与&lt;code&gt;USB powered:&lt;/code&gt;为false说明设置成功&lt;br&gt;&lt;code&gt;$ adb shell dumpsys battery&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enable Doze&lt;br&gt;&lt;code&gt;$ adb shell dumpsys deviceidle enable light/deep/all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置Doze模式&lt;br&gt;&lt;code&gt;$ adb shell dumpsys deviceidle step light/deep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;强制直接进入Deep IDLE状态&lt;br&gt;&lt;code&gt;$ adb shell dumpsys deviceidle force-idle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;disable Doze&lt;br&gt;&lt;code&gt;$ adb shell dumpsys deviceidle disable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reset battery状态&lt;br&gt;&lt;code&gt;$ adb shell dumpsys battery reset&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;DeviceIdleController&quot;&gt;&lt;a href=&quot;#DeviceIdleController&quot; class=&quot;headerlink&quot; title=&quot;DeviceIdleController&quot;&gt;&lt;/a&gt;DeviceIdleController&lt;/h1&gt;&lt;p&gt;DeviceIdleController是在system_server中启动的负责管理Doze模式的系统服务。如下图示，DeviceIdleController服务驱动Doze状态机，通过状态的轮转，以发送广播与调用setidle方法的方式通知关联模块对不同状态做出不同的策略。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/DeviceIdleController.png?raw=true&quot; alt=&quot;DeviceIdleController&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;在system_server启动过程，执行startOtherServices时，创建并启动了DeviceIdleController服务。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/java/com/android/server/SystemServer.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void startOtherServices() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mSystemServiceManager.startService(DeviceIdleController.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;｝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;DeviceIdleController继承于SystemService，并且实现AnyMotionDetector.DeviceIdleCallback接口，该接口主要用来监测设备的运动状态。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/DeviceIdleController.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Keeps track of device idleness and drives low power mode based on that.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class DeviceIdleController extends SystemService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        implements AnyMotionDetector.DeviceIdleCallback &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;mSystemServiceManager.startService(DeviceIdleController.class)利用反射的方式构造DeviceIdleController服务，然后调用其onStart()方法，首先看构造方法的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/DeviceIdleController.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public DeviceIdleController(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mConfigFile = new AtomicFile(new File(getSystemDir(), &amp;quot;deviceidle.xml&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandler = new MyHandler(BackgroundThread.getHandler().getLooper());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;DeviceIdleController构造方法中，新建对应/data/system/deviceidle.xml文件的原子操作文件对象，并且创建关联后台线程的mHandler处理消息。接下来看onStart()方法的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/DeviceIdleController.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onStart() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final PackageManager pm = getContext().getPackageManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 读取定义在frameworks/base/core/res/res/values/config.xml文件中的config_enableAutoPowerModes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 标志是否打开Doze模式     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLightEnabled = mDeepEnabled = getContext().getResources().getBoolean(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                com.android.internal.R.bool.config_enableAutoPowerModes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SystemConfig sysConfig = SystemConfig.getInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 读取Doze模式下的系统应用白名单配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 该配置在etc/permissions/platform.xml文件中以tag:allow-in-power-save-except-idle的形式定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArraySet&amp;lt;String&amp;gt; allowPowerExceptIdle = sysConfig.getAllowInPowerSaveExceptIdle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i=0; i&amp;lt;allowPowerExceptIdle.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String pkg = allowPowerExceptIdle.valueAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ApplicationInfo ai = pm.getApplicationInfo(pkg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        PackageManager.MATCH_SYSTEM_ONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                int appid = UserHandle.getAppId(ai.uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mPowerSaveWhitelistAppsExceptIdle.put(ai.packageName, appid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mPowerSaveWhitelistSystemAppIdsExceptIdle.put(appid, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; catch (PackageManager.NameNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 读取Doze模式及Appstandby模式下的系统应用白名单配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 该配置在etc/permissions/platform.xml文件中以tag:allow-in-power-save的形式定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArraySet&amp;lt;String&amp;gt; allowPower = sysConfig.getAllowInPowerSave();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i=0; i&amp;lt;allowPower.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String pkg = allowPower.valueAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ApplicationInfo ai = pm.getApplicationInfo(pkg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        PackageManager.MATCH_SYSTEM_ONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                int appid = UserHandle.getAppId(ai.uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // These apps are on both the whitelist-except-idle as well&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // as the full whitelist, so they apply in all cases.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mPowerSaveWhitelistAppsExceptIdle.put(ai.packageName, appid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mPowerSaveWhitelistSystemAppIdsExceptIdle.put(appid, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mPowerSaveWhitelistApps.put(ai.packageName, appid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mPowerSaveWhitelistSystemAppIds.put(appid, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; catch (PackageManager.NameNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 更新常量设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mConstants = new Constants(mHandler, getContext().getContentResolver());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 读取Doze模式及Appstandby模式下的用户应用白名单配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 该配置在data/system/deviceidle.xml文件中以tag:wl的形式定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        readConfigFileLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 合并系统应用及用户应用白名单，并设置到PowerManager及AlarmManager中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateWhitelistAppIdsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 初始化相关成员的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mNetworkConnected = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mScreenOn = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Start out assuming we are charging.  If we aren&amp;apos;t, we will at least get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // a battery update the next time the level drops.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mCharging = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mState = STATE_ACTIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLightState = LIGHT_STATE_ACTIVE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mInactiveTimeout = mConstants.INACTIVE_TIMEOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 发布BinderService与LocalService对象，提供接口给其他进程或本进程内其他服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mBinderService = new BinderService();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publishBinderService(Context.DEVICE_IDLE_CONTROLLER, mBinderService);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publishLocalService(LocalService.class, new LocalService());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;onStart()中初始化了白名单设置，如下所示分成三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;System-excidle (system app) : used for doze&lt;br&gt;ArrayMap&lt;string, interger=&quot;&quot;&gt; mPowerSaveWhitelistAppsExceptIdle&lt;br&gt;String: packageName&lt;br&gt;Interger: app Uid&lt;br&gt;From etc/permissions/platform.xml tag: allow-in-power-save-except-idle (SystemConfig.mAllowInPowerSaveExceptIdle)&lt;/string,&gt;&lt;/li&gt;
&lt;li&gt;System (system app) : used for doze &amp;amp; app standby&lt;br&gt;ArrayMap&lt;string, interger=&quot;&quot;&gt; mPowerSaveWhitelistApps&lt;br&gt;From etc/permissions/platform.xml tag : allow-in-power-save (SystemConfig.mAllowInPowerSave)&lt;/string,&gt;&lt;/li&gt;
&lt;li&gt;User :  used for doze &amp;amp; app standby&lt;br&gt;ArrayMap&lt;string,interger&gt; mPowerSaveWhitelistUserApps&lt;br&gt;From data/system/deviceidle.xml tag: wl&lt;/string,interger&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当所有系统服务就绪后，会执行&lt;code&gt;mSystemServiceManager.startBootPhase(SystemService.PHASE_SYSTEM_SERVICES_READY);&lt;/code&gt;回调到DeviceIdleController的onBootPhase()方法中，下面继续看onBootPhase()。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onBootPhase(int phase) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (phase == PHASE_SYSTEM_SERVICES_READY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 获取相关的系统服务                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mAlarmManager = (AlarmManager) getContext().getSystemService(Context.ALARM_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mBatteryStats = BatteryStatsService.getService();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLocalPowerManager = getLocalService(PowerManagerInternal.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPowerManager = getContext().getSystemService(PowerManager.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 创建WakeLock,用于maintenance windows时期防止系统休眠&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mActiveIdleWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;quot;deviceidle_maint&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 设置WakeLock引用计数为false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mActiveIdleWakeLock.setReferenceCounted(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mConnectivityService = (ConnectivityService)ServiceManager.getService(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Context.CONNECTIVITY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLocalAlarmManager = getLocalService(AlarmManagerService.LocalService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNetworkPolicyManager = INetworkPolicyManager.Stub.asInterface(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mDisplayManager = (DisplayManager) getContext().getSystemService(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Context.DISPLAY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mSensorManager = (SensorManager) getContext().getSystemService(Context.SENSOR_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 读取定义在frameworks/base/core/res/res/values/config.xml文件中的config_autoPowerModeAnyMotionSensor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 获取传感器ID,没有则继续获取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int sigMotionSensorId = getContext().getResources().getInteger(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (sigMotionSensorId &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mMotionSensor = mSensorManager.getDefaultSensor(sigMotionSensorId, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 读取定义在frameworks/base/core/res/res/values/config.xml文件中的config_autoPowerModePreferWristTilt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 有设置，则获取传感器ID，根据ID获取传感器实例，没有则继续获取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mMotionSensor == null &amp;amp;&amp;amp; getContext().getResources().getBoolean(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mMotionSensor = mSensorManager.getDefaultSensor(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        Sensor.TYPE_WRIST_TILT_GESTURE, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 最后，获取TYPE_SIGNIFICANT_MOTION传感器，获取成功则可以进入Deep Doze模式，没有则只能进入Light Doze模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mMotionSensor == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // As a last ditch, fall back to SMD.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mMotionSensor = mSensorManager.getDefaultSensor(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        Sensor.TYPE_SIGNIFICANT_MOTION, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (getContext().getResources().getBoolean(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLocationManager = (LocationManager) getContext().getSystemService(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        Context.LOCATION_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLocationRequest = new LocationRequest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .setQuality(LocationRequest.ACCURACY_FINE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .setInterval(0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .setFastestInterval(0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .setNumUpdates(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 获取运动传感器检测角度的阀值,并创建AnyMotionDetector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            float angleThreshold = getContext().getResources().getInteger(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mAnyMotionDetector = new AnyMotionDetector(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (PowerManager) getContext().getSystemService(Context.POWER_SERVICE),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mHandler, mSensorManager, this, angleThreshold);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // light mode与deep mode的Intent,用于通知其他模块进入light/deep模式                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mIdleIntent = new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    | Intent.FLAG_RECEIVER_FOREGROUND);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLightIdleIntent = new Intent(PowerManager.ACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLightIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    | Intent.FLAG_RECEIVER_FOREGROUND);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 注册BATTERY_CHANGED广播                        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            IntentFilter filter = new IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filter.addAction(Intent.ACTION_BATTERY_CHANGED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            getContext().registerReceiver(mReceiver, filter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 注册PACKAGE_REMOVED广播   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filter = new IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filter.addAction(Intent.ACTION_PACKAGE_REMOVED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filter.addDataScheme(&amp;quot;package&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            getContext().registerReceiver(mReceiver, filter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 注册网络变化广播&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filter = new IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            getContext().registerReceiver(mReceiver, filter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 设置PowerManager,AlarmManager中Doze模式白名单应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLocalAlarmManager.setDeviceIdleUserWhitelist(mPowerSaveWhitelistUserAppIdArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 注册屏幕亮灭监听&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mDisplayManager.registerDisplayListener(mDisplayListener, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 更新当前屏幕亮灭状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            updateDisplayLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 更新当前网络连接状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateConnectivityState(null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;传感器选用规则：&lt;br&gt;Doze 模式启动之前会对当前设备传感器进行检查，以决定doze模式的深度：&lt;br&gt;步骤1：检查com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor，如果有设置，则获取传感器ID，根据ID获取传感器实例，没有的话跳到步骤2。&lt;br&gt;步骤2：检查com.android.internal.R.bool.config_autoPowerModePreferWristTilt，如果有设置，则获取传感器ID，根据ID获取传感器实例，没有的话跳到步骤3。&lt;br&gt;步骤3：获取TYPE_SIGNIFICANT_MOTION传感器，获取成功则有条件可以进入Deep Doze模式，没有则只能进入Light Doze模式。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从Android M开始，开始引入Doze和App standby两种省电技术以延长电池的使用寿命，其中Doze模式主要针对设备空闲的情况，而App standby针对于未使用的应用。&lt;br&gt;当设备处于灭屏且未充电状态，静止一段时间后就会进入Doz
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Power Management" scheme="http://robinheztto.com/tags/Power-Management/"/>
    
      <category term="Doze" scheme="http://robinheztto.com/tags/Doze/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之PowerManagerService(二)</title>
    <link href="http://robinheztto.com/2017/06/16/android-power-pms-2/"/>
    <id>http://robinheztto.com/2017/06/16/android-power-pms-2/</id>
    <published>2017-06-16T03:23:25.000Z</published>
    <updated>2018-01-07T04:07:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;WakeLock机制&quot;&gt;&lt;a href=&quot;#WakeLock机制&quot; class=&quot;headerlink&quot; title=&quot;WakeLock机制&quot;&gt;&lt;/a&gt;WakeLock机制&lt;/h1&gt;&lt;h2 id=&quot;PowerManager-WakeLock&quot;&gt;&lt;a href=&quot;#PowerManager-WakeLock&quot; class=&quot;headerlink&quot; title=&quot;PowerManager.WakeLock&quot;&gt;&lt;/a&gt;PowerManager.WakeLock&lt;/h2&gt;&lt;p&gt;为了延长电池的使用寿命，Android设备会在一段时间后使屏幕变暗，然后关闭屏幕显示，直至停止CPU进入休眠。WakeLock是Android提供的唤醒锁机制，用来保持CPU运行或避免屏幕变暗/关闭以及避免键盘背光灯熄灭。&lt;/p&gt;
&lt;p&gt;唤醒锁的类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;Screen&lt;/th&gt;
&lt;th&gt;Keyboard&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PARTIAL_WAKE_LOCK&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SCREEN_DIM_WAKE_LOCK&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;Dim&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SCREEN_BRIGHT_WAKE_LOCK&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;Bright&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FULL_WAKE_LOCK&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;Bright&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果是PARTIAL_WAKE_LOCK,无论屏幕的状态或是按下电源键, CPU都将正常工作。如果是其它的唤醒锁,设备会在用户按下电源钮后停止工作进入休眠状态。以上四种锁，除了PARTIAL_WAKE_LOCK，其余的锁在API level 17已经被deprecated了。&lt;/p&gt;
&lt;p&gt;唤醒锁的使用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;权限申明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WAKE_LOCK&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.DEVICE_POWER&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;代码使用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PowerManager.WakeLock wl =  powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &amp;quot;My Tag&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wl.acquire();　//acquire时尽量申明timeout时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wl.release();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在应用程序中使用WakeLock时必须申明权限，acquire请求唤醒锁时尽量设置timeout时间释放WakeLock，以避免长时间持有WakeLock导致系统无法休眠。&lt;/p&gt;
&lt;p&gt;唤醒锁的实现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/core/java/android/os/PowerManager.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public final class WakeLock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int mFlags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String mTag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final String mPackageName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final IBinder mToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int mCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private boolean mRefCounted = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private boolean mHeld;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private WorkSource mWorkSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String mHistoryTag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final String mTraceName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WakeLock(int flags, String tag, String packageName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mFlags = flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mTag = tag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mPackageName = packageName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mToken = new Binder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mTraceName = &amp;quot;WakeLock (&amp;quot; + mTag + &amp;quot;)&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;updatePowerStateLocked&quot;&gt;&lt;a href=&quot;#updatePowerStateLocked&quot; class=&quot;headerlink&quot; title=&quot;updatePowerStateLocked&quot;&gt;&lt;/a&gt;updatePowerStateLocked&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protected void updatePowerStateLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 服务没有ready,mDirty值没有设置情况下不做更新操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!mSystemReady || mDirty == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!Thread.holdsLock(mLock)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Slog.wtf(TAG, &amp;quot;Power manager lock was not held when calling updatePowerStateLocked&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Phase 0: 更新基本状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateIsPoweredLocked(mDirty);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateStayOnLocked(mDirty);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateScreenBrightnessBoostLocked(mDirty);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Phase 1: Update wakefulness.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Loop because the wake lock and user activity computations are influenced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // by changes in wakefulness.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final long now = SystemClock.uptimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int dirtyPhase2 = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int dirtyPhase1 = mDirty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dirtyPhase2 |= dirtyPhase1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mDirty = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            updateWakeLockSummaryLocked(dirtyPhase1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            updateUserActivitySummaryLocked(now, dirtyPhase1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!updateWakefulnessLocked(dirtyPhase1)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Phase 2: Update display power state.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        boolean displayBecameReady = updateDisplayPowerStateLocked(dirtyPhase2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Phase 3: Update dream state (depends on display ready signal).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateDreamLocked(dirtyPhase2, displayBecameReady);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Phase 4: Send notifications, if needed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        finishWakefulnessChangeIfNeededLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Phase 5: Update suspend blocker.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Because we might release the last suspend blocker here, we need to make sure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // we finished everything else first!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateSuspendBlockerLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Trace.traceEnd(Trace.TRACE_TAG_POWER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先来看updateIsPoweredLocked(mDirty);&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void updateIsPoweredLocked(int dirty) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ((dirty &amp;amp; DIRTY_BATTERY_STATE) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final boolean wasPowered = mIsPowered;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int oldPlugType = mPlugType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final boolean oldLevelLow = mBatteryLevelLow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mIsPowered = mBatteryManagerInternal.isPowered(BatteryManager.BATTERY_PLUGGED_ANY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mPlugType = mBatteryManagerInternal.getPlugType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mBatteryLevel = mBatteryManagerInternal.getBatteryLevel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mBatteryLevelLow = mBatteryManagerInternal.getBatteryLevelLow();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (wasPowered != mIsPowered || oldPlugType != mPlugType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mDirty |= DIRTY_IS_POWERED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Update wireless dock detection state.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final boolean dockedOnWirelessCharger = mWirelessChargerDetector.update(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mIsPowered, mPlugType, mBatteryLevel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Treat plugging and unplugging the devices as a user activity.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Users find it disconcerting when they plug or unplug the device&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // and it shuts off right away.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Some devices also wake the device when plugged or unplugged because&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // they don&amp;apos;t have a charging LED.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final long now = SystemClock.uptimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (shouldWakeUpWhenPluggedOrUnpluggedLocked(wasPowered, oldPlugType,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    dockedOnWirelessCharger)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                wakeUpNoUpdateLocked(now, &amp;quot;android.server.power:POWER&amp;quot;, Process.SYSTEM_UID,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mContext.getOpPackageName(), Process.SYSTEM_UID);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            userActivityNoUpdateLocked(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Tell the notifier whether wireless charging has started so that&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // it can provide feedback to the user.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //Bug293654, zhanghong.wt, modify, 20170914, modify no notificatin ring while plugging USB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (dockedOnWirelessCharger || (mIsPowered &amp;amp;&amp;amp; oldPlugType != mPlugType&amp;amp;&amp;amp;(&amp;quot;1&amp;quot;.equals(SystemProperties.get(&amp;quot;sys.boot_completed&amp;quot;))))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mNotifier.onWirelessChargingStarted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (wasPowered != mIsPowered || oldLevelLow != mBatteryLevelLow) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (oldLevelLow != mBatteryLevelLow &amp;amp;&amp;amp; !mBatteryLevelLow) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (DEBUG_SPEW) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Slog.d(TAG, &amp;quot;updateIsPoweredLocked: resetting low power snooze&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mAutoLowPowerModeSnoozing = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            updateLowPowerModeLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WakeLock机制&quot;&gt;&lt;a href=&quot;#WakeLock机制&quot; class=&quot;headerlink&quot; title=&quot;WakeLock机制&quot;&gt;&lt;/a&gt;WakeLock机制&lt;/h1&gt;&lt;h2 id=&quot;PowerManager-WakeLock&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Power Management" scheme="http://robinheztto.com/tags/Power-Management/"/>
    
      <category term="PowerManagerService" scheme="http://robinheztto.com/tags/PowerManagerService/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之PowerManagerService(一)</title>
    <link href="http://robinheztto.com/2017/06/14/android-power-pms-1/"/>
    <id>http://robinheztto.com/2017/06/14/android-power-pms-1/</id>
    <published>2017-06-14T07:19:20.000Z</published>
    <updated>2018-01-07T04:07:05.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;PowerManagerService提供Android系统的电源管理服务，主要功能是控制系统待机状态，屏幕显示，亮度调节，光线/距离传感器的控制等。&lt;/p&gt;
&lt;p&gt;相关代码在以下文件中：&lt;br&gt;frameworks/base/services/java/com/android/server/SystemServer.java&lt;br&gt;frameworks/base/core/java/android/os/PowerManager.java&lt;br&gt;frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;br&gt;frameworks/base/services/core/jni/com_android_server_power_PowerManagerService.cpp&lt;br&gt;frameworks/base/core/java/android/os/PowerManagerInternal.java&lt;br&gt;frameworks/base/services/core/java/com/android/server/power/Notifier.java&lt;br&gt;device/qcom/common/power/power.c&lt;br&gt;system/core/libsuspend/autosuspend.c&lt;br&gt;hardware/libhardware_legacy/power/power.c&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;初始化流程&quot;&gt;&lt;a href=&quot;#初始化流程&quot; class=&quot;headerlink&quot; title=&quot;初始化流程&quot;&gt;&lt;/a&gt;初始化流程&lt;/h1&gt;&lt;p&gt;跟其他系统服务一样，PowerManagerService也是继承于SystemService并通过SystemServer启动。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public final class PowerManagerService extends SystemService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        implements Watchdog.Monitor &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/java/com/android/server/SystemServer.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void startBootstrapServices() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在SystemServer的startBootstrapServices中，通过SystemServiceManager.startService启动了PowerManagerService，下面首先来看PowerManagerService构造方法。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public PowerManagerService(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // mContext赋值为SystemContext&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mContext = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 创建消息处理线程并启动，创建关联消息处理线程的handler对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandlerThread = new ServiceThread(TAG,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Process.THREAD_PRIORITY_DISPLAY, false /*allowIo*/);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandlerThread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandler = new PowerManagerHandler(mHandlerThread.getLooper());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    qcNsrmPowExt = new QCNsrmPowerExtension(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 创建&amp;quot;PowerManagerService.WakeLocks&amp;quot;的SuspendBlocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mWakeLockSuspendBlocker = createSuspendBlockerLocked(&amp;quot;PowerManagerService.WakeLocks&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 创建&amp;quot;PowerManagerService.Display&amp;quot;的SuspendBlocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDisplaySuspendBlocker = createSuspendBlockerLocked(&amp;quot;PowerManagerService.Display&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 请求DisplaySuspendBlocker，禁止系统进入休眠&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDisplaySuspendBlocker.acquire();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mHoldingDisplaySuspendBlocker = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mHalAutoSuspendModeEnabled = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mHalInteractiveModeEnabled = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 设置mWakefulness为唤醒状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mWakefulness = WAKEFULNESS_AWAKE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 进入到native层初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nativeInit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nativeSetAutoSuspend(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nativeSetInteractive(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nativeSetFeature(POWER_FEATURE_DOUBLE_TAP_TO_WAKE, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PowerManagerService构造函数中首先创建了处理消息的进程及对应的handler对象以进行消息处理，然后创建SuspendBlocker对象，用于WakeLocks与Display，并设置mWakefulness的初始状态为WAKEFULNESS_AWAKE，最后进入到native层初始化。下面先看一下关于mWakefulness的定义。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/core/java/android/os/PowerManagerInternal.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 设备处于休眠状态，只能被wakeUp()唤醒．&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final int WAKEFULNESS_ASLEEP = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 设备处于正常工作(fully awake)状态．&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final int WAKEFULNESS_AWAKE = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 设备处于播放屏保状态．&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final int WAKEFULNESS_DREAMING = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 设备处于doze状态，只有低耗电的屏保可以运行，其他应用被挂起．&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final int WAKEFULNESS_DOZING = 3;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续回到PowerManagerService构造函数的native初始化中，首先来看nativeInit的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/jni/com_android_server_power_PowerManagerService.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static const JNINativeMethod gPowerManagerServiceMethods[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /* name, signature, funcPtr */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;quot;nativeInit&amp;quot;, &amp;quot;()V&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (void*) nativeInit &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;quot;nativeAcquireSuspendBlocker&amp;quot;, &amp;quot;(Ljava/lang/String;)V&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (void*) nativeAcquireSuspendBlocker &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;quot;nativeReleaseSuspendBlocker&amp;quot;, &amp;quot;(Ljava/lang/String;)V&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (void*) nativeReleaseSuspendBlocker &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;quot;nativeSetInteractive&amp;quot;, &amp;quot;(Z)V&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (void*) nativeSetInteractive &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;quot;nativeSetAutoSuspend&amp;quot;, &amp;quot;(Z)V&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (void*) nativeSetAutoSuspend &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;quot;nativeSendPowerHint&amp;quot;, &amp;quot;(II)V&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (void*) nativeSendPowerHint &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;quot;nativeSetFeature&amp;quot;, &amp;quot;(II)V&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (void*) nativeSetFeature &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PowerManagerService中的native方法定义如上，nativeInit即调用nativeInit()。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/jni/com_android_server_power_PowerManagerService.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void nativeInit(JNIEnv* env, jobject obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 创建一个全局对象，引用PMS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gPowerManagerServiceObj = env-&amp;gt;NewGlobalRef(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 利用hw_get_module加载power模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    status_t err = hw_get_module(POWER_HARDWARE_MODULE_ID,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (hw_module_t const**)&amp;amp;gPowerModule);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gPowerModule-&amp;gt;init(gPowerModule);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ALOGE(&amp;quot;Couldn&amp;apos;t load %s module (%s)&amp;quot;, POWER_HARDWARE_MODULE_ID, strerror(-err));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;nativeInit的主要任务时装载power模块，该模块由厂商实现，以高通为例，如下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; device/qcom/common/power/power.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static struct hw_module_methods_t power_module_methods = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .open = NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct power_module HAL_MODULE_INFO_SYM = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .common = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .tag = HARDWARE_MODULE_TAG,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .module_api_version = POWER_MODULE_API_VERSION_0_2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .hal_api_version = HARDWARE_HAL_API_VERSION,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .id = POWER_HARDWARE_MODULE_ID,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .name = &amp;quot;QCOM Power HAL&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .author = &amp;quot;Qualcomm&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .methods = &amp;amp;power_module_methods,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .init = power_init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .powerHint = power_hint,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setInteractive = set_interactive,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;power_module中实现了init，powerHint，setInteractive，nativeInit最终调用到HAL power模块的power_init具体实现中。接着看native初始化nativeSetAutoSuspend的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/jni/com_android_server_power_PowerManagerService.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void nativeSetAutoSuspend(JNIEnv* /* env */, jclass /* clazz */, jboolean enable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (enable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ALOGD_IF_SLOW(100, &amp;quot;Excessive delay in autosuspend_enable() while turning screen off&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        autosuspend_enable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ALOGD_IF_SLOW(100, &amp;quot;Excessive delay in autosuspend_disable() while turning screen on&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        autosuspend_disable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; system/core/libsuspend/autosuspend.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int autosuspend_disable(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = autosuspend_init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (ret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ALOGV(&amp;quot;autosuspend_disable\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!autosuspend_enabled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = autosuspend_ops-&amp;gt;disable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (ret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autosuspend_enabled = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;nativeSetAutoSuspend最终调用到libsuspend(参考Android电源管理系列之libsuspend)的autosuspend_disable禁止系统休眠。继续看native初始化nativeSetInteractive，nativeSetFeature的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/jni/com_android_server_power_PowerManagerService.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void nativeSetInteractive(JNIEnv* /* env */, jclass /* clazz */, jboolean enable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (gPowerModule) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (enable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ALOGD_IF_SLOW(20, &amp;quot;Excessive delay in setInteractive(true) while turning screen on&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gPowerModule-&amp;gt;setInteractive(gPowerModule, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ALOGD_IF_SLOW(20, &amp;quot;Excessive delay in setInteractive(false) while turning screen off&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gPowerModule-&amp;gt;setInteractive(gPowerModule, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void nativeSetFeature(JNIEnv *env, jclass clazz, jint featureId, jint data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int data_param = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (gPowerModule &amp;amp;&amp;amp; gPowerModule-&amp;gt;setFeature) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gPowerModule-&amp;gt;setFeature(gPowerModule, (feature_t)featureId, data_param);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同nativeInit一样，最终都是调用到HAL power模块的具体实现中。以上是构造函数的分析流程，下面继续看PowerManagerService在系统启动过程中回调onStart()，onBootPhase()，systemReady()的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onStart() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publishBinderService(Context.POWER_SERVICE, new BinderService());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publishLocalService(PowerManagerInternal.class, new LocalService());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Watchdog.getInstance().addMonitor(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Watchdog.getInstance().addThread(mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private final class BinderService extends IPowerManager.Stub ｛&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;｝&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private final class LocalService extends PowerManagerInternal &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;onStart()中发布了BinderService，LocalService分别供其他进程，进程内其他服务调用，并将PowerManagerService加入到Watchdog监控中。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onBootPhase(int phase) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (phase == PHASE_THIRD_PARTY_APPS_CAN_START) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (phase == PHASE_BOOT_COMPLETED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final long now = SystemClock.uptimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 设置mBootCompleted状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mBootCompleted = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mDirty |= DIRTY_BOOT_COMPLETED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 更新userActivity及PowerState，后面分析&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            userActivityNoUpdateLocked(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            updatePowerStateLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 执行mBootCompletedRunnables中的runnable方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!ArrayUtils.isEmpty(mBootCompletedRunnables)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Slog.d(TAG, &amp;quot;Posting &amp;quot; + mBootCompletedRunnables.length + &amp;quot; delayed runnables&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for (Runnable r : mBootCompletedRunnables) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    BackgroundThread.getHandler().post(r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mBootCompletedRunnables = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;onBootPhase中主要设置mBootCompleted状态，更新PowerState状态，并执行mBootCompletedRunnables中的runnables方法(低电量模式会设置)。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void systemReady(IAppOpsService appOps) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mSystemReady = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取AppOpsService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAppOps = appOps;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取DreamManager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDreamManager = getLocalService(DreamManagerInternal.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取DisplayManagerService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDisplayManagerInternal = getLocalService(DisplayManagerInternal.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mPolicy = getLocalService(WindowManagerPolicy.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取mBatteryService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mBatteryManagerInternal = getLocalService(BatteryManagerInternal.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取屏幕默认，最大，最小亮度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mScreenBrightnessSettingMinimum = pm.getMinimumScreenBrightnessSetting();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mScreenBrightnessSettingMaximum = pm.getMaximumScreenBrightnessSetting();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mScreenBrightnessSettingDefault = pm.getDefaultScreenBrightnessSetting();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取SensorManager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SensorManager sensorManager = new SystemSensorManager(mContext, mHandler.getLooper());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mBatteryStats = BatteryStatsService.getService();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 创建Notifier对象，用于广播power state的变化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mNotifier = new Notifier(Looper.getMainLooper(), mContext, mBatteryStats,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mAppOps, createSuspendBlockerLocked(&amp;quot;PowerManagerService.Broadcasts&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mPolicy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 无线充电检测&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mWirelessChargerDetector = new WirelessChargerDetector(sensorManager,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                createSuspendBlockerLocked(&amp;quot;PowerManagerService.WirelessChargerDetector&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 监听设置的变化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mSettingsObserver = new SettingsObserver(mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLightsManager = getLocalService(LightsManager.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAttentionLight = mLightsManager.getLight(LightsManager.LIGHT_ID_ATTENTION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Initialize display power management.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDisplayManagerInternal.initPowerManagement(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mDisplayPowerCallbacks, mHandler, sensorManager);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Register for settings changes.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final ContentResolver resolver = mContext.getContentResolver();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolver.registerContentObserver(Settings.Secure.getUriFor(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Settings.Secure.SCREENSAVER_ENABLED),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IVrManager vrManager =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (IVrManager) getBinderService(VrManagerService.VR_MANAGER_BINDER_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            vrManager.registerListener(mVrStateCallbacks);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (RemoteException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Slog.e(TAG, &amp;quot;Failed to register VR mode state listener: &amp;quot; + e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 读取配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        readConfigurationLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateSettingsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDirty |= DIRTY_BATTERY_STATE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updatePowerStateLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Register for broadcasts from other components of the system.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IntentFilter filter = new IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter.addAction(Intent.ACTION_BATTERY_CHANGED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mContext.registerReceiver(new BatteryReceiver(), filter, null, mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter = new IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter.addAction(Intent.ACTION_DREAMING_STARTED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter.addAction(Intent.ACTION_DREAMING_STOPPED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mContext.registerReceiver(new DreamReceiver(), filter, null, mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter = new IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter.addAction(Intent.ACTION_USER_SWITCHED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mContext.registerReceiver(new UserSwitchedReceiver(), filter, null, mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter = new IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter.addAction(Intent.ACTION_DOCK_EVENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mContext.registerReceiver(new DockReceiver(), filter, null, mHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;userActivity&quot;&gt;&lt;a href=&quot;#userActivity&quot; class=&quot;headerlink&quot; title=&quot;userActivity&quot;&gt;&lt;/a&gt;userActivity&lt;/h1&gt;&lt;p&gt;userActivity是定义在PowerManager中的SystemApi，用户向PowerManagerService报告用户活动，以更新PowerManagerService内部时间/状态值，推迟系统休眠的时间。下面首先来看userActivity的定义。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/core/java/android/os/PowerManager.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * User activity event type: Unspecified event type.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final int USER_ACTIVITY_EVENT_OTHER = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * User activity event type: Button or key pressed or released.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final int USER_ACTIVITY_EVENT_BUTTON = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * User activity event type: Touch down, move or up.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final int USER_ACTIVITY_EVENT_TOUCH = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * User activity event type: Accessibility taking action on behalf of user.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final int USER_ACTIVITY_EVENT_ACCESSIBILITY = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@SystemApi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void userActivity(long when, int event, int flags) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mService.userActivity(when, event, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (RemoteException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw e.rethrowFromSystemServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private final class BinderService extends IPowerManager.Stub &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void userActivity(long eventTime, int event, int flags) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      final long now = SystemClock.uptimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (eventTime &amp;gt; now) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          throw new IllegalArgumentException(&amp;quot;event time must not be in the future&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      final int uid = Binder.getCallingUid();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      final long ident = Binder.clearCallingIdentity();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          userActivityInternal(eventTime, event, flags, uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Binder.restoreCallingIdentity(ident);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PowerManager中userActivity请求调用服务端PowerManagerService BinderService的userActivity，即调用内部方法userActivityInternal。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void userActivityInternal(long eventTime, int event, int flags, int uid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (userActivityNoUpdateLocked(eventTime, event, flags, uid)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            updatePowerStateLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;userActivityInternal中首先调用userActivityNoUpdateLocked更新相关数据及状态(***NoUpdateLocked仅仅更新内部状态并不采取任何操作)，然后调用updatePowerStateLocked更新所有PowerState，下面分析userActivityNoUpdateLocked的实现，updatePowerStateLocked是PowerManagerService的核心方法，在最后进行分析。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private boolean userActivityNoUpdateLocked(long eventTime, int event, int flags, int uid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 如果发生时间是上一次休眠或唤醒前，或当前没有开机完成到systemReady，不采取操作直接返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (eventTime &amp;lt; mLastSleepTime || eventTime &amp;lt; mLastWakeTime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            || !mBootCompleted || !mSystemReady) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 更新mLastInteractivePowerHintTime时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (eventTime &amp;gt; mLastInteractivePowerHintTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            powerHintInternal(POWER_HINT_INTERACTION, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLastInteractivePowerHintTime = eventTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 通过mNotifier通知BatteryStats UserActivity事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mNotifier.onUserActivity(event, uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mUserInactiveOverrideFromWindowManager) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mUserInactiveOverrideFromWindowManager = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mOverriddenTimeout = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 如果系统处于休眠状态，不进行处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mWakefulness == WAKEFULNESS_ASLEEP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                || mWakefulness == WAKEFULNESS_DOZING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                || (flags &amp;amp; PowerManager.USER_ACTIVITY_FLAG_INDIRECT) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 根据flag是否在已变暗的情况下是否重启活动超时更新mLastUserActivityTimeNoChangeLights或mLastUserActivityTime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 并且设置mDirty DIRTY_USER_ACTIVITY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ((flags &amp;amp; PowerManager.USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (eventTime &amp;gt; mLastUserActivityTimeNoChangeLights&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;amp;&amp;amp; eventTime &amp;gt; mLastUserActivityTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLastUserActivityTimeNoChangeLights = eventTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mDirty |= DIRTY_USER_ACTIVITY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (eventTime &amp;gt; mLastUserActivityTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mLastUserActivityTime = eventTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mDirty |= DIRTY_USER_ACTIVITY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Trace.traceEnd(Trace.TRACE_TAG_POWER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;gotoSleep&quot;&gt;&lt;a href=&quot;#gotoSleep&quot; class=&quot;headerlink&quot; title=&quot;gotoSleep&quot;&gt;&lt;/a&gt;gotoSleep&lt;/h1&gt;&lt;p&gt;gotoSleep在PowerManager中的定义如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/core/java/android/os/PowerManager.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void goToSleep(long time) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    goToSleep(time, GO_TO_SLEEP_REASON_APPLICATION, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void goToSleep(long time, int reason, int flags) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mService.goToSleep(time, reason, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (RemoteException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw e.rethrowFromSystemServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与userActivity一样，gotoSleep最终将调用到goToSleepInternal。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private final class BinderService extends IPowerManager.Stub &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void goToSleep(long eventTime, int reason, int flags) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (eventTime &amp;gt; SystemClock.uptimeMillis()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          throw new IllegalArgumentException(&amp;quot;event time must not be in the future&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mContext.enforceCallingOrSelfPermission(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              android.Manifest.permission.DEVICE_POWER, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      final int uid = Binder.getCallingUid();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      final long ident = Binder.clearCallingIdentity();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          goToSleepInternal(eventTime, reason, flags, uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Binder.restoreCallingIdentity(ident);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void goToSleepInternal(long eventTime, int reason, int flags, int uid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (goToSleepNoUpdateLocked(eventTime, reason, flags, uid)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            updatePowerStateLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;goToSleepInternal中将执行goToSleepNoUpdateLocked更新内部状态，同样在updatePowerStateLocked中更新PowerState的操作。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private boolean goToSleepNoUpdateLocked(long eventTime, int reason, int flags, int uid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 当不处于awake状态或未开机systemReady，不处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (eventTime &amp;lt; mLastWakeTime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            || mWakefulness == WAKEFULNESS_ASLEEP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            || mWakefulness == WAKEFULNESS_DOZING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            || !mBootCompleted || !mSystemReady) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 更新mLastSleepTime时间，设置DIRTY_WAKEFULNESS标志位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLastSleepTime = eventTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mSandmanSummoned = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setWakefulnessLocked(WAKEFULNESS_DOZING, reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Report the number of wake locks that will be cleared by going to sleep.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int numWakeLocksCleared = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int numWakeLocks = mWakeLocks.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; numWakeLocks; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final WakeLock wakeLock = mWakeLocks.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            switch (wakeLock.mFlags &amp;amp; PowerManager.WAKE_LOCK_LEVEL_MASK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                case PowerManager.FULL_WAKE_LOCK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                case PowerManager.SCREEN_DIM_WAKE_LOCK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    numWakeLocksCleared += 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Skip dozing if requested.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ((flags &amp;amp; PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            reallyGoToSleepNoUpdateLocked(eventTime, uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Trace.traceEnd(Trace.TRACE_TAG_POWER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;goToSleepNoUpdateLocked中更新mLastSleepTime，mWakefulness，mDirty状态。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;PowerManagerService提供Android系统的电源管理服务，主要功能是控制系统待机状态，屏幕显示，亮度调节，光线/距离传感器的控制等。&lt;/p&gt;
&lt;p&gt;相关代码在以下文件中：&lt;br&gt;frameworks/base/services/j
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Power Management" scheme="http://robinheztto.com/tags/Power-Management/"/>
    
      <category term="PowerManagerService" scheme="http://robinheztto.com/tags/PowerManagerService/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之Wakelock</title>
    <link href="http://robinheztto.com/2017/06/01/android-power-wakelock/"/>
    <id>http://robinheztto.com/2017/06/01/android-power-wakelock/</id>
    <published>2017-06-01T03:19:20.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;wakelocks最初来源于Android在linux kernel上的一个补丁集，旨在允许用户空间的应用能够通过持有Wakelock来阻止系统进入低功耗模式。&lt;/p&gt;
&lt;p&gt;相关代码在以下文件中：&lt;br&gt;kernel/msm-4.4/kernel/power/wakelock.c&lt;br&gt;kernel/msm-4.4/kernel/power/main.c&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;早期，为了适用移动设备的使用特性，Google在Linux的基础上为Android设计了一套新的电源管理机制 wakelocks，early_suspend。但由于此机制定义了Android自己的休眠接口，修改了Linux原生的susupend流程，导致在合入此patch的问题上Android和Linux内核开发者有&lt;a href=&quot;http://lwn.net/Articles/318611/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;争论&lt;/a&gt;。&lt;br&gt;直到kernel推出wakeup events framework，Android在wakeup events framework上重新修改了电源管理机制，弃用了之前的early_suspend机制，底层基于wakeup source重新实现了wakelocks(Android上层的Wakelock保留了原来的使用方式)，其实就是将kernel中的wakeup source开放到用户空间。&lt;/p&gt;
&lt;p&gt;新旧wakelock的对比如下(用户空间的使用方式一致，内核空间实现机制不同)：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;uesr space&lt;/th&gt;
&lt;th&gt;kernel space&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;old wakelock&lt;/td&gt;
&lt;td&gt;写/sys/power/wake_lock阻止系统进入suspend，写/sys/power/wake_unlock允许suspend&lt;/td&gt;
&lt;td&gt;lock在suspend的流程中加锁，阻止suspend，unlock移除该锁。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;new wakelock&lt;/td&gt;
&lt;td&gt;写/sys/power/wake_lock阻止系统进入suspend，写/sys/power/wake_unlock允许suspend&lt;/td&gt;
&lt;td&gt;基于wakeup event framework的wakeup source实现，lock即active一个wakeup event，unlock　deactive一个wakeup event。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Android-Wakelock&quot;&gt;&lt;a href=&quot;#Android-Wakelock&quot; class=&quot;headerlink&quot; title=&quot;Android Wakelock&quot;&gt;&lt;/a&gt;Android Wakelock&lt;/h1&gt;&lt;p&gt;在Android App中唤醒锁的使用如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;权限申明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WAKE_LOCK&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.DEVICE_POWER&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;代码使用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PowerManager.WakeLock wl =  powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &amp;quot;My Tag&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wl.acquire();　//acquire时尽量申明timeout时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wl.release();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在应用程序中使用WakeLock时必须申明权限，acquire请求唤醒锁时尽量设置timeout时间释放WakeLock，以避免长时间持有WakeLock导致系统无法休眠。&lt;/p&gt;
&lt;p&gt;唤醒锁的类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;Screen&lt;/th&gt;
&lt;th&gt;Keyboard&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PARTIAL_WAKE_LOCK&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SCREEN_DIM_WAKE_LOCK&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;Dim&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SCREEN_BRIGHT_WAKE_LOCK&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;Bright&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FULL_WAKE_LOCK&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;Bright&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果是PARTIAL_WAKE_LOCK,无论屏幕的状态或是按下电源键, CPU都将正常工作。如果是其它的唤醒锁,设备会在用户按下电源钮后停止工作进入休眠状态。以上四种锁，除了PARTIAL_WAKE_LOCK，其余的锁在API level 17已经被deprecated了。&lt;/p&gt;
&lt;h1 id=&quot;Kernel-Wakelock&quot;&gt;&lt;a href=&quot;#Kernel-Wakelock&quot; class=&quot;headerlink&quot; title=&quot;Kernel Wakelock&quot;&gt;&lt;/a&gt;Kernel Wakelock&lt;/h1&gt;&lt;p&gt;如下图(来自&lt;a href=&quot;http://www.wowotech.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蜗窝科技&lt;/a&gt;)所示，PM core通过main模块向用户空间提供操作接口，即向用户空间暴露/sys/power/wake_lock与/sys/power/wake_unlock两个sysfs文件，PM core中的wakelock模块依赖于wakeup events framework提供的wakeup source机制实现，同时对用户空间的wakeup source(wakelock)提供支持。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/android-power-wakelocks.jpeg?raw=true&quot; alt=&quot;wakelocks&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;下面首先来看Kernenl中的wakelock实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/wakelock.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * kernel/power/wakelock.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * User space wakeup sources support.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Copyright (C) 2012 Rafael J. Wysocki &amp;lt;rjw@sisk.pl&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * This code is based on the analogous interface allowing user space to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * manipulate wakelocks on Android.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct wakelock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	char			*name; // 该wakelock对应的name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct rb_node		node; // 红黑树节点，用于存储该wakelock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct wakeup_source	ws; // 该wakelock对应的wakeup source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_WAKELOCKS_GC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct list_head	lru; // 用于wakelock的回收机制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过注释信息可以知道，Kernenl中的wakelock是对用户空间wakelock支持的实现，以允许在用户空间操作wakeup source，创建Kerne wakelock的即在指定的wakeup source上activate一个wakeup event，注销wakelock的本质是deactivate wakeup event，下面从读写/sys/power/wake_lock和/sys/power/wake_unlock两个sysfs文件来详细分析该流程。&lt;/p&gt;
&lt;h2 id=&quot;读写wake-lock&quot;&gt;&lt;a href=&quot;#读写wake-lock&quot; class=&quot;headerlink&quot; title=&quot;读写wake_lock&quot;&gt;&lt;/a&gt;读写wake_lock&lt;/h2&gt;&lt;p&gt;/sys/power/wake_lock的读写方法定义如下，/sys/power/wake_lock的写方法直接调用pm_wake_lock()，读方法直接调用pm_show_wakelocks()。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static ssize_t wake_lock_show(struct kobject *kobj,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			      struct kobj_attribute *attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			      char *buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return pm_show_wakelocks(buf, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static ssize_t wake_lock_store(struct kobject *kobj,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			       struct kobj_attribute *attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			       const char *buf, size_t n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error = pm_wake_lock(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return error ? error : n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power_attr(wake_lock);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;pm_wake_lock()与pm_show_wakelocks()都在wakelock.c中定义，先看pm_wake_lock()的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/wakelock.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int pm_wake_lock(const char *buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	const char *str = buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct wakelock *wl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	u64 timeout_ns = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	size_t len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int ret = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 检查当前进程是否具备阻止系统suspend的权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!capable(CAP_BLOCK_SUSPEND))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EPERM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 解析字符串，timeout_ns保存timeout值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	while (*str &amp;amp;&amp;amp; !isspace(*str))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		str++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	len = str - buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!len)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (*str &amp;amp;&amp;amp; *str != &amp;apos;\n&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		/* Find out if there&amp;apos;s a valid timeout string appended. */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = kstrtou64(skip_spaces(str), 10, &amp;amp;timeout_ns);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return -EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex_lock(&amp;amp;wakelocks_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 从RB tree中查找buf名字对应的wakelock，如果找到则返回，没找到则新建wakelock对象并返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wl = wakelock_lookup_add(buf, len, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (IS_ERR(wl)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = PTR_ERR(wl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto out;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 如果指定timeout值，以wakelock的wakeup source指针为参数，调用__pm_wakeup_event接口，上报一个具有时限的wakeup events；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 如果没有指定timeout值，调用__pm_stay_awake，上报一个没有时限的wakeup event。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (timeout_ns) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		u64 timeout_ms = timeout_ns + NSEC_PER_MSEC - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		do_div(timeout_ms, NSEC_PER_MSEC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		__pm_wakeup_event(&amp;amp;wl-&amp;gt;ws, timeout_ms);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		__pm_stay_awake(&amp;amp;wl-&amp;gt;ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wakelocks_lru_most_recent(wl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; out:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex_unlock(&amp;amp;wakelocks_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续看内部接口wakelock_lookup_add的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/wakelock.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static struct wakelock *wakelock_lookup_add(const char *name, size_t len,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					    bool add_if_not_found)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct rb_node **node = &amp;amp;wakelocks_tree.rb_node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct rb_node *parent = *node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct wakelock *wl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 根据name查找红黑树上对应的wakelock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	while (*node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int diff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		parent = *node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wl = rb_entry(*node, struct wakelock, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		diff = strncmp(name, wl-&amp;gt;name, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (diff == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (wl-&amp;gt;name[len])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				diff = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return wl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (diff &amp;lt; 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			node = &amp;amp;(*node)-&amp;gt;rb_left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			node = &amp;amp;(*node)-&amp;gt;rb_right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!add_if_not_found)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return ERR_PTR(-EINVAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (wakelocks_limit_exceeded())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return ERR_PTR(-ENOSPC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 没有找到，创建新的wakelock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wl = kzalloc(sizeof(*wl), GFP_KERNEL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!wl)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return ERR_PTR(-ENOMEM);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wl-&amp;gt;name = kstrndup(name, len, GFP_KERNEL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!wl-&amp;gt;name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		kfree(wl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return ERR_PTR(-ENOMEM);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wl-&amp;gt;ws.name = wl-&amp;gt;name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 将wakeup source添加到wakeup events framework中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wakeup_source_add(&amp;amp;wl-&amp;gt;ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 将该wakelock添加到红黑树&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rb_link_node(&amp;amp;wl-&amp;gt;node, parent, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rb_insert_color(&amp;amp;wl-&amp;gt;node, &amp;amp;wakelocks_tree);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 将新分配的wakeup添加到一个名称为wakelocks_lru_list的链表前端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wakelocks_lru_add(wl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	increment_wakelocks_number();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return wl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面继续看读wake_lock的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/wakelock.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssize_t pm_show_wakelocks(char *buf, bool show_active)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct rb_node *node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct wakelock *wl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	char *str = buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	char *end = buf + PAGE_SIZE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex_lock(&amp;amp;wakelocks_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 遍历红黑树，拿到wakelock指针，将该wakelock的名字添加在buf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (node = rb_first(&amp;amp;wakelocks_tree); node; node = rb_next(node)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wl = rb_entry(node, struct wakelock, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 判断其中的wakeup source的active变量与show_active是否相符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (wl-&amp;gt;ws.active == show_active)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			str += scnprintf(str, end - str, &amp;quot;%s &amp;quot;, wl-&amp;gt;name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (str &amp;gt; buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		str--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	str += scnprintf(str, end - str, &amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex_unlock(&amp;amp;wakelocks_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return (str - buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;读写wake-unlock&quot;&gt;&lt;a href=&quot;#读写wake-unlock&quot; class=&quot;headerlink&quot; title=&quot;读写wake_unlock&quot;&gt;&lt;/a&gt;读写wake_unlock&lt;/h2&gt;&lt;p&gt;/sys/power/wake_unlock的读写方法定义如下，/sys/power/wake_unlock的写方法直接调用pm_wake_unlock()，读方法直接调用pm_show_wakelocks()，pm_show_wakelocks在上面已经分析。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static ssize_t wake_unlock_show(struct kobject *kobj,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				struct kobj_attribute *attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				char *buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return pm_show_wakelocks(buf, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static ssize_t wake_unlock_store(struct kobject *kobj,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				 struct kobj_attribute *attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				 const char *buf, size_t n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error = pm_wake_unlock(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return error ? error : n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power_attr(wake_unlock);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;pm_wake_unlock()在wakelock.c中定义，下面看他的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/wakelock.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int pm_wake_unlock(const char *buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct wakelock *wl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	size_t len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int ret = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 检查当前进程是否具备阻止系统suspend的权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!capable(CAP_BLOCK_SUSPEND))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EPERM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 解析字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	len = strlen(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!len)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (buf[len-1] == &amp;apos;\n&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		len--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!len)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex_lock(&amp;amp;wakelocks_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//　根据name在RB树中查找是wakelock，没有则退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wl = wakelock_lookup_add(buf, len, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (IS_ERR(wl)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = PTR_ERR(wl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto out;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 调用__pm_relax接口，deactive wakelock对应的wakeup source。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__pm_relax(&amp;amp;wl-&amp;gt;ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 调用wakelocks_lru_most_recent接口，将盖wakelock移到wakelocks_lru_list链表的前端，并执行垃圾回收操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wakelocks_lru_most_recent(wl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wakelocks_gc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; out:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex_unlock(&amp;amp;wakelocks_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;wakelocks最初来源于Android在linux kernel上的一个补丁集，旨在允许用户空间的应用能够通过持有Wakelock来阻止系统进入低功耗模式。&lt;/p&gt;
&lt;p&gt;相关代码在以下文件中：&lt;br&gt;kernel/msm-4.4/kernel
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Power Management" scheme="http://robinheztto.com/tags/Power-Management/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之libsuspend</title>
    <link href="http://robinheztto.com/2017/05/20/android-power-libsuspend/"/>
    <id>http://robinheztto.com/2017/05/20/android-power-libsuspend/</id>
    <published>2017-05-20T08:38:19.000Z</published>
    <updated>2018-01-07T04:07:05.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Android向上层提供了操作休眠相关的接口(即读写/sys/power/目录下文件)，即libsuspend.so，&lt;br&gt;源码位于system/core/libsuspend下：&lt;br&gt;system/core/libsuspend&lt;br&gt;kernel/msm-4.4/kernel/power/suspend.c&lt;br&gt;kernel/msm-4.4/kernel/power/process.c&lt;br&gt;kernel/msm-4.4/kernel/power/console.c&lt;br&gt;kernel/msm-4.4/kernel/power/power.h&lt;br&gt;kernel/msm-4.4/include/linux/suspend.h&lt;br&gt;kernel-x.xx/drivers/misc/mediatek/base/power/spm_v2/mt_sleep.c&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android向上层提供了操作休眠相关的接口(即读写/sys/power/目录下文件)，即libsuspend.so，&lt;br&gt;源码位于system/core/libsuspend下：&lt;br&gt;system/core/libsuspend&lt;br&gt;ker
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Power Management" scheme="http://robinheztto.com/tags/Power-Management/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之Suspend</title>
    <link href="http://robinheztto.com/2017/05/05/android-power-suspend/"/>
    <id>http://robinheztto.com/2017/05/05/android-power-suspend/</id>
    <published>2017-05-05T07:46:56.000Z</published>
    <updated>2018-01-07T04:07:05.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;kernel/msm-4.4/kernel/power/main.c&lt;br&gt;kernel/msm-4.4/kernel/power/suspend.c&lt;br&gt;kernel/msm-4.4/kernel/power/process.c&lt;br&gt;kernel/msm-4.4/kernel/power/console.c&lt;br&gt;kernel/msm-4.4/kernel/power/power.h&lt;br&gt;kernel/msm-4.4/include/linux/suspend.h&lt;br&gt;kernel-x.xx/drivers/misc/mediatek/base/power/spm_v2/mt_sleep.c&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux kernel提供Freeze，Standby，STR(Supend to RAM)三种Suspend机制，当用户空间向”/sys/power/state”文件分别写”freeze”，”standby”，”mem”时即触发对应的suspend流程。关于PM_SUSPEND的定义如下所示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/include/linux/suspend.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define PM_SUSPEND_ON		((__force suspend_state_t) 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define PM_SUSPEND_FREEZE	((__force suspend_state_t) 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define PM_SUSPEND_STANDBY	((__force suspend_state_t) 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define PM_SUSPEND_MEM		((__force suspend_state_t) 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define PM_SUSPEND_MIN		PM_SUSPEND_FREEZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define PM_SUSPEND_MAX		((__force suspend_state_t) 4)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面先从/sys/power/下属性文件的创建开始分析。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int __init pm_init(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error = pm_start_workqueue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hibernate_image_size_init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hibernate_reserved_size_init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	power_kobj = kobject_create_and_add(&amp;quot;power&amp;quot;, NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!power_kobj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -ENOMEM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = sysfs_create_group(power_kobj, &amp;amp;attr_group);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_print_times_init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return pm_autosleep_init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;core_initcall(pm_init);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;pm_init中创建了/sys/power目录，并且根据attr_group的定义创建对应的属性文件，attr_group的定义如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static struct attribute * g[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;state_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_TRACE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;pm_trace_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;pm_trace_dev_match_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_SLEEP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;pm_async_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;wakeup_count_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_AUTOSLEEP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;autosleep_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_WAKELOCKS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;wake_lock_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;wake_unlock_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_DEBUG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;pm_test_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_SLEEP_DEBUG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;pm_print_times_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;pm_wakeup_irq_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_FREEZER&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;pm_freeze_timeout_attr.attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static struct attribute_group attr_group = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.attrs = g,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;attribute_group中定义了state_attr，pm_async_attr，wakeup_count_attr，wake_lock_attr，wake_unlock_attr等attribute，对应生成/sys/power/state，/sys/power/pm_async，/sys/power/wakeup_count，/sys/power/wake_lock，/sys/power/wake_unlock等属性文件。state_attr等attribute的show，sotre通过宏power_attr来定义的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/power.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define power_attr(_name) \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static struct kobj_attribute _name##_attr = &amp;#123;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.attr	= &amp;#123;				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.name = __stringify(_name),	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.mode = 0644,			\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,					\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.show	= _name##_show,			\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.store	= _name##_store,		\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power_attr(pm_async);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power_attr(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power_attr(wake_unlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power_attr(wake_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power_attr(wakeup_count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面首先看/sys/power/state的读取方法state_show的实现，即显平台所支持的Suspend机制(通过&lt;code&gt;cat /sys/power/state&lt;/code&gt;可查询)。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char *pm_states[PM_SUSPEND_MAX];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static ssize_t state_show(struct kobject *kobj, struct kobj_attribute *attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  char *buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	char *s = buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_SUSPEND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_state_t i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (i = PM_SUSPEND_MIN; i &amp;lt; PM_SUSPEND_MAX; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (pm_states[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			s += sprintf(s,&amp;quot;%s &amp;quot;, pm_states[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (hibernation_available())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s += sprintf(s, &amp;quot;disk &amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (s != buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		/* convert the last space to a newline */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*(s-1) = &amp;apos;\n&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return (s - buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;state_show实际上显示的是pm_states中的值，pm_states时在suspend_set_ops中初始化赋值的，后面再详细描述。继续看state_store即suspend的流程。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static ssize_t state_store(struct kobject *kobj, struct kobj_attribute *attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			   const char *buf, size_t n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_state_t state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = pm_autosleep_lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (pm_autosleep_state() &amp;gt; PM_SUSPEND_ON) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		error = -EBUSY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto out;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	state = decode_state(buf, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (state &amp;lt; PM_SUSPEND_MAX)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		error = pm_suspend(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	else if (state == PM_SUSPEND_MAX)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		error = hibernate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		error = -EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; out:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_autosleep_unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return error ? error : n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power_attr(state);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;state_store中首先解析从用户空间传入的buffer(freeze、standby or mem)，转换成state参数，然后调用pm_suspend()继续处理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/suspend.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int pm_suspend(suspend_state_t state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (state &amp;lt;= PM_SUSPEND_ON || state &amp;gt;= PM_SUSPEND_MAX)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_suspend_marker(&amp;quot;entry&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = enter_state(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		suspend_stats.fail++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dpm_save_failed_errno(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		suspend_stats.success++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_suspend_marker(&amp;quot;exit&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;pm_suspend中首先对参数state进行判断是否合法，然后继续调用enter_state。由pm_suspend_marker可以看到，”entry”与”exit”都是在pm_suspend中，enter_state函数进入休眠直到唤醒时才返回。另外debug时，可根据pm_suspend_marker确定进入与退出suspend的时间，如下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/suspend.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void pm_suspend_marker(char *annotation)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct timespec ts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct rtc_time tm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getnstimeofday(&amp;amp;ts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rtc_time_to_tm(ts.tv_sec, &amp;amp;tm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pr_info(&amp;quot;PM: suspend %s %d-%02d-%02d %02d:%02d:%02d.%09lu UTC\n&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		annotation, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续看enter_state的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/suspend.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int enter_state(suspend_state_t state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_suspend_resume(TPS(&amp;quot;suspend_enter&amp;quot;), state, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (state == PM_SUSPEND_FREEZE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_DEBUG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (pm_test_level != TEST_NONE &amp;amp;&amp;amp; pm_test_level &amp;lt;= TEST_CPUS) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pr_warning(&amp;quot;PM: Unsupported test mode for suspend to idle,&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				   &amp;quot;please choose none/freezer/devices/platform.\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return -EAGAIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 判断是否支持请求的状态state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else if (!valid_state(state)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 互斥锁，只允许同时处理一个suspend流程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!mutex_trylock(&amp;amp;pm_mutex))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EBUSY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 请求进入freeze，调用freeze_begin流程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (state == PM_SUSPEND_FREEZE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		freeze_begin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// state为standby或mem则进入一下流程处理，首先sync文件系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifndef CONFIG_SUSPEND_SKIP_SYNC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_suspend_resume(TPS(&amp;quot;sync_filesystems&amp;quot;), 0, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printk(KERN_INFO &amp;quot;PM: Syncing filesystems ... &amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sys_sync();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printk(&amp;quot;done.\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_suspend_resume(TPS(&amp;quot;sync_filesystems&amp;quot;), 0, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pr_debug(&amp;quot;PM: Preparing system for sleep (%s)\n&amp;quot;, pm_states[state]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_suspend_clear_flags();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 调用suspend_prepare进行suspend前的准备工作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = suspend_prepare(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Unlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (suspend_test(TEST_FREEZER))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Finish;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_suspend_resume(TPS(&amp;quot;suspend_enter&amp;quot;), state, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pr_debug(&amp;quot;PM: Suspending system (%s)\n&amp;quot;, pm_states[state]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_restrict_gfp_mask();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 进入suspend流程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = suspend_devices_and_enter(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_restore_gfp_mask();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Finish:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pr_debug(&amp;quot;PM: Finishing wakeup.\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 退出suspend,恢复suspend前的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_finish();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Unlock:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex_unlock(&amp;amp;pm_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;enter_state中根据state判断，如果是freeze，则进入freeze_begin()处理，如果是standby或mem，则首先同步文件系统，然后调用suspend_prepare进行suspend前的准备工作，最后在suspend_devices_and_enter中进入suspend，当系统唤醒时，在suspend_finish中进行恢复操作。下面详细分析该流程，首先看valid_state的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/include/linux/suspend.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct platform_suspend_ops &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int (*valid)(suspend_state_t state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int (*begin)(suspend_state_t state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int (*prepare)(void);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int (*prepare_late)(void);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int (*enter)(suspend_state_t state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	void (*wake)(void);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	void (*finish)(void);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bool (*suspend_again)(void);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	void (*end)(void);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	void (*recover)(void);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/suspend.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static const struct platform_suspend_ops *suspend_ops;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static bool valid_state(suspend_state_t state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * PM_SUSPEND_STANDBY and PM_SUSPEND_MEM states need low level&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * support and need to be valid to the low level&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * implementation, no valid callback implies that none are valid.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return suspend_ops &amp;amp;&amp;amp; suspend_ops-&amp;gt;valid &amp;amp;&amp;amp; suspend_ops-&amp;gt;valid(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;valid_state中调用的是suspend_ops-&amp;gt;valid，(注释可以看到PM_SUSPEND_STANDBY和PM_SUSPEND_MEM是需要底层支持)，即在平台代码中实现。下面以MTK平台为例，看platform_suspend_ops的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel-x.xx/drivers/misc/mediatek/base/power/spm_v2/mt_sleep.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int slp_suspend_ops_valid(suspend_state_t state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return state == PM_SUSPEND_MEM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int slp_suspend_ops_begin(suspend_state_t state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* legacy log */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slp_notice(&amp;quot;@@@@@@@@@@@@@@@@@@@@\tChip_pm_begin(%u)(%u)\t@@@@@@@@@@@@@@@@@@@@\n&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			is_cpu_pdn(slp_spm_flags), is_infra_pdn(slp_spm_flags));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slp_wake_reason = WR_NONE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void __attribute__((weak)) mt_power_gs_dump_suspend(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int slp_suspend_ops_prepare(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* legacy log */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slp_crit2(&amp;quot;@@@@@@@@@@@@@@@@@@@@\tChip_pm_prepare\t@@@@@@@@@@@@@@@@@@@@\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_MTKPASR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* PASR/DPD Preliminary operations */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int slp_suspend_ops_prepare_late(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slp_notice(&amp;quot;[%s]\n&amp;quot;, __func__);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mtkpasr_phaseone_ops();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void slp_suspend_ops_wake(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slp_notice(&amp;quot;[%s]\n&amp;quot;, __func__);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int slp_suspend_ops_enter(suspend_state_t state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void slp_suspend_ops_finish(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* legacy log */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slp_crit2(&amp;quot;@@@@@@@@@@@@@@@@@@@@\tChip_pm_finish\t@@@@@@@@@@@@@@@@@@@@\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void slp_suspend_ops_end(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* legacy log */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slp_notice(&amp;quot;@@@@@@@@@@@@@@@@@@@@\tChip_pm_end\t@@@@@@@@@@@@@@@@@@@@\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static const struct platform_suspend_ops slp_suspend_ops = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.valid = slp_suspend_ops_valid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.begin = slp_suspend_ops_begin,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.prepare = slp_suspend_ops_prepare,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.enter = slp_suspend_ops_enter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.finish = slp_suspend_ops_finish,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.end = slp_suspend_ops_end,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_MTKPASR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.prepare_late = slp_suspend_ops_prepare_late,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.wake = slp_suspend_ops_wake,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;mt_sleep.c中定义了platform_suspend_ops的实现，这里的slp_suspend_ops_valid支持的是PM_SUSPEND_MEM。接下来继续回到enter_state函数中分析suspend_prepare的流程。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/suspend.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int suspend_prepare(suspend_state_t state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 检查是否支持该state，PM_SUSPEND_FREEZE或者有实现suspend_ops-&amp;gt;enter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!sleep_state_supported(state))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -EPERM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 将当前console切换到一个虚拟console并重定向内核的kmsg  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_prepare_console();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 发送PM_SUSPEND_PREPARE消息  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = pm_notifier_call_chain(PM_SUSPEND_PREPARE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Finish;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_suspend_resume(TPS(&amp;quot;freeze_processes&amp;quot;), 0, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // freeze用户空间进程和内核线程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = suspend_freeze_processes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_suspend_resume(TPS(&amp;quot;freeze_processes&amp;quot;), 0, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_stats.failed_freeze++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dpm_save_failed_step(SUSPEND_FREEZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Finish:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 如果freeze失败，则恢复console的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_notifier_call_chain(PM_POST_SUSPEND);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pm_restore_console();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;suspend_prepare主要是处理console并冻结用户进程与内核线程，在suspend_prepare准备工作之后，调用suspend_devices_and_enter开始进入suspend状态。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/suspend.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int suspend_devices_and_enter(suspend_state_t state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bool wakeup = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 再次检查是否支持该state，PM_SUSPEND_FREEZE或者有实现suspend_ops-&amp;gt;enter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!sleep_state_supported(state))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return -ENOSYS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//调用平台实现suspend_ops-&amp;gt;begin()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = platform_suspend_begin(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Close;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//挂起console&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_console();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_test_start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//调用所有设备的-&amp;gt;prepare和-&amp;gt;suspend回调函数，注意suspend device可能失败，会跳至Recover_platform，执行recover操作（suspend_ops-&amp;gt;recover）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = dpm_suspend_start(PMSG_SUSPEND);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pr_err(&amp;quot;PM: Some devices failed to suspend, or early wake event detected\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log_suspend_abort_reason(&amp;quot;Some devices failed to suspend, or early wake event detected&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Recover_platform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_test_finish(&amp;quot;suspend devices&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (suspend_test(TEST_DEVICES))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Recover_platform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 最终，在suspend_enter中进入suspend状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		error = suspend_enter(state, &amp;amp;wakeup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; while (!error &amp;amp;&amp;amp; !wakeup &amp;amp;&amp;amp; platform_suspend_again(state));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Resume_devices:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_test_start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dpm_resume_end(PMSG_RESUME);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	suspend_test_finish(&amp;quot;resume devices&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_suspend_resume(TPS(&amp;quot;resume_console&amp;quot;), state, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	resume_console();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_suspend_resume(TPS(&amp;quot;resume_console&amp;quot;), state, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Close:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	platform_resume_end(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Recover_platform:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	platform_recover(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	goto Resume_devices;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;suspend_devices_and_enter中会挂起console，并执行设备驱动的-&amp;gt;prepare和-&amp;gt;suspend回调函数，然后在suspend_enter中进入休眠状态，通过返回值告知是否enter成功，同时通过wakeup指针，告知调用者，是否有wakeup事件发生，导致进入休眠失败。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/kernel/power/suspend.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int suspend_enter(suspend_state_t state, bool *wakeup)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	char suspend_abort[MAX_SUSPEND_ABORT_LEN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int error, last_dev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 调用suspend_ops-&amp;gt;prepare()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = platform_suspend_prepare(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Platform_finish;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 调用所有设备的-&amp;gt;suspend_late和-&amp;gt;suspend_noirq回调函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = dpm_suspend_late(PMSG_SUSPEND);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		last_dev = suspend_stats.last_failed_dev + REC_FAILED_NUM - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		last_dev %= REC_FAILED_NUM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		printk(KERN_ERR &amp;quot;PM: late suspend of devices failed\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log_suspend_abort_reason(&amp;quot;%s device failed to power down&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			suspend_stats.failed_devs[last_dev]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Platform_finish;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 调用suspend_ops的prepare_late回调&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = platform_suspend_prepare_late(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Devices_early_resume;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = dpm_suspend_noirq(PMSG_SUSPEND);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		last_dev = suspend_stats.last_failed_dev + REC_FAILED_NUM - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		last_dev %= REC_FAILED_NUM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		printk(KERN_ERR &amp;quot;PM: noirq suspend of devices failed\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log_suspend_abort_reason(&amp;quot;noirq suspend of %s device failed&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			suspend_stats.failed_devs[last_dev]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Platform_early_resume;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = platform_suspend_prepare_noirq(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Platform_wake;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (suspend_test(TEST_PLATFORM))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Platform_wake;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 如果是suspend to freeze，执行相应的操作，包括冻结进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * suspended devices（参数为PM_SUSPEND_FREEZE）、cpu进入idle。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 如果有任何事件使CPU从idle状态退出，跳至Platform_wake处，执行wake操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (state == PM_SUSPEND_FREEZE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		trace_suspend_resume(TPS(&amp;quot;machine_suspend&amp;quot;), state, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		freeze_enter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		trace_suspend_resume(TPS(&amp;quot;machine_suspend&amp;quot;), state, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Platform_wake;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 禁止所有的非boot cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = disable_nonboot_cpus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (error || suspend_test(TEST_CPUS)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log_suspend_abort_reason(&amp;quot;Disabling non-boot cpus failed&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		goto Enable_cpus;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//关全局中断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arch_suspend_disable_irqs();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	BUG_ON(!irqs_disabled());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 调用syscore_suspend，suspend system core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	error = syscore_suspend();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 检查一下suspend执行这段时间内，是否有唤醒事件发生&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*wakeup = pm_wakeup_pending();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (!(suspend_test(TEST_CORE) || *wakeup)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			trace_suspend_resume(TPS(&amp;quot;machine_suspend&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				state, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 调用suspend_ops-&amp;gt;enter进入休眠状态  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			error = suspend_ops-&amp;gt;enter(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			trace_suspend_resume(TPS(&amp;quot;machine_suspend&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				state, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			events_check_enabled = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else if (*wakeup) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pm_get_active_wakeup_sources(suspend_abort,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				MAX_SUSPEND_ABORT_LEN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			log_suspend_abort_reason(suspend_abort);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			error = -EBUSY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		syscore_resume();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arch_suspend_enable_irqs();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	BUG_ON(irqs_disabled());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Enable_cpus:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	enable_nonboot_cpus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Platform_wake:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	platform_resume_noirq(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dpm_resume_noirq(PMSG_RESUME);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;suspend_ops-&amp;gt;enter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Platform_early_resume:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	platform_resume_early(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Devices_early_resume:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dpm_resume_early(PMSG_RESUME);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Platform_finish:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	platform_resume_finish(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;suspend_enter中经过一系列的处理，最终在suspend_ops-&amp;gt;enter中进入休眠状态，当唤醒事件发生，系统唤醒，该函数接着执行resume动作，并最终返回，resume动作基本上是suspend的反动作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;kernel/msm-4.4/kernel/power/main.c&lt;br&gt;kernel/msm-4.4/kernel/power/suspend.c&lt;br&gt;kernel/msm-4.4/kernel/power/process.c&lt;br&gt;kern
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="PowerManagement" scheme="http://robinheztto.com/tags/PowerManagement/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之System wakeup events framework</title>
    <link href="http://robinheztto.com/2017/05/01/android-power-system-wakeup-events-framework/"/>
    <id>http://robinheztto.com/2017/05/01/android-power-system-wakeup-events-framework/</id>
    <published>2017-05-01T07:46:56.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;kernel/msm-4.4/drivers/base/power/wakeup.c&lt;br&gt;kernel/msm-4.4/include/linux/pm_wakeup.h&lt;br&gt;kernel/msm-4.4/include/linux/pm.h&lt;br&gt;kernel/msm-4.4/include/linux/device.h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Android以Linux kernel为系统内核，其电源管理也是基于Linux电源管理子系统的，但是由于传统的Linux系统主要针对PC而非移动设备，对于PC系统，Linux默认是在用户不再使用时才再触发系统进入休眠(STR、Standby、Hibernate)，但是对于移动设备的使用特点而言，并没有明确的不再使用设备的时候，用户随时随地都可能需要使用设备，于是在Android上就有提出了“Opportunistic suspend”的概念，即逮到机会就睡直到下次被唤醒，以适应移动设备的使用特点。&lt;/p&gt;
&lt;p&gt;早期，Android为解决该问题，在标准Linux的基础上增加了Early Suspend和Late Resume机制，Early suspend是在熄屏后，提前将一些不会用到的设备(比如背光、重力感应器和触摸屏等设备)关闭，但此时系统仍能持有wake lock后台运行。该方案将Linux原来suspend的流程改变，并增加了Android自己的处理函数，与kernel的流程与机制相冲突，另外一个问题就是存在suspend和wakeup events之间的同步问题，比如当系统进入suspend流程中，会进行freeze process，device prepared，device suspend，disabled irq等操作，如果在suspend流程中有wakeup events产生，而此时系统无法从suspend过程中唤醒。&lt;/p&gt;
&lt;p&gt;后来Linux加入wakeup events framework，包括wake lock、wakeup count、autosleep等机制。用来解决system suspend和system wakeup events之间的同步问题。同时在Android4.4中，Android中也去掉了之前的”wakelocks”机制，利用wakeup events framework重新设计了wakelocks，并且维持上层API不变。&lt;/p&gt;
&lt;p&gt;system suspend和system wakeup events之间的同步问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核空间的同步:&lt;br&gt;wakeup events产生后，通常是以中断的形式通知device driver。driver会处理events，处理的过程中，系统不能suspend。&lt;/li&gt;
&lt;li&gt;用户空间的同步:&lt;br&gt;一般情况下，driver对wakeup events处理后，会交给用户空间程序继续处理，处理的过程，也不允许suspend。这又可以分为两种情况：&lt;ol&gt;
&lt;li&gt;进行后续处理的用户进程，根本没有机会被调度，即该wakeup events无法上报到用户空间。&lt;/li&gt;
&lt;li&gt;进行后续处理的用户进程被调度，处理的过程中（以及处理结束后，决定终止suspend操作），系统不能suspend。(wake lock功能)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wakeup events framework主要解决上述三个同步问题，内核空间的同步(framework的核心功能)，用户空间的同步情形1(wakeup count功能)，用户空间的同步情形2(wake lock功能)。  &lt;/p&gt;
&lt;h1 id=&quot;代码分析&quot;&gt;&lt;a href=&quot;#代码分析&quot; class=&quot;headerlink&quot; title=&quot;代码分析&quot;&gt;&lt;/a&gt;代码分析&lt;/h1&gt;&lt;p&gt;下面是wakeup events framework的architecture图(来自&lt;a href=&quot;http://www.wowotech.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蜗窝科技&lt;/a&gt;)&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/wakeup-events-framework-arch.jpeg?raw=true&quot; alt=&quot;wakeup events framework architecture&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;wakeup events framework sysfs将设备的wakeup信息，以sysfs的形式提供到用户空间，供用户空间访问(在drivers/base/power/sysfs.c中实现)。&lt;br&gt;&lt;br&gt;## wakeup source&lt;br&gt;在kernel中，只有设备才能唤醒系统，但并不是所有设备都具备唤醒系统的能力，具备唤醒能力的设备即“wakeup source”，会在设备结构体struce device中标志该设备具有唤醒能力。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; kernel/msm-4.4/include/linux/device.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct device &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    struct dev_pm_info  power;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    struct dev_pm_domain    *pm_domain;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/include/linux/pm_wakeup.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static inline bool device_can_wakeup(struct device *dev)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return dev-&amp;gt;power.can_wakeup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static inline bool device_may_wakeup(struct device *dev)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return dev-&amp;gt;power.can_wakeup &amp;amp;&amp;amp; !!dev-&amp;gt;power.wakeup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;由device_can_wakeup()函数可知，通过dev-&amp;gt;power.can_wakeup来判断该设备是否能唤醒系统，struct dev_pm_info的定义如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/include/linux/pm.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct dev_pm_info &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned int		can_wakeup:1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef CONFIG_PM_SLEEP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct wakeup_source	*wakeup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned int		should_wakeup:1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;struct dev_pm_info中的can_wakeup标识该设备是否具有唤醒能力。具备唤醒能力的设备在sys/devices/xxx/下存在power相关目录，用于提供所有的wakeup信息，这些信息是以struct wakeup_source的结构组织，即struct dev_pm_info中的wakeup指针。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/include/linux/pm_wakeup.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * struct wakeup_source - Representation of wakeup sources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @name: 唤醒源的名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @entry: 用来将唤醒源挂到链表上，用于管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @lock: 同步机制，用于访问链表时使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @wakeirq:Optional device specific wakeirq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @timer: 定时器，用于设置该唤醒源的超时时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @timer_expires:  定时器的超时时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @total_time:  wakeup source处于active状态的总时间，可指示该wakeup source对应的设备的繁忙程度、耗电等级&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @max_time: wakeup source处于active状态的最长时间（越长越不合理）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @last_time: wakeup source处于active状态的上次时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @prevent_sleep_time: wakeup source阻止系统自动休眠的总时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @event_count:  wakeup source上报wakeup event的个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @active_count: wakeup source处于active状态的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @relax_count: wakeup source处于deactive状态的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @expire_count: wakeup source timeout次数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @wakeup_count: wakeup source abort睡眠的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @active: wakeup source的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @has_timeout: The wakeup source has been activated with a timeout.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct wakeup_source &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	const char 		*name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct list_head	entry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spinlock_t		lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct wake_irq		*wakeirq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct timer_list	timer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long		timer_expires;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ktime_t total_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ktime_t max_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ktime_t last_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ktime_t start_prevent_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ktime_t prevent_sleep_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long		event_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long		active_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long		relax_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long		expire_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long		wakeup_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bool			active:1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bool			autosleep_enabled:1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;wakeup source代表一个具有唤醒能力的设备，该设备产生的可以唤醒系统的事件，就称作wakeup event。当wakeup source产生wakeup event时，需要将wakeup source切换为activate状态；当wakeup event处理完毕后，要切换为deactivate状态。当wakeup source产生wakeup event时，需要切换到activate状态，但并不是每次都需要切换，因此有可能已经处于activate状态了。因此active_count可能小于event_count，换句话说，很有可能在前一个wakeup event没被处理完时，又产生了一个，这从一定程度上反映了wakeup source所代表的设备的繁忙程度。wakeup source在suspend过程中产生wakeup event的话，就会终止suspend过程，wakeup_count记录了wakeup source终止suspend过程的次数（如果发现系统总是suspend失败，检查一下各个wakeup source的该变量，就可以知道问题出在谁身上了）。&lt;br&gt;为了方便查看系统的wakeup sources的信息，linux系统在/sys/kernel/debug下创建了一个”wakeup_sources”文件，此文件记录了系统的唤醒源的详细信息。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/drivers/base/power/wakeup.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int wakeup_sources_stats_show(struct seq_file *m, void *unused)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	struct wakeup_source *ws;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	seq_puts(m, &amp;quot;name\t\tactive_count\tevent_count\twakeup_count\t&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;expire_count\tactive_since\ttotal_time\tmax_time\t&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;last_change\tprevent_suspend_time\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rcu_read_lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	list_for_each_entry_rcu(ws, &amp;amp;wakeup_sources, entry)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		print_wakeup_source_stats(m, ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rcu_read_unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print_wakeup_source_stats(m, &amp;amp;deleted_ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int wakeup_sources_stats_open(struct inode *inode, struct file *file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return single_open(file, wakeup_sources_stats_show, NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static const struct file_operations wakeup_sources_stats_fops = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.owner = THIS_MODULE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.open = wakeup_sources_stats_open,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.read = seq_read,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.llseek = seq_lseek,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.release = single_release,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int __init wakeup_sources_debugfs_init(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wakeup_sources_stats_dentry = debugfs_create_file(&amp;quot;wakeup_sources&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			S_IRUGO, NULL, NULL, &amp;amp;wakeup_sources_stats_fops);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;postcore_initcall(wakeup_sources_debugfs_init);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;如下图示，通过&lt;code&gt;cat /sys/kernel/debug/wakeup_sources&lt;/code&gt;获取wakeup_sources信息：&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/sys_kernel_debug_wakeup_sources.png?raw=true&quot; alt=&quot;sys_kernel_debug_wakeup_sources&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;机制&quot;&gt;&lt;a href=&quot;#机制&quot; class=&quot;headerlink&quot; title=&quot;机制&quot;&gt;&lt;/a&gt;机制&lt;/h2&gt;&lt;p&gt;wakeup events framework中抽象了wakeup source和wakeup event的概念，向各个device driver提供wakeup source的注册、使能等及wakeup event的上报、停止等接口，同时也向上层提供wakeup event的查询接口，以判断是否可以suspend或者是否需要终止正在进行的suspend。&lt;/p&gt;
&lt;h3 id=&quot;pm-stay-awake&quot;&gt;&lt;a href=&quot;#pm-stay-awake&quot; class=&quot;headerlink&quot; title=&quot;pm_stay_awake()&quot;&gt;&lt;/a&gt;pm_stay_awake()&lt;/h3&gt;&lt;p&gt;当设备有wakeup event正在处理时，需要调用该接口通知PM core，该接口的实现如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/drivers/base/power/wakeup.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void pm_stay_awake(struct device *dev)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!dev)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spin_lock_irqsave(&amp;amp;dev-&amp;gt;power.lock, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__pm_stay_awake(dev-&amp;gt;power.wakeup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spin_unlock_irqrestore(&amp;amp;dev-&amp;gt;power.lock, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void __pm_stay_awake(struct wakeup_source *ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spin_lock_irqsave(&amp;amp;ws-&amp;gt;lock, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wakeup_source_report_event(ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	del_timer(&amp;amp;ws-&amp;gt;timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;timer_expires = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spin_unlock_irqrestore(&amp;amp;ws-&amp;gt;lock, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void wakeup_source_report_event(struct wakeup_source *ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;event_count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* This is racy, but the counter is approximate anyway. */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (events_check_enabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ws-&amp;gt;wakeup_count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!ws-&amp;gt;active)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wakeup_source_activate(ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;pm_stay_awake中直接调用&lt;strong&gt;pm_stay_awake，\&lt;/strong&gt;pm_stay_awake直接调用wakeup_source_report_event。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/drivers/base/power/wakeup.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void wakeup_source_report_event(struct wakeup_source *ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;event_count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* This is racy, but the counter is approximate anyway. */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (events_check_enabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ws-&amp;gt;wakeup_count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!ws-&amp;gt;active)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wakeup_source_activate(ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;wakeup_source_report_event中增加wakeup source的event_count次数，即表示该source又产生了一个event。然后根据events_check_enabled变量的状态，增加wakeup_count。如果wakeup source没有active，则调用wakeup_source_activate进行activate操作。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/drivers/base/power/wakeup.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void wakeup_source_activate(struct wakeup_source *ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned int cec;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * active wakeup source should bring the system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * out of PM_SUSPEND_FREEZE state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	freeze_wake();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;active = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;active_count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;last_time = ktime_get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (ws-&amp;gt;autosleep_enabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ws-&amp;gt;start_prevent_time = ws-&amp;gt;last_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* Increment the counter of events in progress. */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cec = atomic_inc_return(&amp;amp;combined_event_count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_wakeup_source_activate(ws-&amp;gt;name, cec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;wakeup_source_activate中首先调用freeze_wake，将系统从suspend to freeze状态下唤醒，然后设置active标志，增加active_count，更新last_time。如果使能了autosleep，更新start_prevent_time，此刻该wakeup source会开始阻止系统auto sleep。增加“wakeup events in progress”计数，增加该计数意味着系统正在处理的wakeup event数目不为零，即系统不能suspend。&lt;/p&gt;
&lt;h2 id=&quot;pm-relax&quot;&gt;&lt;a href=&quot;#pm-relax&quot; class=&quot;headerlink&quot; title=&quot;pm_relax()&quot;&gt;&lt;/a&gt;pm_relax()&lt;/h2&gt;&lt;p&gt;pm_relax和pm_stay_awake成对出现，用于在wakeup event处理结束后通知PM core，其实现如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/drivers/base/power/wakeup.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void pm_relax(struct device *dev)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!dev)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spin_lock_irqsave(&amp;amp;dev-&amp;gt;power.lock, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__pm_relax(dev-&amp;gt;power.wakeup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spin_unlock_irqrestore(&amp;amp;dev-&amp;gt;power.lock, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void __pm_relax(struct wakeup_source *ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spin_lock_irqsave(&amp;amp;ws-&amp;gt;lock, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (ws-&amp;gt;active)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wakeup_source_deactivate(ws);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spin_unlock_irqrestore(&amp;amp;ws-&amp;gt;lock, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;pm_relax中直接调用&lt;strong&gt;pm_relax，\&lt;/strong&gt;pm_relax判断wakeup source如果处于active状态，则调用wakeup_source_deactivate接口，deactivate该wakeup source。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; kernel/msm-4.4/drivers/base/power/wakeup.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void wakeup_source_deactivate(struct wakeup_source *ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned int cnt, inpr, cec;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ktime_t duration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ktime_t now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;relax_count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (ws-&amp;gt;relax_count != ws-&amp;gt;active_count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ws-&amp;gt;relax_count--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;active = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	now = ktime_get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	duration = ktime_sub(now, ws-&amp;gt;last_time);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;total_time = ktime_add(ws-&amp;gt;total_time, duration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (ktime_to_ns(duration) &amp;gt; ktime_to_ns(ws-&amp;gt;max_time))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ws-&amp;gt;max_time = duration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;last_time = now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	del_timer(&amp;amp;ws-&amp;gt;timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ws-&amp;gt;timer_expires = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (ws-&amp;gt;autosleep_enabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		update_prevent_sleep_time(ws, now);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Increment the counter of registered wakeup events and decrement the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * couter of wakeup events in progress simultaneously.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cec = atomic_add_return(MAX_IN_PROGRESS, &amp;amp;combined_event_count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trace_wakeup_source_deactivate(ws-&amp;gt;name, cec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	split_counters(&amp;amp;cnt, &amp;amp;inpr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!inpr &amp;amp;&amp;amp; waitqueue_active(&amp;amp;wakeup_count_wait_queue))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wake_up(&amp;amp;wakeup_count_wait_queue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wowotech.net/pm_subsystem/wakeup_events_framework.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蜗窝科技:Wakeup events framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/wlwl0071986/article/details/42672591&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSDN:三种休眠机制的分析和比较&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;kernel/msm-4.4/drivers/base/power/wakeup.c&lt;br&gt;kernel/msm-4.4/include/linux/pm_wakeup.h&lt;br&gt;kernel/msm-4.4/include/linux/pm.h&lt;
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="PowerManagement" scheme="http://robinheztto.com/tags/PowerManagement/"/>
    
  </entry>
  
  <entry>
    <title>Android电源管理系列之Basic</title>
    <link href="http://robinheztto.com/2017/04/20/android-power-basic/"/>
    <id>http://robinheztto.com/2017/04/20/android-power-basic/</id>
    <published>2017-04-20T01:07:54.000Z</published>
    <updated>2018-01-07T04:07:05.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;1. Sleep/Suspend&lt;/strong&gt;&lt;br&gt;系统休眠Sleep，Linux Kernel中称作Suspend。系统进入Suspend状态确切来说时CPU进入了Suspend模式，因为对整个系统来说CPU休眠是整个系统休眠的先决条件。CPU Suspend即CPU进入Wait for interrupt状态（WFI），SW完全不跑了，停在suspend workqueue里面。&lt;br&gt;Android系统从灭屏到系统进入Suspend的大体流程框架如下:&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/suspend_flow.png?raw=true&quot; alt=&quot;Suspend flow&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;相关代码如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java&lt;br&gt;/frameworks/base/services/core/jni/com_android_server_power_PowerManagerService.cpp&lt;br&gt;/system/core/libsuspend/&lt;br&gt;/kernel-x.x/kernel/power/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;2. SPM&lt;/strong&gt;&lt;br&gt;SPM即System Power Manager，管理着包括AP，Modem，Connectivity等子系统。在CPU进入WFI状态后，整个系统就依靠SPM监控各个子系统的状态来控制睡眠/唤醒的流程。&lt;br&gt;SPM控制Cpu Suspend之后系统是否能掉到最小电流，当系统的关键资源（memory、clock）没有任何使用的时候，它就会让系统进入一个真正的深睡状态（最小电流），但只要检测到有任何资源请求还没释放，系统就无法降到底电流。在底电流的debug流程中，不仅仅要看CPU有没有Suspend成功，还要看SPM的状态是否正确。&lt;/p&gt;
&lt;p&gt;MTK平台:&lt;br&gt;CPU在进入WFI状态前会把SPM的firmware写入到SPM里的可编程控制器PCM中（Programmable Command Master），然后PCM就依据firmware的逻辑来控制SPM的工作。系统中存在32k，26M二个时钟，系统工作在最小电流的时候，SPM只依靠32K时钟工作，因此要判断系统是不是已经到深休状态，就要看26M有没有关闭。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/RobinHeZtto/Resource/blob/master/blog/image/android/power/26M_control.png?raw=true&quot; alt=&quot;26M clock control&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;如上图所示，26M时钟有没有关，只需要看SCLKENA信号有没有关闭，而SPM对这个信号的输出以及子系统的信号输入，都记录在SPM的寄存器里面，这个就是我们通过log排查的依据。&lt;br&gt;相关代码如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/kernel-x.x/drivers/misc/mediatek/base/power/spm_vx/&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1. Sleep/Suspend&lt;/strong&gt;&lt;br&gt;系统休眠Sleep，Linux Kernel中称作Suspend。系统进入Suspend状态确切来说时CPU进入了Suspend模式，因为对整个系统来说CPU休眠是整个系统休眠的先决条件。CPU Su
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="Power" scheme="http://robinheztto.com/tags/Power/"/>
    
  </entry>
  
  <entry>
    <title>Android之AlarmManagerService(三)</title>
    <link href="http://robinheztto.com/2017/03/12/android-alarm-3/"/>
    <id>http://robinheztto.com/2017/03/12/android-alarm-3/</id>
    <published>2017-03-12T03:20:08.000Z</published>
    <updated>2018-06-24T16:24:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本篇分析Android上对于Alarm的优化，主要是对齐唤醒机制，也就是把一定时间段内的多次Alarm唤醒合并成一次，减少系统被唤醒次数，增加待机时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;原生的对齐机制&quot;&gt;&lt;a href=&quot;#原生的对齐机制&quot; class=&quot;headerlink&quot; title=&quot;原生的对齐机制&quot;&gt;&lt;/a&gt;原生的对齐机制&lt;/h1&gt;&lt;p&gt;Beginning with API 19 (KITKAT) alarm delivery is inexact: the OS will shift alarms in order to minimize wakeups and battery use. There are new APIs to support applications which need strict delivery guarantees; see setWindow(int, long, long, PendingIntent) and setExact(int, long, PendingIntent). Applications whose targetSdkVersion is earlier than API 19 will continue to see the previous behavior in which all alarms are delivered exactly when requested.&lt;/p&gt;
&lt;p&gt;从Android L版本开始，Android原生系统对AlarmManager默认set方法对alarm进行了对齐，alarm的触发时间不保证准确，同时也提供了setExact()，setWindow()用于设置精准时钟。&lt;/p&gt;
&lt;p&gt;AlarmManagerService中根据windowLength来判断是否需要进行对齐，使用set()或setRepeating()等方法的windowLength被设置为WINDOW_HEURISTIC，使用setExact()方法的windowLength被设置成WINDOW_EXACT。对于windowLength设置成WINDOW_HEURISTIC的情况，AlarmManagerService会计算alarm的时间窗口(最大触发时间)，然后通过batch处理，将时间窗口有重合的alarm合并到同一个alarm中统一触发。WINDOW_EXACT的alarm的alarm还是精准时钟，放在单独的batch中处理。&lt;/p&gt;
&lt;p&gt;虽然Android原生系统对alarm进行了对齐处理，但是仅仅是针对于非精确时钟，且当前国内应用基本上无论是否需要使用的都是setExact()等精准alarm接口，所以原生的对齐机制在国内作用很小。&lt;/p&gt;
&lt;h1 id=&quot;MTK对齐机制&quot;&gt;&lt;a href=&quot;#MTK对齐机制&quot; class=&quot;headerlink&quot; title=&quot;MTK对齐机制&quot;&gt;&lt;/a&gt;MTK对齐机制&lt;/h1&gt;&lt;p&gt;MTK在原生batch机制上对alarm的对齐做了进一步增强，&lt;/p&gt;
&lt;h1 id=&quot;Spreadtrum对齐心跳机制&quot;&gt;&lt;a href=&quot;#Spreadtrum对齐心跳机制&quot; class=&quot;headerlink&quot; title=&quot;Spreadtrum对齐心跳机制&quot;&gt;&lt;/a&gt;Spreadtrum对齐心跳机制&lt;/h1&gt;&lt;h1 id=&quot;智能优化方案&quot;&gt;&lt;a href=&quot;#智能优化方案&quot; class=&quot;headerlink&quot; title=&quot;智能优化方案&quot;&gt;&lt;/a&gt;智能优化方案&lt;/h1&gt;&lt;p&gt;目标：尽量过滤合理开发范围内，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;灭屏，未充电&lt;/li&gt;
&lt;li&gt;wakeup alarm&lt;/li&gt;
&lt;li&gt;系统应用，白名单应用，CTS应用不触发对齐&lt;/li&gt;
&lt;li&gt;alarmClock不触发对齐&lt;/li&gt;
&lt;li&gt;触发时间在　后不触发对齐&lt;/li&gt;
&lt;li&gt;窗口时间大于　不触发对齐&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇分析Android上对于Alarm的优化，主要是对齐唤醒机制，也就是把一定时间段内的多次Alarm唤醒合并成一次，减少系统被唤醒次数，增加待机时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;原生的对齐机制&quot;&gt;&lt;a href=&quot;#原生
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="AlarmManagerService" scheme="http://robinheztto.com/tags/AlarmManagerService/"/>
    
  </entry>
  
  <entry>
    <title>Android之AlarmManagerService(二)</title>
    <link href="http://robinheztto.com/2017/03/11/android-alarm-2/"/>
    <id>http://robinheztto.com/2017/03/11/android-alarm-2/</id>
    <published>2017-03-11T01:16:08.000Z</published>
    <updated>2018-01-07T04:07:05.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本篇继续分析Alarm设置及触发的流程。&lt;/p&gt;
&lt;p&gt;相关源码位于以下文件中:&lt;br&gt;frameworks/base/core/java/android/app/AlarmManager.java&lt;br&gt;frameworks/base/services/core/java/com/android/server/AlarmManagerService.java&lt;br&gt;frameworks/base/services/core/jni/com_android_server_AlarmManagerService.cpp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Alarm-set&quot;&gt;&lt;a href=&quot;#Alarm-set&quot; class=&quot;headerlink&quot; title=&quot;Alarm set&quot;&gt;&lt;/a&gt;Alarm set&lt;/h1&gt;&lt;p&gt;下面从AlarmManagerService中的set方法开始分析Alarm set的实现过程。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;　frameworks/base/services/core/java/com/android/server/AlarmManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private final IBinder mService = new IAlarmManager.Stub() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void set(String callingPackage,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          int type, long triggerAtTime, long windowLength, long interval, int flags,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          PendingIntent operation, IAlarmListener directReceiver, String listenerTag,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          WorkSource workSource, AlarmManager.AlarmClockInfo alarmClock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      final int callingUid = Binder.getCallingUid();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // make sure the caller is not lying about which package should be blamed for&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // wakelock time spent in alarm delivery&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mAppOps.checkPackage(callingUid, callingPackage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // Repeating alarms必须使用PendingIntent，不能使用AlarmListener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (interval != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          if (directReceiver != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              throw new IllegalArgumentException(&amp;quot;Repeating alarms cannot use AlarmReceivers&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (workSource != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          getContext().enforcePermission(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  android.Manifest.permission.UPDATE_DEVICE_STATS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  Binder.getCallingPid(), callingUid, &amp;quot;AlarmManager.set&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 清除callers的flag:WAKE_FROM_IDLE或FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED(需根据具体条件设置)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flags &amp;amp;= ~(AlarmManager.FLAG_WAKE_FROM_IDLE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 只有DeviceIdleController可设置FLAG_IDLE_UNTIL,以进入Doze Idle状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (callingUid != Process.SYSTEM_UID) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flags &amp;amp;= ~AlarmManager.FLAG_IDLE_UNTIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 如果是请求设置精确alarm，设置FLAG_STANDALONE，标志不对其进行batch批处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (windowLength == AlarmManager.WINDOW_EXACT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flags |= AlarmManager.FLAG_STANDALONE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 如果是alarmClock，设置FLAG_WAKE_FROM_IDLE可从idle唤醒，FLAG_STANDALONE不对其进行batch批处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (alarmClock != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flags |= AlarmManager.FLAG_WAKE_FROM_IDLE | AlarmManager.FLAG_STANDALONE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 如果caller是系统/用户设置mDeviceIdleUserWhitelist白名单，设置FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED标志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 即在Doze Idle模式下精准时间，不受影响&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; else if (workSource == null &amp;amp;&amp;amp; (callingUid &amp;lt; Process.FIRST_APPLICATION_UID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              || Arrays.binarySearch(mDeviceIdleUserWhitelist,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      UserHandle.getAppId(callingUid)) &amp;gt;= 0)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flags |= AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flags &amp;amp;= ~AlarmManager.FLAG_ALLOW_WHILE_IDLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      setImpl(type, triggerAtTime, windowLength, interval, operation, directReceiver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              listenerTag, flags, workSource, alarmClock, callingUid, callingPackage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;set()中对请求的参数进行了初步处理，然后继续调用setImpl()。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;　frameworks/base/services/core/java/com/android/server/AlarmManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void setImpl(int type, long triggerAtTime, long windowLength, long interval,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PendingIntent operation, IAlarmListener directReceiver, String listenerTag,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int flags, WorkSource workSource, AlarmManager.AlarmClockInfo alarmClock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int callingUid, String callingPackage) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // PendingIntent与AlarmListener不能同时设置或同时为空&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ((operation == null &amp;amp;&amp;amp; directReceiver == null)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            || (operation != null &amp;amp;&amp;amp; directReceiver != null)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Slog.w(TAG, &amp;quot;Alarms must either supply a PendingIntent or an AlarmReceiver&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // windowLength时间大于INTERVAL_HALF_DAY时，设置为INTERVAL_HOUR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (windowLength &amp;gt; AlarmManager.INTERVAL_HALF_DAY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Slog.w(TAG, &amp;quot;Window length &amp;quot; + windowLength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &amp;quot;ms suspiciously long; limiting to 1 hour&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        windowLength = AlarmManager.INTERVAL_HOUR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Repeating alarm的Repeat周期时间最短为MIN_INTERVAL即1s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long minInterval = mConstants.MIN_INTERVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (interval &amp;gt; 0 &amp;amp;&amp;amp; interval &amp;lt; minInterval) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Slog.w(TAG, &amp;quot;Suspiciously short interval &amp;quot; + interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &amp;quot; millis; expanding to &amp;quot; + (minInterval/1000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &amp;quot; seconds&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        interval = minInterval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 检查定时器类型的合法性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (type &amp;lt; RTC_WAKEUP || type &amp;gt; RTC_POWEROFF_WAKEUP) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw new IllegalArgumentException(&amp;quot;Invalid alarm type &amp;quot; + type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 检查triggerAtTime触发时间的合法性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (triggerAtTime &amp;lt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final long what = Binder.getCallingPid();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Slog.w(TAG, &amp;quot;Invalid alarm trigger time! &amp;quot; + triggerAtTime + &amp;quot; from uid=&amp;quot; + callingUid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &amp;quot; pid=&amp;quot; + what);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        triggerAtTime = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long nowElapsed = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 将触发绝对时间转化为相对时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long nominalTrigger = convertToElapsed(triggerAtTime, type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 为了防止定时器滥用，最小触发时间设置为当前时间之后5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long minTrigger = nowElapsed + mConstants.MIN_FUTURITY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 计算触发时间，当传入的触发时间大于最小触发时间时，使用传入触发时间，否则使用最小触发时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long triggerElapsed = (nominalTrigger &amp;gt; minTrigger) ? nominalTrigger : minTrigger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long maxElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (windowLength == AlarmManager.WINDOW_EXACT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 精确alarm，最大触发时间即为上面计算的触发时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxElapsed = triggerElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (windowLength &amp;lt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 非精准alarm，计算最大触发时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxElapsed = maxTriggerTime(nowElapsed, triggerElapsed, interval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 根据最大触发时间修正alarm的时间窗时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        windowLength = maxElapsed - triggerElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 如果时间窗口&amp;gt;0，最大触发时间设置为触发时间加时间窗口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxElapsed = triggerElapsed + windowLength;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setImplLocked(type, triggerAtTime, triggerElapsed, windowLength, maxElapsed,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                interval, operation, directReceiver, listenerTag, flags, true, workSource,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                alarmClock, callingUid, callingPackage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 非精准alarm，计算最大触发时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static final long MIN_FUZZABLE_INTERVAL = 10000;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static long maxTriggerTime(long now, long triggerAtTime, long interval) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    long futurity = (interval == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ? (triggerAtTime - now)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            : interval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 如果下一次触发的时间小于10秒，最大触发时间即为当前触发时间        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (futurity &amp;lt; MIN_FUZZABLE_INTERVAL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        futurity = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 下一次触发的时间大于10秒，把0.75倍的下次触发时间+当前触发时间作为alarm的最大触发时间maxElapsed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return triggerAtTime + (long)(.75 * futurity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;setImpl中进一步对参数进行检查，然后调用setImplLocked()。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private void setImplLocked(int type, long when, long whenElapsed, long windowLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        long maxWhen, long interval, PendingIntent operation, IAlarmListener directReceiver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String listenerTag, int flags, boolean doValidate, WorkSource workSource,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AlarmManager.AlarmClockInfo alarmClock, int callingUid, String callingPackage) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 将请求参数全部封装到Alarm对象中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Alarm a = new Alarm(type, when, whenElapsed, windowLength, maxWhen, interval,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            operation, directReceiver, listenerTag, workSource, flags, alarmClock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            callingUid, callingPackage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (ActivityManagerNative.getDefault().getAppStartMode(callingUid, callingPackage)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                == ActivityManager.APP_START_MODE_DISABLED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (RemoteException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // set Alarm之前先移除前面设置的alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    removeLocked(operation, directReceiver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 继续调用setImplLocked设置Alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setImplLocked(a, false, doValidate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;setImplLocked将请求参数封装到Alarm后继续设置Alarm。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;　frameworks/base/services/core/java/com/android/server/AlarmManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void setImplLocked(Alarm a, boolean rebatching, boolean doValidate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // FLAG_IDLE_UNTIL该定时器是Doze Idle定时器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ((a.flags&amp;amp;AlarmManager.FLAG_IDLE_UNTIL) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 如果有设置FLAG_WAKE_FROM_IDLE的Alarm mNextWakeFromIdle(第一次为null)且IDLE_UNTIL触发时间比它要长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 设置IDLE_UNTIL Alarm的触发时间为mNextWakeFromIdle触发时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mNextWakeFromIdle != null &amp;amp;&amp;amp; a.whenElapsed &amp;gt; mNextWakeFromIdle.whenElapsed) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a.when = a.whenElapsed = a.maxWhenElapsed = mNextWakeFromIdle.whenElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 将IDLE_UNTIL的触发时间随机提前一点触发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final long nowElapsed = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 计算fuzz然后取随机值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int fuzz = fuzzForDuration(a.whenElapsed-nowElapsed);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (fuzz &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mRandom == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mRandom = new Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final int delta = mRandom.nextInt(fuzz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 提前delta时间触发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a.whenElapsed -= delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a.when = a.maxWhenElapsed = a.whenElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (mPendingIdleUntil != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 当前已经处于Doze Idle状态，除了带FLAG_ALLOW_WHILE_IDLE，FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // FLAG_WAKE_FROM_IDLE flag的Alarm可以设置外，其他的Alarm被加入到mPendingWhileIdleAlarms后退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ((a.flags&amp;amp;(AlarmManager.FLAG_ALLOW_WHILE_IDLE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | AlarmManager.FLAG_WAKE_FROM_IDLE))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPendingWhileIdleAlarms.add(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // FLAG_STANDALONE标志放到单独batch中，非FLAG_STANDALONE的在mAlarmBatches中查找合适的batch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int whichBatch = ((a.flags&amp;amp;AlarmManager.FLAG_STANDALONE) != 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ? -1 : attemptCoalesceLocked(a.whenElapsed, a.maxWhenElapsed);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //　没有找到合适的batch，新建batch并加入到mAlarmBatches           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (whichBatch &amp;lt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Batch batch = new Batch(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addBatchLocked(mAlarmBatches, batch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 找到了合适的batch，添加到batch中         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Batch batch = mAlarmBatches.get(whichBatch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 添加alarm，并更新了batch触发时间，需要对mAlarmBatches里面的所有batch进行排序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (batch.add(a)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mAlarmBatches.remove(whichBatch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            addBatchLocked(mAlarmBatches, batch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (a.alarmClock != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mNextAlarmClockMayChange = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean needRebatch = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ((a.flags&amp;amp;AlarmManager.FLAG_IDLE_UNTIL) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 设置mPendingIdleUntil，即代表进入Doze Idle       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mPendingIdleUntil = a;　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mConstants.updateAllowWhileIdleMinTimeLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 需要重新rebatch所有的alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        needRebatch = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if ((a.flags&amp;amp;AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 更新mNextWakeFromIdle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed &amp;gt; a.whenElapsed) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNextWakeFromIdle = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mPendingIdleUntil != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                needRebatch = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!rebatching) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 对所有的Alarm重新进行batch操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (needRebatch) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rebatchAllAlarmsLocked(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 重新设置几个核心alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rescheduleKernelAlarmsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 更新下一个alarm的alarmClock  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateNextAlarmClockLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static int fuzzForDuration(long duration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (duration &amp;lt; 15*60*1000) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 小于15分钟，返回实际时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (int)duration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (duration &amp;lt; 90*60*1000) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 小于90分钟，最多提前15分钟&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 15*60*1000;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 90分钟以上，最多提前半小时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 30*60*1000;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 根据触发时间与最长触发时间从mAlarmBatches中找合适的batch，找到则返回index，否则返回-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int attemptCoalesceLocked(long whenElapsed, long maxWhen) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final int N = mAlarmBatches.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (int i = 0; i &amp;lt; N; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Batch b = mAlarmBatches.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ((b.flags&amp;amp;AlarmManager.FLAG_STANDALONE) == 0 &amp;amp;&amp;amp; b.canHold(whenElapsed, maxWhen)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;final class Batch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    long start;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    long end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 根据Alarm的触发时间及最大触发时间，与batch的触发时间与最大触发时间是否有重合，有重合即可以合入该batch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean canHold(long whenElapsed, long maxWhen) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (end &amp;gt;= whenElapsed) &amp;amp;&amp;amp; (start &amp;lt;= maxWhen);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 添加Alarm，并根据Alarm的触发时间判断是否需要更新batch时间，如果更新了batch时间则返回true，对batch重新排序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean add(Alarm alarm) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        boolean newStart = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // narrows the batch if necessary; presumes that canHold(alarm) is true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int index = Collections.binarySearch(alarms, alarm, sIncreasingTimeOrder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (index &amp;lt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            index = 0 - index - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alarms.add(index, alarm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 如果Alarm的触发时间比batch的触发时间要早，则更新整个batch的触发时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (alarm.whenElapsed &amp;gt; start) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            start = alarm.whenElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            newStart = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (alarm.maxWhenElapsed &amp;lt; end) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end = alarm.maxWhenElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flags |= alarm.flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return newStart;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//将mAlarmBatches按照升序排序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static boolean addBatchLocked(ArrayList&amp;lt;Batch&amp;gt; list, Batch newBatch) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int index = Collections.binarySearch(list, newBatch, sBatchOrder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (index &amp;lt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index = 0 - index - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.add(index, newBatch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (index == 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;setImplLocked中首先对FLAG_IDLE_UNTIL的alarm进行处理，然后根据mPendingIdleUntil是否null判断当前是否是Doze Idle模式，Doze Idle模式下会pending所有非FLAG_ALLOW_WHILE_IDLE，FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED，FLAG_WAKE_FROM_IDLE flag的alarm，然后添加alarm合适的batch中，最后调度设置alarm到kernel中。当涉及到FLAG_IDLE_UNTIL进入Doze Idle，或FLAG_WAKE_FROM_IDLE Doze下更新Alarm时，需重新进行rebatch操作，下面分析rebatchAllAlarmsLocked()的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;　frameworks/base/services/core/java/com/android/server/AlarmManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void rebatchAllAlarms() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rebatchAllAlarmsLocked(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void rebatchAllAlarmsLocked(boolean doValidate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 备份mAlarmBatches，mPendingIdleUntil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ArrayList&amp;lt;Batch&amp;gt; oldSet = (ArrayList&amp;lt;Batch&amp;gt;) mAlarmBatches.clone();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mAlarmBatches.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Alarm oldPendingIdleUntil = mPendingIdleUntil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long nowElapsed = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final int oldBatches = oldSet.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (int batchNum = 0; batchNum &amp;lt; oldBatches; batchNum++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Batch batch = oldSet.get(batchNum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int N = batch.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; N; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 重新添加alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            reAddAlarmLocked(batch.get(i), nowElapsed, doValidate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (oldPendingIdleUntil != null &amp;amp;&amp;amp; oldPendingIdleUntil != mPendingIdleUntil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Slog.wtf(TAG, &amp;quot;Rebatching: idle until changed from &amp;quot; + oldPendingIdleUntil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &amp;quot; to &amp;quot; + mPendingIdleUntil);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mPendingIdleUntil == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Somehow we lost this...  we need to restore all of the pending alarms.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            restorePendingWhileIdleAlarmsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rescheduleKernelAlarmsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    updateNextAlarmClockLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;rebatchAllAlarmsLocked中主要是对Alarm进行重新set及batch的操作。继续看rescheduleKernelAlarmsLocked()的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;　frameworks/base/services/core/java/com/android/server/AlarmManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void rescheduleKernelAlarmsLocked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Schedule the next upcoming wakeup alarm.  If there is a deliverable batch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // prior to that which contains no wakeups, we schedule that as well.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    long nextNonWakeup = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mAlarmBatches.size() &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取第一个wakeup的batch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final Batch firstWakeup = findFirstWakeupBatchLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取第一个batch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final Batch firstBatch = mAlarmBatches.get(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 获取第一个RtcPowerOff的batch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final Batch firstRtcWakeup = findFirstRtcWakeupBatchLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 更新mNextWakeup并调用native方法设置alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (firstWakeup != null &amp;amp;&amp;amp; mNextWakeup != firstWakeup.start) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNextWakeup = firstWakeup.start;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLastWakeupSet = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setLocked(ELAPSED_REALTIME_WAKEUP, firstWakeup.start);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //　设置RTC_POWEROFF类型的alarm到kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (firstRtcWakeup != null &amp;amp;&amp;amp; mNextRtcWakeup != firstRtcWakeup.start) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mNextRtcWakeup = firstRtcWakeup.start;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Alarm alarm = firstRtcWakeup.getAlarmByElapsedTime(mNextRtcWakeup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (alarm != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // use packageName to check if the alarm is set from deskclock app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // (power off alarm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String packageName = alarm.packageName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (DESKCLOCK_PACKAGE_NAME.equals(packageName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mIsPowerOffAlarmSet = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    AlarmManager.writePowerOffAlarmFile(AlarmManager.POWER_OFF_ALARM_SET_FILE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            AlarmManager.POWER_OFF_ALARM_SET);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if (!mIsEncryptStatus) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        AlarmManager.writePowerOffAlarmFile(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                AlarmManager.POWER_OFF_ALARM_INSTANCE_FILE, &amp;quot;&amp;quot; + alarm.when);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else if (mIsPowerOffAlarmSet)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mIsPowerOffAlarmSet = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    AlarmManager.writePowerOffAlarmFile(AlarmManager.POWER_OFF_ALARM_SET_FILE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            AlarmManager.POWER_OFF_ALARM_NOT_SET);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                setLocked(RTC_POWEROFF_WAKEUP, alarm.when);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (firstRtcWakeup == null &amp;amp;&amp;amp; mIsPowerOffAlarmSet)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mIsPowerOffAlarmSet = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            AlarmManager.writePowerOffAlarmFile(AlarmManager.POWER_OFF_ALARM_SET_FILE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    AlarmManager.POWER_OFF_ALARM_NOT_SET);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 如果firstBatch没有wakeup类型的alarm，更新nextNonWakeup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (firstBatch != firstWakeup) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nextNonWakeup = firstBatch.start;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mPendingNonWakeupAlarms.size() &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (nextNonWakeup == 0 || mNextNonWakeupDeliveryTime &amp;lt; nextNonWakeup) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nextNonWakeup = mNextNonWakeupDeliveryTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 更新nextNonWakeup并设置到kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (nextNonWakeup != 0 &amp;amp;&amp;amp; mNextNonWakeup != nextNonWakeup) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mNextNonWakeup = nextNonWakeup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setLocked(ELAPSED_REALTIME, nextNonWakeup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Alarm-trigger&quot;&gt;&lt;a href=&quot;#Alarm-trigger&quot; class=&quot;headerlink&quot; title=&quot;Alarm trigger&quot;&gt;&lt;/a&gt;Alarm trigger&lt;/h1&gt;&lt;p&gt;在AlarmManagerService的启动时，创建并启动了AlarmThread线程，AlarmThread线程中循环等待Alarm的触发。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;　frameworks/base/services/core/java/com/android/server/AlarmManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private class AlarmThread extends Thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public AlarmThread()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(&amp;quot;AlarmManager&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void run()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;Alarm&amp;gt; triggerList = new ArrayList&amp;lt;Alarm&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while (true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 在waitForAlarm中阻塞等待Alarm的触发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int result = waitForAlarm(mNativeData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 记录触发时间mLastWakeup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mLastWakeup = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 清空triggerList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            triggerList.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 获取当前绝对时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final long nowRTC = System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 获取当前相对时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final long nowELAPSED = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 首先判断是否是时间改变事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if ((result &amp;amp; TIME_CHANGED_MASK) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // The kernel can give us spurious time change notifications due to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // small adjustments it makes internally; we want to filter those out.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final long lastTimeChangeClockTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final long expectedClockTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    lastTimeChangeClockTime = mLastTimeChangeClockTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    expectedClockTime = lastTimeChangeClockTime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            + (nowELAPSED - mLastTimeChangeRealtime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 时间变化至少是 +/- 500 ms或者是第一次改变才进行处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (lastTimeChangeClockTime == 0 || nowRTC &amp;lt; (expectedClockTime-500)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        || nowRTC &amp;gt; (expectedClockTime+500)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // 由于时间变化，所以要重新批处理所有的alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    removeImpl(mTimeTickSender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    removeImpl(mDateChangeSender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    rebatchAllAlarms();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mClockReceiver.scheduleTimeTickEvent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mClockReceiver.scheduleDateChangedEvent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mNumTimeChanged++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mLastTimeChangeClockTime = nowRTC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mLastTimeChangeRealtime = nowELAPSED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Intent intent = new Intent(Intent.ACTION_TIME_CHANGED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            | Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    getContext().sendBroadcastAsUser(intent, UserHandle.ALL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // The world has changed on us, so we need to re-evaluate alarms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // regardless of whether the kernel has told us one went off.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    result |= IS_WAKEUP_MASK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (result != TIME_CHANGED_MASK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // 从mAlarmBatches中获取触发的batch的alarm并加入到triggerList中，返回是否有wakeup的alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    boolean hasWakeup = triggerAlarmsLocked(triggerList, nowELAPSED, nowRTC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    // 没有wakeup类型的alarm，在灭屏情况下加入到mPendingNonWakeupAlarms延迟执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if (!hasWakeup &amp;amp;&amp;amp; checkAllowNonWakeupDelayLocked(nowELAPSED)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        if (mPendingNonWakeupAlarms.size() == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mStartCurrentDelayTime = nowELAPSED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mNextNonWakeupDeliveryTime = nowELAPSED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    + ((currentNonWakeupFuzzLocked(nowELAPSED)*3)/2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mPendingNonWakeupAlarms.addAll(triggerList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mNumDelayedAlarms += triggerList.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        rescheduleKernelAlarmsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        updateNextAlarmClockLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        // 如果有wakeup类型的alarm，将mPendingNonWakeupAlarms加入到triggerList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        rescheduleKernelAlarmsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        updateNextAlarmClockLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        if (mPendingNonWakeupAlarms.size() &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            calculateDeliveryPriorities(mPendingNonWakeupAlarms);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            triggerList.addAll(mPendingNonWakeupAlarms);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            Collections.sort(triggerList, mAlarmDispatchComparator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            final long thisDelayTime = nowELAPSED - mStartCurrentDelayTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mTotalDelayTime += thisDelayTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            if (mMaxDelayTime &amp;lt; thisDelayTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                mMaxDelayTime = thisDelayTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mPendingNonWakeupAlarms.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        // 执行alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        deliverAlarmsLocked(triggerList, nowELAPSED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                synchronized (mLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    rescheduleKernelAlarmsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;AlarmThread线程通过waitForAlarm阻塞等待定时器触发，如果是时间改变事件，则发送时间改变通知并重新设置定时器。如果不是时间改变，则将mAlarmBatches中的首个batch的alarm加入到triggerList中，如果触发的alarm中没有wakeup类型，加入到mPendingNonWakeupAlarms中等下次执行，如果有wakeup类型的alarm，则调用deliverAlarmsLocked执行。继续看triggerAlarmsLocked的实现。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;　frameworks/base/services/core/java/com/android/server/AlarmManagerService.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean triggerAlarmsLocked(ArrayList&amp;lt;Alarm&amp;gt; triggerList, final long nowELAPSED,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final long nowRTC) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean hasWakeup = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (mAlarmBatches.size() &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 触发时间最快的alarm排在最前，取第一个batch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Batch batch = mAlarmBatches.get(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (batch.start &amp;gt; nowELAPSED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 定时时间未到，先返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAlarmBatches.remove(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int N = batch.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; N; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Alarm alarm = batch.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if ((alarm.flags&amp;amp;AlarmManager.FLAG_ALLOW_WHILE_IDLE) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 如果时FLAG_ALLOW_WHILE_IDLE类型定时器，需要至少mAllowWhileIdleMinTime的时间间隔触发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                long lastTime = mLastAllowWhileIdleDispatch.get(alarm.uid, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                long minTime = lastTime + mAllowWhileIdleMinTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (nowELAPSED &amp;lt; minTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    alarm.whenElapsed = minTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if (alarm.maxWhenElapsed &amp;lt; minTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        alarm.maxWhenElapsed = minTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    setImplLocked(alarm, true, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alarm.count = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 加入到triggerList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            triggerList.add(alarm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if ((alarm.flags&amp;amp;AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                EventLogTags.writeDeviceIdleWakeFromIdle(mPendingIdleUntil != null ? 1 : 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        alarm.statsTag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 如果时mPendingIdleUntil触发，说明是Doze Idle状态时间到期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mPendingIdleUntil == alarm) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mPendingIdleUntil = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                rebatchAllAlarmsLocked(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 恢复pending的alarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                restorePendingWhileIdleAlarmsLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mNextWakeFromIdle == alarm) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mNextWakeFromIdle = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                rebatchAllAlarmsLocked(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 如果是周期性alarm，设置下一个alarm触发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (alarm.repeatInterval &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // this adjustment will be zero if we&amp;apos;re late by&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // less than one full repeat interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                alarm.count += (nowELAPSED - alarm.whenElapsed) / alarm.repeatInterval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Also schedule its next recurrence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final long delta = alarm.count * alarm.repeatInterval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final long nextElapsed = alarm.whenElapsed + delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                setImplLocked(alarm.type, alarm.when + delta, nextElapsed, alarm.windowLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        maxTriggerTime(nowELAPSED, nextElapsed, alarm.repeatInterval),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        alarm.repeatInterval, alarm.operation, null, null, alarm.flags, true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        alarm.workSource, alarm.alarmClock, alarm.uid, alarm.packageName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 如果该alarm是wakeup类型，设置hasWakeup为true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (alarm.wakeup) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                hasWakeup = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // We removed an alarm clock. Let the caller recompute the next alarm clock.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (alarm.alarmClock != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mNextAlarmClockMayChange = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // This is a new alarm delivery set; bump the sequence number to indicate that&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // all apps&amp;apos; alarm delivery classes should be recalculated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCurrentSeq++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    calculateDeliveryPriorities(triggerList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Collections.sort(triggerList, mAlarmDispatchComparator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return hasWakeup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇继续分析Alarm设置及触发的流程。&lt;/p&gt;
&lt;p&gt;相关源码位于以下文件中:&lt;br&gt;frameworks/base/core/java/android/app/AlarmManager.java&lt;br&gt;frameworks/base/servi
    
    </summary>
    
    
      <category term="Android" scheme="http://robinheztto.com/tags/Android/"/>
    
      <category term="AlarmManagerService" scheme="http://robinheztto.com/tags/AlarmManagerService/"/>
    
  </entry>
  
</feed>
